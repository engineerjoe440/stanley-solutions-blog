<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Stanley Solutions Blog - Audio</title><link href="https://engineerjoe440.github.io/stanley-solutions-blog/" rel="alternate"></link><link href="https://engineerjoe440.github.io/stanley-solutions-blog/feeds/audio.atom.xml" rel="self"></link><id>https://engineerjoe440.github.io/stanley-solutions-blog/</id><updated>2023-01-09T09:00:00-08:00</updated><subtitle>engineering and creativity - all under one hat</subtitle><entry><title>Using Pipewire Link to Bridge the Gaps</title><link href="https://engineerjoe440.github.io/stanley-solutions-blog/using-pipewire-link-to-bridge-the-gaps.html" rel="alternate"></link><published>2023-01-09T09:00:00-08:00</published><updated>2023-01-09T09:00:00-08:00</updated><author><name>Joe Stanley</name></author><id>tag:engineerjoe440.github.io,2023-01-09:/stanley-solutions-blog/using-pipewire-link-to-bridge-the-gaps.html</id><summary type="html">&lt;p&gt;I'm ready to manage my audio "wiring" a bit more virtually, these days, and I'm ready to do that with some of the cool new tools available in Linux. Luckily for me, Pipewire has some command-line applications that make doing that an absolute cinch! And what's better, I can do it from Python, and make it a little more automagic. Now THAT's what I'm talking about!&lt;/p&gt;</summary><content type="html">&lt;p&gt;Are you a nerd like me?&lt;/p&gt;
&lt;p&gt;Do you want to connect audio devices in a Linux system easily, programmatically, and with a little help from Python?&lt;/p&gt;
&lt;p&gt;Ok, so you're probably not &lt;em&gt;quite&lt;/em&gt; a nerd like me, but if you'd probably still find some value from hearing about this
cool sub-system in the Pipewire ecosystem.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Pipewire composes ports on devices to provide a mechanism to make connections between outputs (sources) and inputs
(sinks). This makes it possible to connect applications and interfaces into any arbitrary connection set. There are even
great tools like &lt;a href="https://gitlab.freedesktop.org/rncbc/qpwgraph"&gt;&lt;code&gt;qpwgraph&lt;/code&gt;&lt;/a&gt; which make it possible to connect these
interface graphically, and make it all smooth and beautiful.&lt;/p&gt;
&lt;p&gt;&lt;img src="https://engineerjoe440.github.io/stanley-solutions-blog/images/pipewire-link/no-connections.png" width="100%" alt="qpwgraph on my system"&gt;&lt;/p&gt;
&lt;p&gt;That graphical application is beautiful, but what if you want to make those connections a little more manually, or
(if you're like &lt;em&gt;me&lt;/em&gt;), programmatically. Well, good news! Pipewire offers a whole system to make those connections from
the command-line.&lt;/p&gt;
&lt;h3&gt;Enter &lt;code&gt;pw-link&lt;/code&gt;&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$&amp;gt;&lt;span class="w"&gt; &lt;/span&gt;pw-link&lt;span class="w"&gt; &lt;/span&gt;--help
pw-link&lt;span class="w"&gt; &lt;/span&gt;:&lt;span class="w"&gt; &lt;/span&gt;PipeWire&lt;span class="w"&gt; &lt;/span&gt;port&lt;span class="w"&gt; &lt;/span&gt;and&lt;span class="w"&gt; &lt;/span&gt;link&lt;span class="w"&gt; &lt;/span&gt;manager.
Generic:&lt;span class="w"&gt; &lt;/span&gt;pw-link&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;options&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;-h,&lt;span class="w"&gt; &lt;/span&gt;--help&lt;span class="w"&gt;                            &lt;/span&gt;Show&lt;span class="w"&gt; &lt;/span&gt;this&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;help&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;--version&lt;span class="w"&gt;                         &lt;/span&gt;Show&lt;span class="w"&gt; &lt;/span&gt;version
&lt;span class="w"&gt;  &lt;/span&gt;-r,&lt;span class="w"&gt; &lt;/span&gt;--remote&lt;span class="o"&gt;=&lt;/span&gt;NAME&lt;span class="w"&gt;                     &lt;/span&gt;Remote&lt;span class="w"&gt; &lt;/span&gt;daemon&lt;span class="w"&gt; &lt;/span&gt;name
List:&lt;span class="w"&gt; &lt;/span&gt;pw-link&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;options&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;out-pattern&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="k"&gt;in&lt;/span&gt;-pattern&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;-o,&lt;span class="w"&gt; &lt;/span&gt;--output&lt;span class="w"&gt;                          &lt;/span&gt;List&lt;span class="w"&gt; &lt;/span&gt;output&lt;span class="w"&gt; &lt;/span&gt;ports
&lt;span class="w"&gt;  &lt;/span&gt;-i,&lt;span class="w"&gt; &lt;/span&gt;--input&lt;span class="w"&gt;                           &lt;/span&gt;List&lt;span class="w"&gt; &lt;/span&gt;input&lt;span class="w"&gt; &lt;/span&gt;ports
&lt;span class="w"&gt;  &lt;/span&gt;-l,&lt;span class="w"&gt; &lt;/span&gt;--links&lt;span class="w"&gt;                           &lt;/span&gt;List&lt;span class="w"&gt; &lt;/span&gt;links
&lt;span class="w"&gt;  &lt;/span&gt;-m,&lt;span class="w"&gt; &lt;/span&gt;--monitor&lt;span class="w"&gt;                         &lt;/span&gt;Monitor&lt;span class="w"&gt; &lt;/span&gt;links&lt;span class="w"&gt; &lt;/span&gt;and&lt;span class="w"&gt; &lt;/span&gt;ports
&lt;span class="w"&gt;  &lt;/span&gt;-I,&lt;span class="w"&gt; &lt;/span&gt;--id&lt;span class="w"&gt;                              &lt;/span&gt;List&lt;span class="w"&gt; &lt;/span&gt;IDs
&lt;span class="w"&gt;  &lt;/span&gt;-v,&lt;span class="w"&gt; &lt;/span&gt;--verbose&lt;span class="w"&gt;                         &lt;/span&gt;Verbose&lt;span class="w"&gt; &lt;/span&gt;port&lt;span class="w"&gt; &lt;/span&gt;properties
Connect:&lt;span class="w"&gt; &lt;/span&gt;pw-link&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;options&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;output&lt;span class="w"&gt; &lt;/span&gt;input
&lt;span class="w"&gt;  &lt;/span&gt;-L,&lt;span class="w"&gt; &lt;/span&gt;--linger&lt;span class="w"&gt;                          &lt;/span&gt;Linger&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;default,&lt;span class="w"&gt; &lt;/span&gt;unless&lt;span class="w"&gt; &lt;/span&gt;-m&lt;span class="w"&gt; &lt;/span&gt;is&lt;span class="w"&gt; &lt;/span&gt;used&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;-P,&lt;span class="w"&gt; &lt;/span&gt;--passive&lt;span class="w"&gt;                         &lt;/span&gt;Passive&lt;span class="w"&gt; &lt;/span&gt;link
&lt;span class="w"&gt;  &lt;/span&gt;-p,&lt;span class="w"&gt; &lt;/span&gt;--props&lt;span class="o"&gt;=&lt;/span&gt;PROPS&lt;span class="w"&gt;                     &lt;/span&gt;Properties&lt;span class="w"&gt; &lt;/span&gt;as&lt;span class="w"&gt; &lt;/span&gt;JSON&lt;span class="w"&gt; &lt;/span&gt;object
Disconnect:&lt;span class="w"&gt; &lt;/span&gt;pw-link&lt;span class="w"&gt; &lt;/span&gt;-d&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;options&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;output&lt;span class="w"&gt; &lt;/span&gt;input
&lt;span class="w"&gt;            &lt;/span&gt;pw-link&lt;span class="w"&gt; &lt;/span&gt;-d&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;options&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;link-id
&lt;span class="w"&gt;  &lt;/span&gt;-d,&lt;span class="w"&gt; &lt;/span&gt;--disconnect&lt;span class="w"&gt;                      &lt;/span&gt;Disconnect&lt;span class="w"&gt; &lt;/span&gt;ports
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;That's what the interface of the PW-Link command-line tool looks like. Simple, powerful, and &lt;em&gt;GREAT&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Want to list the sources (outputs)?&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$&amp;gt;&lt;span class="w"&gt; &lt;/span&gt;pw-link&lt;span class="w"&gt; &lt;/span&gt;--output&lt;span class="w"&gt; &lt;/span&gt;--id
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="m"&gt;36&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;Midi-Bridge:Midi&lt;span class="w"&gt; &lt;/span&gt;Through:&lt;span class="o"&gt;(&lt;/span&gt;capture_0&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;Midi&lt;span class="w"&gt; &lt;/span&gt;Through&lt;span class="w"&gt; &lt;/span&gt;Port-0
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="m"&gt;43&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;v4l2_input.pci-0000_03_00.4-usb-0_4_1.0:out_0
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="m"&gt;47&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;alsa_output.pci-0000_03_00.6.analog-stereo:monitor_FL
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="m"&gt;49&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;alsa_output.pci-0000_03_00.6.analog-stereo:monitor_FR
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="m"&gt;50&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;alsa_input.pci-0000_03_00.6.analog-stereo:capture_FL
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="m"&gt;51&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;alsa_input.pci-0000_03_00.6.analog-stereo:capture_FR
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Or... how about the sinks (inputs)?&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$&amp;gt;&lt;span class="w"&gt; &lt;/span&gt;pw-link&lt;span class="w"&gt; &lt;/span&gt;--input&lt;span class="w"&gt; &lt;/span&gt;--id
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="m"&gt;35&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;Midi-Bridge:Midi&lt;span class="w"&gt; &lt;/span&gt;Through:&lt;span class="o"&gt;(&lt;/span&gt;playback_0&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;Midi&lt;span class="w"&gt; &lt;/span&gt;Through&lt;span class="w"&gt; &lt;/span&gt;Port-0
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="m"&gt;46&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;alsa_output.pci-0000_03_00.6.analog-stereo:playback_FL
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="m"&gt;48&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;alsa_output.pci-0000_03_00.6.analog-stereo:playback_FR
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;blockquote&gt;
&lt;p&gt;Marvelous, isn't it?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;But how about getting those links created? How's it done? Can it be done programmatically? &lt;em&gt;With &lt;/em&gt;&lt;em&gt;Python&lt;/em&gt;&lt;em&gt;?&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Heh.&lt;/p&gt;
&lt;p&gt;Well, now it can!&lt;/p&gt;
&lt;h3&gt;Enter &lt;code&gt;pipewire_python&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/pablodz/pipewire_python"&gt;&lt;code&gt;pipewire_python&lt;/code&gt;&lt;/a&gt; is the core grounds of a Python Pipewire wrapper. It was
created by &lt;a href="https://github.com/pablodz"&gt;Pablo Diaz&lt;/a&gt; and offers some great functionality with Pipewire wrapped up in
Python. Unfortunately, it didn't yet have &lt;code&gt;pw-link&lt;/code&gt; functionality to list, create, and modify links in Pipewire. That
said, I've been able to add some of the functionality. It's in-progress in a
&lt;a href="https://github.com/pablodz/pipewire_python/pull/15"&gt;pull-request&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The PR is only a draft at the time of this writing, however, I'm hopeful it will be something that I can open officially
within a few days, and will be able to merge before the end of the week. When it &lt;em&gt;does&lt;/em&gt; merge, &lt;code&gt;pipewire_python&lt;/code&gt; will
have functional support to list inputs, outputs, and links, and it will be able to create links as mono (single
channel) or automatic-stereo (automated Left/Right channel pairing) connections. It'll be simple!&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;pipewire_python&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;link&lt;/span&gt;
&lt;span class="n"&gt;inputs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;link&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;list_inputs&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;outputs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;link&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;list_outputs&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;


&lt;span class="c1"&gt;# Connect the last output to the last input -- during testing it was found that&lt;/span&gt;
&lt;span class="c1"&gt;# Midi channel is normally listed first, so this avoids that.&lt;/span&gt;
&lt;span class="n"&gt;source&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;outputs&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;sink&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;inputs&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;source&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;connect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sink&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="c1"&gt;# Fun Fact! You can connect/disconnect in either order!&lt;/span&gt;
&lt;span class="n"&gt;sink&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;disconnect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;source&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# Tada!&lt;/span&gt;


&lt;span class="c1"&gt;# Default Input/Output links will be made with left-left and right-right&lt;/span&gt;
&lt;span class="c1"&gt;# connections; in other words, a straight stereo connection.&lt;/span&gt;
&lt;span class="c1"&gt;# It&amp;#39;s possible to manually cross the lines, however!&lt;/span&gt;
&lt;span class="n"&gt;source&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;right&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;connect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sink&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;left&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;source&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;left&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;connect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sink&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;right&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;blockquote&gt;
&lt;p&gt;Won't that be slick?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Needless to say, I'm very excited. I'm going to use this for an automated system designed to support a VBAN streaming
network built fully on Linux. It'll be a robust, low-latency audio streaming system for my home, and I won't have to use
the &lt;em&gt;"dreaded Microsoft Windows"&lt;/em&gt;. Won't that be neat?&lt;/p&gt;
&lt;p&gt;Stay tuned... I'll be sharing more on this project soon!&lt;/p&gt;</content><category term="Audio"></category><category term="linux"></category><category term="audio"></category><category term="networking"></category><category term="pipewire"></category><category term="alsa"></category><category term="sound"></category><category term="terminal"></category><category term="command-line"></category></entry><entry><title>I'm Giving Up on Low-Level Audio in Linux</title><link href="https://engineerjoe440.github.io/stanley-solutions-blog/giving-up-on-low-level-linux-audio.html" rel="alternate"></link><published>2023-01-08T10:00:00-08:00</published><updated>2023-01-08T10:00:00-08:00</updated><author><name>Joe Stanley</name></author><id>tag:engineerjoe440.github.io,2023-01-08:/stanley-solutions-blog/giving-up-on-low-level-linux-audio.html</id><summary type="html">&lt;p&gt;I'm so fed up with low-level audio in Linux. It's a constant struggle, and I'm throwing in the towel. I'm done.&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;strong&gt;I &lt;em&gt;want&lt;/em&gt; to love low-level audio in Linux.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;I really do.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;But wow. It's atrocious! I'm so tired of fighting with &lt;code&gt;aplay&lt;/code&gt; and &lt;code&gt;arecord&lt;/code&gt; trying to figure out what the heck is
actually being presented to me. It's not intuitive, it's not robust, and for pity sake, I don't think it actually works.&lt;/p&gt;
&lt;p&gt;So I'm giving up on &lt;em&gt;low-level&lt;/em&gt; audio in Linux.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Catch the drift?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;That's right, I'm not done with &lt;em&gt;audio&lt;/em&gt; in Linux. I'm done with ALSA.&lt;/p&gt;
&lt;p&gt;&lt;img src="https://i.imgur.com/ruxU5.png" width="100%" alt="seems about right..."&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;If you don't get the joke about their missing text, think about it... silence... there &lt;em&gt;should&lt;/em&gt; be words, but there's
not... it's quiet when there clearly should be sound.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I'm sick of trying to figure out which device I should use, and how to plumb it through the rest of my system. It's a
constant uphill battle with ALSA. I'm calling it quits.&lt;/p&gt;
&lt;p&gt;Luckily for me, there's Pipewire. &lt;em&gt;Beautiful, perfect, glorious, Pipewire.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Pipewire bridges a gap that seems so perfect. It takes all of the lessons the Linux community has learned from ALSA,
PulseAudio, and JACK and introduces something new. I know what you might be thinking: "something else, &lt;em&gt;new&lt;/em&gt;? Great..."
But it's not just new &lt;em&gt;to be new&lt;/em&gt;. It's new to fix all of the mistakes from those older systems. PulseAudio is great,
but it's often too simple. JACK is great for audio pros, but often is too much to just &lt;em&gt;dabble&lt;/em&gt; in. And ALSA?&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Let's not talk about ALSA anymore, shall we?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Ok... so it's true that ALSA is still being used underneath Pipewire, but &lt;em&gt;we&lt;/em&gt; don't have to deal with that nonsense.
The Pipewire system takes care of all that garbage for us.&lt;/p&gt;
&lt;p&gt;I'm going to have a whole slew of articles to follow this one, introducing lots of neat things with Pipewire, but for
now, let me introduce you to a few cool things.&lt;/p&gt;
&lt;h3&gt;Pipewire "Guide"&lt;/h3&gt;
&lt;p&gt;I can't say whether this is the &lt;em&gt;definitive&lt;/em&gt; guide to all things Pipewire, but it's a great resource, and it covers most
of the great tools I like to utilize: https://github.com/mikeroyal/PipeWire-Guide&lt;/p&gt;
&lt;h3&gt;Pipewire Graph&lt;/h3&gt;
&lt;p&gt;Ok, one thing I picked up from JACK was its super-neat graph utility. It's something I really enjoy to visualize the
connections. I must be a bit old-school, huh? Well, there's something just as slick for Pipewire, actually, there's a
few resources, but my preferred choice is &lt;a href="https://gitlab.freedesktop.org/rncbc/qpwgraph"&gt;QPWGraph&lt;/a&gt;. It's just stinkin'
awesome, if you ask me.&lt;/p&gt;
&lt;p&gt;Check out how it looks on my system! Granted, nothing's happening here, but it's still a good reference to see the
default view!&lt;/p&gt;
&lt;p&gt;&lt;img src="https://engineerjoe440.github.io/stanley-solutions-blog/images/pipewire-link/no-connections.png" width="100%" alt="qpwgraph on my system"&gt;&lt;/p&gt;</content><category term="Audio"></category><category term="linux"></category><category term="audio"></category><category term="networking"></category><category term="pipewire"></category><category term="alsa"></category><category term="sound"></category></entry><entry><title>Installing VBAN on Linux Systems with Pipewire</title><link href="https://engineerjoe440.github.io/stanley-solutions-blog/installing-vban-on-linux-with-pipewire.html" rel="alternate"></link><published>2022-12-18T10:00:00-08:00</published><updated>2022-12-18T10:00:00-08:00</updated><author><name>Joe Stanley</name></author><id>tag:engineerjoe440.github.io,2022-12-18:/stanley-solutions-blog/installing-vban-on-linux-with-pipewire.html</id><summary type="html">&lt;p&gt;I recently decided to drop Windows (finally), and move to Linux, full-time. But that means moving to Pipewire; which is both exciting and slightly daugnting. You see, to make the move, I need to get VBAN working on Linux, and talking to Pipewire. Hmm. Time to do some digging...&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Reason for being here.&lt;/h3&gt;
&lt;p&gt;That's right, I'm finally moving away from Windows as my daily driver at home. Making the move
to Kubuntu. I'm much happier with the change, but I do need to fix a reasonable set of things
and get VBAN working to make sure that my audio is still uninterrupted!&lt;/p&gt;
&lt;p&gt;What's &lt;code&gt;VBAN&lt;/code&gt;, you ask? Well, go check out my other articles:
* &lt;a href="https://blog.stanleysolutionsnw.com/networked-audio-using-vban-and-rpi.html"&gt;networked-audio-using-vban-and-rpi&lt;/a&gt;
* &lt;a href="https://blog.stanleysolutionsnw.com/spam-the-vban-for-non-stop-audio.html"&gt;spam-the-vban-for-non-stop-audio&lt;/a&gt;
* &lt;a href="https://blog.stanleysolutionsnw.com/a-better-way-to-integrate-with-voicemeeter.html"&gt;a-better-way-to-integrate-with-voicemeeter&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;In a nutshell, however, I use VBAN as a low-latency audio networking solution for my home.
It's really helped to bring whole-home audio together quite nicely. Analog can still be "easier"
in some regards, but it's more time and effor to run those wires, sometimes.&lt;/p&gt;
&lt;h3&gt;Installing VBAN&lt;/h3&gt;
&lt;p&gt;This hasn't really changed all that much since my article about
&lt;a href="https://blog.stanleysolutionsnw.com/networked-audio-using-vban-and-rpi.html"&gt;installing VBAN on the Raspberry Pi&lt;/a&gt;. It starts with installing the basics.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;sudo&lt;span class="w"&gt; &lt;/span&gt;apt&lt;span class="w"&gt; &lt;/span&gt;install&lt;span class="w"&gt; &lt;/span&gt;libasound-dev&lt;span class="w"&gt; &lt;/span&gt;autoconf&lt;span class="w"&gt; &lt;/span&gt;automake
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Cloning the repository...&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;git&lt;span class="w"&gt; &lt;/span&gt;clone&lt;span class="w"&gt; &lt;/span&gt;https://github.com/quiniouben/vban.git
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Running the autogen script...&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;./autogen.sh
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Setting up for only alsa...&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;./configure&lt;span class="w"&gt; &lt;/span&gt;--enable-alsa&lt;span class="w"&gt; &lt;/span&gt;--disable-pulseaudio&lt;span class="w"&gt; &lt;/span&gt;--disable-jack
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Then install with &lt;code&gt;make&lt;/code&gt; like the &lt;a href="https://github.com/quiniouben/vban"&gt;docs&lt;/a&gt; show.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Wanna just run one script? Yeah, me too...&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="ch"&gt;#!/usr/bin/bash&lt;/span&gt;
sudo&lt;span class="w"&gt; &lt;/span&gt;apt-get&lt;span class="w"&gt; &lt;/span&gt;install&lt;span class="w"&gt; &lt;/span&gt;libasound2-dev&lt;span class="w"&gt; &lt;/span&gt;autoconf&lt;span class="w"&gt; &lt;/span&gt;automake&lt;span class="w"&gt; &lt;/span&gt;-y

&lt;span class="nb"&gt;cd&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;/home/&lt;span class="k"&gt;$(&lt;/span&gt;whoami&lt;span class="k"&gt;)&lt;/span&gt;/Downloads

git&lt;span class="w"&gt; &lt;/span&gt;clone&lt;span class="w"&gt; &lt;/span&gt;https://github.com/quiniouben/vban.git

&lt;span class="nb"&gt;cd&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;vban

./autogen.sh

./configure&lt;span class="w"&gt; &lt;/span&gt;--enable-alsa&lt;span class="w"&gt; &lt;/span&gt;--disable-pulseaudio&lt;span class="w"&gt; &lt;/span&gt;--disable-jack

make

&lt;span class="c1"&gt;# I needed sudo, you might not? Too lazy to bother checking...&lt;/span&gt;
sudo&lt;span class="w"&gt; &lt;/span&gt;make&lt;span class="w"&gt; &lt;/span&gt;install
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;Getting Alsa Working?&lt;/h2&gt;
&lt;p&gt;Well... that's the next step. I seem to be having "fun" with that, again. I'll have to
dig around some more. I'm leaving this post incomplete, because I want to report back when I get
the darned thing working.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;... more soon ...&lt;/p&gt;
&lt;/blockquote&gt;</content><category term="Audio"></category><category term="vban"></category><category term="audio"></category><category term="networking"></category><category term="linux"></category><category term="pipewire"></category><category term="alsa"></category><category term="sound"></category></entry><entry><title>Just Some Thoghts on a Song</title><link href="https://engineerjoe440.github.io/stanley-solutions-blog/just-some-thoghts-on-a-song.html" rel="alternate"></link><published>2021-09-23T13:58:00-07:00</published><updated>2021-10-16T12:35:00-07:00</updated><author><name>Joe Stanley</name></author><id>tag:engineerjoe440.github.io,2021-09-23:/stanley-solutions-blog/just-some-thoghts-on-a-song.html</id><summary type="html">&lt;p&gt;Some songs have a hidden meaning, and one song that I really enjoy has something hidden so deeply, I just love it!&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;img src="https://images.genius.com/526afafd58e01d4b67deca68f8840a80.1000x1000x1.jpg"
    width="300" alt="LANCO" align="right"&gt;&lt;/p&gt;
&lt;p&gt;I'm a fan of many music genres, but I most certainly grew up on country. I mean... Have you met me? I wear a cowboy hat,
for pete-sake! I really lots of music, but I'll always have a soft spot for a good country love song.&lt;/p&gt;
&lt;p&gt;This definitely diverges from the other content that I often write about, but I think it's relevant. You see, one of the
modern country groups who I really enjoy is &lt;a href="https://www.lancomusic.com/"&gt;"LANCO"&lt;/a&gt;; they're more on the soulful side of
country, and their bluesy style is one that I really enjoy. Specifically, I wanted to write about one of their songs
called "Born to Love You", it's a great love song, and I want to highlight one specific piece...&lt;/p&gt;
&lt;p&gt;In the second stanza, they sing of:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Born again in a church where the steeple's white
Preacher preach Book of John and my momma cried
Meanin' of life was in verse 2
Didn't make sense 'til I found you&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;At least... According to Google...&lt;/p&gt;
&lt;p&gt;Notice that in the third line of that stanza, the words "in verse 2" are separated. But if you listen to the song, I think
that they're &lt;em&gt;not&lt;/em&gt; actually separate, at all! Instead, I think the line is a little closer to "inverse-two".&lt;/p&gt;
&lt;p&gt;So what the H-E-double-hockey-sticks is an "inverse-two" and why is it in a love song?&lt;/p&gt;
&lt;p&gt;Remember back in high-school math class, how we learned about number's inverses? An &lt;em&gt;inverse&lt;/em&gt; of a number is 1-over-that
number. In other words, a number's inverse is its fraction if you simply placed it as the denominator with 1 as the
numerator. To give a more concrete example, inverse-three is: &lt;span class="math"&gt;\(\frac{1}{3}\)&lt;/span&gt;. Likewise, inverse-two is &lt;span class="math"&gt;\(\frac{1}{2}\)&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;That's right, inverse-two is "one-half"... Read that stanza again.&lt;/p&gt;
&lt;p&gt;Suddenly, it's a little more touching, isn't it? Now whether that's truly LANCO's intention, or not, I think it adds a
whole new meaning and level of sincerity to that song. &lt;a href="https://www.youtube.com/watch?v=gjkn7orWpeA"&gt;&lt;strong&gt;Go have a listen for yourself!&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
&lt;script type="text/javascript"&gt;if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) {
    var align = "center",
        indent = "0em",
        linebreak = "false";

    if (false) {
        align = (screen.width &lt; 768) ? "left" : align;
        indent = (screen.width &lt; 768) ? "0em" : indent;
        linebreak = (screen.width &lt; 768) ? 'true' : linebreak;
    }

    var mathjaxscript = document.createElement('script');
    mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#';
    mathjaxscript.type = 'text/javascript';
    mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.3/latest.js?config=TeX-AMS-MML_HTMLorMML';

    var configscript = document.createElement('script');
    configscript.type = 'text/x-mathjax-config';
    configscript[(window.opera ? "innerHTML" : "text")] =
        "MathJax.Hub.Config({" +
        "    config: ['MMLorHTML.js']," +
        "    TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'none' } }," +
        "    jax: ['input/TeX','input/MathML','output/HTML-CSS']," +
        "    extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js']," +
        "    displayAlign: '"+ align +"'," +
        "    displayIndent: '"+ indent +"'," +
        "    showMathMenu: true," +
        "    messageStyle: 'normal'," +
        "    tex2jax: { " +
        "        inlineMath: [ ['\\\\(','\\\\)'] ], " +
        "        displayMath: [ ['$$','$$'] ]," +
        "        processEscapes: true," +
        "        preview: 'TeX'," +
        "    }, " +
        "    'HTML-CSS': { " +
        "        availableFonts: ['STIX', 'TeX']," +
        "        preferredFont: 'STIX'," +
        "        styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} }," +
        "        linebreaks: { automatic: "+ linebreak +", width: '90% container' }," +
        "    }, " +
        "}); " +
        "if ('default' !== 'default') {" +
            "MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
            "MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
        "}";

    (document.body || document.getElementsByTagName('head')[0]).appendChild(configscript);
    (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript);
}
&lt;/script&gt;</content><category term="Audio"></category><category term="Music"></category><category term="Songs"></category><category term="Audio"></category></entry><entry><title>Tech Podcasts Galore!</title><link href="https://engineerjoe440.github.io/stanley-solutions-blog/tech-podcasts-galore.html" rel="alternate"></link><published>2021-09-12T15:34:00-07:00</published><updated>2021-09-12T15:34:00-07:00</updated><author><name>Joe Stanley</name></author><id>tag:engineerjoe440.github.io,2021-09-12:/stanley-solutions-blog/tech-podcasts-galore.html</id><summary type="html">&lt;p&gt;Everyone's got their new favorite podcast these days. So here, let me list all of my favorites!&lt;/p&gt;</summary><content type="html">&lt;p&gt;I've been asked a lot lately what tech podcasts I listen to, so I thought I'd briefly summarize them all
right here!&lt;/p&gt;
&lt;p&gt;Where should I even begin, though? Perhaps I'll start with the security side of computers...&lt;/p&gt;
&lt;h4&gt;&lt;em&gt;"Darknet Diaries"&lt;/em&gt;&lt;/h4&gt;
&lt;p&gt;&lt;img src="https://upload.wikimedia.org/wikipedia/en/6/6a/Darknet_Diaries_podcast_artwork.jpg"
    width="150" alt="Darknet Diaries" align="right"&gt;&lt;/p&gt;
&lt;p&gt;One of my favorites was recommended to me by a colleague. &lt;a href="https://darknetdiaries.com/"&gt;&lt;em&gt;Darknet Diaries&lt;/em&gt;&lt;/a&gt;
is an excellent podcast covering everything in the darker side of the internet. No, don't worry... You
don't need to download a TOR browser to listen. This podcast covers everything from hackers to penetration
testers; everything in the cybersecurity space.&lt;/p&gt;
&lt;p&gt;Jack Rhysider, the host of &lt;em&gt;Darknet Diaries&lt;/em&gt; covers a wide variety of stories in the tech and security
world, and yet, somehow he manages to make each story captivating for all audiences. I really do mean &lt;strong&gt;all&lt;/strong&gt;
audiences, too. I've even had my mother and other non-techy folks listen to episodes and find some value.&lt;/p&gt;
&lt;h4&gt;&lt;em&gt;"Security Now"&lt;/em&gt;&lt;/h4&gt;
&lt;p&gt;For those interested in the deep-tech-intricacies of cybersecurity, Steve Gibson and
&lt;a href="https://twit.tv/shows/security-now"&gt;&lt;em&gt;Security Now&lt;/em&gt;&lt;/a&gt; digs deep into the meat-and-potatoes; or should I say,
they bytes-and-bits of the stuff. Covering everything from &lt;em&gt;Boot-Hole&lt;/em&gt; and &lt;em&gt;Print-Nightmare&lt;/em&gt; to the latest
in &lt;a href="https://www.wireguard.com/"&gt;Wireguard&lt;/a&gt; and new security practices for IoT devices. &lt;em&gt;Security Now&lt;/em&gt; is a
great podcast for the tech-minded and security-interested.&lt;/p&gt;
&lt;p&gt;Now... Perhaps I should switch gears to the more programming-focused side of the table. After all, I've got
a number of podcasts that I listen to in this arena too!&lt;/p&gt;
&lt;h4&gt;&lt;em&gt;"Python Bytes"&lt;/em&gt;&lt;/h4&gt;
&lt;p&gt;&lt;img src="https://pythonbytes.fm/static/img/logo.png?cache_id=391cb49247369a67c4be78b27f2b3cd5"
    width="150" alt="Python Bytes" align="left"&gt;&lt;/p&gt;
&lt;p&gt;By far, my favorite of the programming-pods, &lt;a href="https://pythonbytes.fm/"&gt;&lt;em&gt;Python Bytes&lt;/em&gt;&lt;/a&gt; covers the latest news
in the Python programming language and the areas of the tech world that Python supports. Everything from web
servers to data-science, from embedded Python to the data-center!&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Python Bytes&lt;/em&gt; is a little on the shorter side; at least when compared with the other podcasts I've listed so
far. Michael Kennedy and Brian Okken cover all the latest-and-greatest Python modules and techniques with at
least one guest host every week.&lt;/p&gt;
&lt;h4&gt;&lt;em&gt;"Talk Python to Me"&lt;/em&gt;&lt;/h4&gt;
&lt;p&gt;Another podcast from Michael Kennedy (one of the hosts of the aforementioned &lt;em&gt;Python Bytes&lt;/em&gt;) is
&lt;a href="https://talkpython.fm"&gt;&lt;em&gt;Talk Python to Me&lt;/em&gt;&lt;/a&gt;. It's a little longer than its sister podcast, and goes into
greater detail in the technology or topic of interest. Michael brings on a variety of fantastic guests, all
of which help discuss the latest news.&lt;/p&gt;
&lt;h4&gt;&lt;em&gt;"Test and Code"&lt;/em&gt;&lt;/h4&gt;
&lt;p&gt;Brian Okken's other podcast, much like &lt;em&gt;Talk Python to Me&lt;/em&gt; is a companion podcast to &lt;em&gt;Python Bytes&lt;/em&gt;. Brian,
the author of &lt;em&gt;"Python Testing with pytest: Simple, Rapid, Effective, and Scalable"&lt;/em&gt; covers the intricacies
of testing code effectively. &lt;a href="https://testandcode.com/"&gt;&lt;em&gt;Test and Code&lt;/em&gt;&lt;/a&gt; is a great podcast, and is a little
on the shorter side, so it makes for quick listening!&lt;/p&gt;
&lt;h4&gt;&lt;em&gt;"Coder Radio"&lt;/em&gt;&lt;/h4&gt;
&lt;p&gt;&lt;a href="https://coder.show/"&gt;&lt;em&gt;Coder Radio&lt;/em&gt;&lt;/a&gt; is a discussion-based show talking all about "the art and business of
programming". It's often very opinionated, but let's be honest... Have you ever met a programmer who isn't?
A Jupiter Broadcasting family podcast, &lt;em&gt;Coder Radio&lt;/em&gt; talks everything from Python to Objective-C, Rust to
Ruby, GO to JS.&lt;/p&gt;
&lt;p&gt;Now, getting into the rest of the tech-stack, we simply must talk about Linux! And here, I've got quite the
assortment of Linux podcasts... Let's get started.&lt;/p&gt;
&lt;h4&gt;&lt;em&gt;"Linux Unplugged"&lt;/em&gt;&lt;/h4&gt;
&lt;p&gt;&lt;img src="https://assets.fireside.fm/file/fireside-images/podcasts/images/f/f31a453c-fa15-491f-8618-3f71f1d565e5/cover_small.jpg?v=3"
    width="150" alt="Linux Unplugged" align="right"&gt;&lt;/p&gt;
&lt;p&gt;By far, my favorite Linux pod, &lt;a href="https://linuxunplugged.com/"&gt;&lt;em&gt;Linux Unplugged&lt;/em&gt;&lt;/a&gt; covers everything in the
community of Linux; from new technologies to community happenings. Chris Fisher and Wes Payne bring the best
of the community together and make a fantastic weekly show as part of the Jupiter Broadcasting family. Always
keeping high-energy, enthusiastic goals, and a hopeful spirit; Chris and Wes open up with the community every
Tuesday.&lt;/p&gt;
&lt;h4&gt;&lt;em&gt;"Self-Hosted"&lt;/em&gt;&lt;/h4&gt;
&lt;p&gt;Admittedly, it's not &lt;em&gt;directly&lt;/em&gt; Linux focused, but it &lt;em&gt;is&lt;/em&gt; "Linux adjacent". &lt;a href="https://selfhosted.show/"&gt;&lt;em&gt;Self-Hosted&lt;/em&gt;&lt;/a&gt;
is another Jupiter Broadcasting show, but it caters towards (namely) the self-hosting side of the open-source
community. Everything from Nextcloud to Plex, Wireguard to Home Assistant. This is another one of my favorite
podcasts, and thus its placement in my lineup.&lt;/p&gt;
&lt;h4&gt;&lt;em&gt;"Linux Action News"&lt;/em&gt;&lt;/h4&gt;
&lt;p&gt;&lt;a href="https://linuxactionnews.com/"&gt;LAN&lt;/a&gt;, A.K.A. Linux Action News, is a short-and-sweet weekly podcast covering
all the latest news in the Linux world. Whether you're a die-hard Linux fan-boy, or a part-time tech
enthusiast, LAN is a great place to get the latest news in the Linux landscape. Being part of the Jupiter
Broadcasting family, it sees the same level of wonderful production care.&lt;/p&gt;
&lt;h2&gt;More?&lt;/h2&gt;
&lt;p&gt;Hmm... this isn't an all encompassing list, but there just isn't time.... I'll have to write more after a while.&lt;/p&gt;</content><category term="Audio"></category><category term="Tech"></category><category term="Podcasts"></category><category term="Media"></category></entry></feed>