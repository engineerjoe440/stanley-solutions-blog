<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Stanley Solutions Blog</title><link href="https://engineerjoe440.github.io/stanley-solutions-blog/" rel="alternate"></link><link href="https://engineerjoe440.github.io/stanley-solutions-blog/feeds/all.atom.xml" rel="self"></link><id>https://engineerjoe440.github.io/stanley-solutions-blog/</id><updated>2020-09-30T15:45:00-07:00</updated><subtitle>Engineering and creativity - all under one hat.</subtitle><entry><title>Introducing selprotopy</title><link href="https://engineerjoe440.github.io/stanley-solutions-blog/sel-protocol-coming-to-python.html" rel="alternate"></link><published>2020-09-20T11:07:00-07:00</published><updated>2020-09-30T15:45:00-07:00</updated><author><name>Joe Stanley</name></author><id>tag:engineerjoe440.github.io,2020-09-20:/stanley-solutions-blog/sel-protocol-coming-to-python.html</id><summary type="html">&lt;p class="first last"&gt;The SEL Protocol binding suite for Python is finally coming...&lt;/p&gt;
</summary><content type="html">&lt;p&gt;SEL Protocol is finally coming for Python. That's right, you've heard correctly; it's coming.&lt;/p&gt;
&lt;img alt="The new... `selprotopy`!" src="https://raw.githubusercontent.com/engineerjoe440/sel-proto-py/master/logo/selprotopy.png" /&gt;
&lt;p&gt;But, what is SEL Protocol anyway?&lt;/p&gt;
&lt;p&gt;Well, it's a communications protocol, or standard, that was developed by &lt;a class="reference external" href="https://selinc.com/"&gt;SEL&lt;/a&gt; to support
fast data communications between protective electric relays (the devices that monitor the
power grid for faults) and communications processors. It was developed in the early '90s to
help improve communication support of devices to allow users to monitor protective relays
from a distance, and to perform control operations without being present.&lt;/p&gt;
&lt;p&gt;Anyway...&lt;/p&gt;
&lt;p&gt;I've begun writing &lt;a class="reference external" href="https://github.com/engineerjoe440/sel-proto-py"&gt;selprotopy&lt;/a&gt; which will be a protocol driver supporting SEL protocol in
Python. This means that users will be able to integrate solutions with SEL relays using
Python!&lt;/p&gt;
&lt;p&gt;Obviously, there's a lot to come, so this is not much more than an early announcement.
If you're interested in contributing, feel free to drop me a message! I'd love to interact!&lt;/p&gt;
</content><category term="Python"></category><category term="Python"></category><category term="Protocols"></category><category term="SEL"></category></entry><entry><title>Write a Good Framework - ONCE.</title><link href="https://engineerjoe440.github.io/stanley-solutions-blog/write-framework-once.html" rel="alternate"></link><published>2020-09-20T10:26:00-07:00</published><updated>2020-09-20T10:26:00-07:00</updated><author><name>Joe Stanley</name></author><id>tag:engineerjoe440.github.io,2020-09-20:/stanley-solutions-blog/write-framework-once.html</id><summary type="html">&lt;p class="first last"&gt;We all want that next great application; NOW. And we KNOW that we can just hash out this great new thing. But where does that leave us the next time we want to do the same sort of thing?&lt;/p&gt;
</summary><content type="html">&lt;p&gt;C'mon, every developer has had that epiphany moment:&lt;/p&gt;
&lt;blockquote&gt;
&amp;quot;I know, I can just write this thing now, and I'll have exactly what I need, and I'll
never need to touch it again; I'll never need to add more to it, and it will never
change.&amp;quot;&lt;/blockquote&gt;
&lt;p&gt;Yeah. Right.&lt;/p&gt;
&lt;p&gt;We wish it worked that way, but let's be honest. Projects develop, add scope, change, and
sometimes, they morph into something new entirely. Actually, that's often where great code
comes from. The best projects are the butterflies of the development world. They start as
a simple little caterpillar, but at some point along the line, they change into something
far more elegant and beautiful.&lt;/p&gt;
&lt;p&gt;That's why I'm writing this plea to developers out there in the &amp;quot;real world.&amp;quot; We know that
you could just write this little thing, but isn't it nice to get the &lt;em&gt;framework&lt;/em&gt; right the
first time so that when you need to revisit that code, it'll be so much easier. Or, better
yet, isn't it better to prepare the project for the &amp;quot;&lt;em&gt;next guy&lt;/em&gt;&amp;quot; who comes along to make
your framework into something incredible.&lt;/p&gt;
&lt;p&gt;I guess I've devolved into rambling, as usual, but my point is this: when you spend the time
to develop the framework &lt;em&gt;the right way&lt;/em&gt; the first time, you and all of your colleagues will
thank you. It will make things just &lt;strong&gt;that much easier&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;I've had a handful of experiences with this myself. I started on a couple projects at work
where I developed something that I &lt;em&gt;thought&lt;/em&gt; was a great system, and didn't really require
a superior framework. This inevitably saved time in the short-term, but it bit me later.&lt;/p&gt;
&lt;p&gt;As it turned out, I recently realized that I was re-writing the same code over, and over,
and over again every time I had to touch the code. In the end, as it seems, I didn't spend
enough time writing the framework to begin, and that hurt me.&lt;/p&gt;
&lt;div class="section" id="here-s-the-takeaway"&gt;
&lt;h2&gt;Here's the Takeaway:&lt;/h2&gt;
&lt;p&gt;Long story short, we all love just &amp;quot;pulling in&amp;quot; a library that does the &amp;quot;dirty work&amp;quot; for us.
I think it's time that we focus on getting those libraries right from the onset, so we don't
need to keep re-doing our own work, or the work of others.&lt;/p&gt;
&lt;p&gt;What do you think?&lt;/p&gt;
&lt;p&gt;I'd say drop me a note in the comments, but I haven't quite gotten that set up yet. So, for
now, just keep fighting the good fight, and &lt;em&gt;write those libraries!&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
</content><category term="Development"></category><category term="Python"></category><category term="IEC-61131"></category><category term="Development"></category></entry><entry><title>Wildfire Prevention with Sound</title><link href="https://engineerjoe440.github.io/stanley-solutions-blog/detecting-fires-with-sound.html" rel="alternate"></link><published>2020-09-10T20:39:00-07:00</published><updated>2020-09-10T20:39:00-07:00</updated><author><name>Joe Stanley</name></author><id>tag:engineerjoe440.github.io,2020-09-10:/stanley-solutions-blog/detecting-fires-with-sound.html</id><summary type="html">&lt;p class="first last"&gt;&amp;quot;Where there's smoke, there's fire...&amp;quot; Right? What about if sound were a part of it too?&lt;/p&gt;
</summary><content type="html">&lt;p&gt;I'm very pleased to say that I'm helping to support some really exciting research at
the &lt;a class="reference external" href="https://uidaho.edu"&gt;University of Idaho&lt;/a&gt; this year.&lt;/p&gt;
&lt;p&gt;A few years ago, a couple of my classmates worked on
a truly exciting project that utilized some relatively new sensory technology in conjunction
with some wireless network technology (Zigbee radios) to communicate infrasound (below the
audible range for humans) signatures back for scientists to analyze. These signatures will
inform scientists and firefighters, alike, when (and where) a wildfire has started!&lt;/p&gt;
&lt;p&gt;Now, this was all well and good, but the &lt;a class="reference external" href="http://mindworks.shoutwiki.com/wiki/Infrasound_in_wildfire"&gt;project&lt;/a&gt; lost funding. Yep. Just like that.&lt;/p&gt;
&lt;p&gt;That's why I'm so excited to be getting involved. We've already got a team of four fantastic
engineers. A mechanical engineer, two electrical engineers, and a computer scientist. With
luck the group will be able to start some fantastic research that could eventually lead to a
truly exciting product that may help wildland firefighters around the country (and around the
world) find fires &lt;em&gt;faster&lt;/em&gt; and with greater accuracy.&lt;/p&gt;
&lt;p&gt;The group is just getting started, but I'm very excited to see where things go.&lt;/p&gt;
&lt;div class="section" id="the-techy-side"&gt;
&lt;h2&gt;The Techy Side&lt;/h2&gt;
&lt;p&gt;So how is this supposed to work anyway?&lt;/p&gt;
&lt;p&gt;Well, we've all heard stories about how animals can sense an impending natural disaster, and
in fact, that's quite true with wildfire. Most wild game (and many domesticated species too)
have much more astute hearing sense. In fact, they can hear the low-frequency sounds that
we're unable to hear.&lt;/p&gt;
&lt;p&gt;The sensors we're hoping to utilize will allow our digital system to detect the low-frequency
rumble of wild fire, then with digital signal processing, we'll aim to identify audio
signatures unique to wildfire. With this, we'll be able to detect fire!&lt;/p&gt;
&lt;p&gt;Further, the goal will be to create a mesh-network of devices covering the forest floor in
areas such that devices will be able to communicate amongst themselves to precisely locate
the fire, and to report it to the authorities quickly!&lt;/p&gt;
&lt;/div&gt;
</content><category term="capstone"></category><category term="sound"></category><category term="audio"></category><category term="wildfire"></category><category term="protection"></category></entry><entry><title>IEC 61131-3 Syntax Highlighting with highlight.js</title><link href="https://engineerjoe440.github.io/stanley-solutions-blog/iec-61131-syntax-highlighting.html" rel="alternate"></link><published>2020-09-01T23:00:00-07:00</published><updated>2020-09-01T23:38:00-07:00</updated><author><name>Joe Stanley</name></author><id>tag:engineerjoe440.github.io,2020-09-01:/stanley-solutions-blog/iec-61131-syntax-highlighting.html</id><summary type="html">&lt;p class="first last"&gt;Adding context to 61131 code snippets with &lt;cite&gt;highlight.js&lt;/cite&gt;.&lt;/p&gt;
</summary><content type="html">&lt;p&gt;I've been investigating some new resources for high-level documentation, including
automated presentation builders, and along the way, a question arose.&lt;/p&gt;
&lt;p&gt;If I want to demonstrate code examples for IEC 61131-3, is there a way that I can provide
syntax highlighting so that readers will be able to understand the material more clearly?&lt;/p&gt;
&lt;p&gt;So what is syntax highlighting anyway? Well, for code snippets, syntax highlighting uses
various colors and fonts to isolate the unique keywords, operators, and other items that
are standard in that particular programming language. I'll show an example here momentarily.
This is very useful because it allows readers to quickly interpret what the code is
intentionally doing.&lt;/p&gt;
&lt;p&gt;I was fortunate enough that I was able to find a project that was already providing syntax
highlighting for IEC 61131-3 in the &lt;cite&gt;highlight.js&lt;/cite&gt; project framework (though not natively)
and thus, I could leverage existing work! Trouble is, since it's not already a native
&amp;quot;language&amp;quot; it comes with its own set of challenges. The source of this highlighter comes
from the &lt;a class="reference external" href="https://github.com/highlightjs/highlightjs-structured-text"&gt;GitHub highlightjs Project&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;My challenge was identifying an effective way of declaring the language so that I could
use it with &lt;a class="reference external" href="https://github.com/marp-team/marpit"&gt;Marpit&lt;/a&gt; which is part of the Marp project; a system built to convert
markdown files to HTML or PPTX presentations. (Be on the lookout for an upcoming article
on this topic.)&lt;/p&gt;
&lt;div class="section" id="solution"&gt;
&lt;h2&gt;Solution&lt;/h2&gt;
&lt;p&gt;After much trial and tribulation, I finally realized a solution. Since I was using
&lt;cite&gt;highlight.js&lt;/cite&gt; as a required module in the marp framework, I could simply add the language
definition and register it accordingly. Here are the steps I took to modify my installation
to make it work as I wished.&lt;/p&gt;
&lt;ol class="arabic"&gt;
&lt;li&gt;&lt;p class="first"&gt;Locate existing highlight.js installation location by finding dependent module (in my
case marp). Then open directory (since I'm using Windows, I can use
&lt;cite&gt;Explorer &amp;lt;path/to/marp/directory&amp;gt;&lt;/cite&gt;&lt;/p&gt;
&lt;img alt="Identify the install location." src="https://engineerjoe440.github.io/stanley-solutions-blog/images/61131-highlighting/cmd-view.png" /&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Navigate to the directory containing the module of interest, then navigate to the
&lt;cite&gt;node_modules/highlight.js&lt;/cite&gt; folder underneath the desired module. In my case, since
I'm using marp-cli, I navigated to
&lt;cite&gt;node_modules/&amp;#64;marp-team/marp-cli/node_modules/highlight.js/lib&lt;/cite&gt;&lt;/p&gt;
&lt;img alt="Locate the `index.js` file for modification." src="https://engineerjoe440.github.io/stanley-solutions-blog/images/61131-highlighting/explorer-view.png" /&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Open the &lt;cite&gt;index.js&lt;/cite&gt; file in a text editor and add a new line to register the &lt;cite&gt;iecst&lt;/cite&gt;
language.&lt;/p&gt;
&lt;img alt="Registering the new language." src="https://engineerjoe440.github.io/stanley-solutions-blog/images/61131-highlighting/register-language.png" /&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Finally, navigate to the languages folder and add the &lt;cite&gt;iecst.js&lt;/cite&gt; file. Here, for my
application, I had to make some modifications (which I documented fully in an &lt;a class="reference external" href="https://github.com/highlightjs/highlightjs-structured-text/issues/9#issuecomment-685266264"&gt;issue&lt;/a&gt;
and &lt;a class="reference external" href="https://github.com/highlightjs/highlightjs-structured-text/pull/10"&gt;pull request&lt;/a&gt; on the source repository).&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class="section" id="summary"&gt;
&lt;h2&gt;Summary&lt;/h2&gt;
&lt;p&gt;To make this long story longer, I'll be writing more later to document how my Marp
integration comes along. For the meantime, here's the takeaway:&lt;/p&gt;
&lt;p&gt;Syntax highlighting &lt;em&gt;does&lt;/em&gt; exist for IEC 61131-3, and it'll become easier to implement
going forward!&lt;/p&gt;
&lt;p&gt;Oh, and how about what that syntax-highlighted code? What does it look like anyway?&lt;/p&gt;
&lt;p&gt;Have a look for yourself!&lt;/p&gt;
&lt;img alt="An example of (nonsense) syntax-highlighted 61131 code." src="https://engineerjoe440.github.io/stanley-solutions-blog/images/61131-highlighting/61131example.png" /&gt;
&lt;/div&gt;
</content><category term="IEC-61131-3"></category><category term="iec-61131-3"></category><category term="documentation"></category></entry><entry><title>A Picture is Worth a Thousand Words</title><link href="https://engineerjoe440.github.io/stanley-solutions-blog/making-bitmap-images-from-bytes.html" rel="alternate"></link><published>2020-08-21T08:49:00-07:00</published><updated>2020-09-01T11:42:00-07:00</updated><author><name>Joe Stanley</name></author><id>tag:engineerjoe440.github.io,2020-08-21:/stanley-solutions-blog/making-bitmap-images-from-bytes.html</id><summary type="html">&lt;p class="first last"&gt;Making images and plotting might just be possible in real-time-controllers.&lt;/p&gt;
</summary><content type="html">&lt;p&gt;I was introduced to a very nice gentleman about a year ago who was demonstrating some
logic that created a .PNG file to demonstrate fault currents easily, and could be
attached in-line as part of an email body. What was so interesting to me is that this
all part of some logic that originated on an &lt;a class="reference external" href="https://selinc.com/products/3530/"&gt;SEL RTAC&lt;/a&gt; using some of the functionality
in one of the many IEC 61131-3 libraries that are maintained by myself and the other
developers in the Automation Controllers Group.&lt;/p&gt;
&lt;p&gt;Now, the trouble with what this gentleman shared with me, is the reliance on an external
server to process the .CEV and &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Comtrade#:~:text=COMTRADE%20(Common%20format%20for%20Transient,to%20transient%20power%20system%20disturbances."&gt;COMTRADE&lt;/a&gt; files generated by monitored protective relays.
That was all well and good, but I still wasn't quite satisfied since there was a certain
amount of reliance on some other device. I wanted something better.&lt;/p&gt;
&lt;p&gt;I suppose at this point, I should take a step back. For those who don't eat, sleep, and
breath power systems engineering and electrical power system protection, an &amp;quot;event record&amp;quot;
is something of a novel idea. So what the h-e-double-hockey-sticks is an &amp;quot;event record?&amp;quot;&lt;/p&gt;
&lt;p&gt;I'm glad you've asked.&lt;/p&gt;
&lt;p&gt;Well, a fault on a power system (like when you run into a power pole and it knocks down
one of the wires - those are bad days) causes all sorts of &amp;quot;bad behavior&amp;quot; on the electrical
system, and that bad behavior can be monitored and measured. It's what we use in the
traditional sense to detect faults in the first place and make a decision to open an
electrical breaker to shut off the power. Remember when you plugged in too many Christmas
lights and the breaker popped? It's the same idea, just at a much higher degree of accuracy.&lt;/p&gt;
&lt;p&gt;So &amp;quot;events&amp;quot; have certain behavior, and engineers are often interested in characterizing
that behavior so that they can better understand not only what happened, but how it could
be prevented going forward. Back when Dr. Ed Schweitzer first invented the SEL-21 protective
relay (a conversation for another day), he added a very nifty little feature called &amp;quot;event
recording.&amp;quot; It added the ability to record information about the event when it occurred
so that someone could go back and analyze it at a later time. These event records contain
a lot of information, and they require special software to open them, to interpret them,
etcetera. Here's an example of what an event record might look like. This was taken from
a technical paper written titled &amp;quot;Numerical model framework of power quality events&amp;quot; by
Rodney Tan and Vigna Ramachandaramurthy; the full paper's linked below, so take a look if
you're so inclined!&lt;/p&gt;
&lt;img alt="An example power system fault &amp;quot;Event Record&amp;quot;." src="https://engineerjoe440.github.io/stanley-solutions-blog/images/power-system-fault.png" /&gt;
&lt;p&gt;&lt;a class="reference external" href="https://www.researchgate.net/publication/290451701_Numerical_model_framework_of_power_quality_events"&gt;Tan, Rodney &amp;amp; Ramachandaramurthy, Vigna K.. (2010). Numerical model framework of power
quality events. 43. 30-47.&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Soooo, the idea that this gentleman and his team had crafted was to extract the
most interesting portion of the information and plug that into an image that could be made
part of an email. This way, a technician could easily look at the image and quickly make
decisions without having to load the full event record on a computer. This full analysis
could still be done later, but having the image available in the email might give an
engineer the ability to make quick decisions to help restore power to homes and families
more quickly!&lt;/p&gt;
&lt;p&gt;I've recently completed some research where I've been able to effectively create a simple
RGB image in the Bitmap format (.BMP file) so that it can be used and interpreted by most
any computer available today. And should certainly allow for direct inclusion in emails.&lt;/p&gt;
&lt;p&gt;Ultimately, this means that there's a good chance that technicians could effectively see
the report of an event without any advanced software, simply by opening their email client
on their smart phone. Talk about convenience. I've been doing some development and testing
and I found great value in this article from technical-recipes.com:&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://www.technical-recipes.com/2011/creating-bitmap-files-from-raw-pixel-data-in-c/"&gt;https://www.technical-recipes.com/2011/creating-bitmap-files-from-raw-pixel-data-in-c/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I hope that I'll be sharing more as I fully flesh out some design where I can effectively
create plots in a byte-array that can be stored as an image.&lt;/p&gt;
</content><category term="IEC-61131-3"></category><category term="iec61131-3"></category><category term="automation"></category></entry><entry><title>We're going live.</title><link href="https://engineerjoe440.github.io/stanley-solutions-blog/we're-going-live.html" rel="alternate"></link><published>2020-08-21T08:35:00-07:00</published><updated>2020-08-21T08:35:00-07:00</updated><author><name>Joe Stanley</name></author><id>tag:engineerjoe440.github.io,2020-08-21:/stanley-solutions-blog/we're-going-live.html</id><summary type="html">&lt;p class="first last"&gt;Let the automation begin... Just stand back.&lt;/p&gt;
</summary><content type="html">&lt;p&gt;I'm imagining the sound of an old-school electric motor grinding its way up to nominal
speed. Can you hear it? That low groan trying ever-so-hard to come up to a comfortable
range.&lt;/p&gt;
&lt;p&gt;I suppose I should step back and introduce myself. I'm Joe Stanley, at the time of writing,
I'm twenty-three years old, and a graduate of the University of Idaho with both a Bachelors
and Masters in Electrical Engineering. I work with Schweitzer Engineering Laboratories (SEL)
in Pullman, Washington. I spend far too much time trying to automate things that would have
been faster to do by hand; but I guess that's engineering. I'm an avid Pythonista, and I'm
always trying to &amp;quot;convert&amp;quot; others into the language. I also spend a great deal of time
developing and maintaining IEC 61131-3 libraries for SEL.&lt;/p&gt;
&lt;p&gt;I have far too many ideas and thoughts, so I think it's time to start sharing them. If it's
somewhere on the scale between sustainability and automation, I'm probably interested in it.&lt;/p&gt;
&lt;p&gt;My hope is that I might start sharing thoughts, ideas, projects, and guides here on this
blog. Now, I'm sure you can hear that motor grinding up to speed!&lt;/p&gt;
</content><category term="automation"></category><category term="automation"></category><category term="python"></category><category term="iec61131-3"></category></entry></feed>