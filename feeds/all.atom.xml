<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Stanley Solutions Blog</title><link href="https://engineerjoe440.github.io/stanley-solutions-blog/" rel="alternate"></link><link href="https://engineerjoe440.github.io/stanley-solutions-blog/feeds/all.atom.xml" rel="self"></link><id>https://engineerjoe440.github.io/stanley-solutions-blog/</id><updated>2021-01-04T21:07:00-08:00</updated><subtitle>Engineering and creativity - all under one hat.</subtitle><entry><title>GitLab, Jenkins, Python, and the Raspberry Pi!</title><link href="https://engineerjoe440.github.io/stanley-solutions-blog/gitlab-jenkins-and-the-rpi.html" rel="alternate"></link><published>2020-12-21T19:07:00-08:00</published><updated>2021-01-04T21:07:00-08:00</updated><author><name>Joe Stanley</name></author><id>tag:engineerjoe440.github.io,2020-12-21:/stanley-solutions-blog/gitlab-jenkins-and-the-rpi.html</id><summary type="html">&lt;p class="first"&gt;I'm finally getting around to setting up some CI/CD systems for my self-hosted GitLab server... About Time!&lt;/p&gt;
&lt;p class="last"&gt;CI/CD, Dev Ops, Pipelines, Workflows, Automated Deployment&lt;/p&gt;
</summary><content type="html">&lt;p&gt;Think that's enough buzz words to catch the Google SEO engine's eye?&lt;/p&gt;
&lt;p&gt;Probably not, I know, but I'm not going to spend anymore time on it at the moment. See,
I've got bigger items to tackle! Namely, getting Jenkins set up on a Raspberry Pi, as
the name of this article so implies.&lt;/p&gt;
&lt;p&gt;Good news for you; I've cut out the &amp;quot;dirty-work&amp;quot; through the magic of &amp;quot;blog-posting.&amp;quot;&lt;/p&gt;
&lt;p&gt;As part of the work I've been tackling for some of the other open source projects I'm
developing, I need to develop a local (on-premises) continuous integration solution to
effectively slam my code with testing and verification. After all, what's great code
without equally great tests? I need to have the system on-premises for a couple reasons;
the largest of which being the fact that I need access to custom hardware.&lt;/p&gt;
&lt;blockquote&gt;
So, why a Pi? A Pi 3-B no less?!&lt;/blockquote&gt;
&lt;p&gt;Well, that's quite simple; actually. It's the only spare computer I have at the moment.&lt;/p&gt;
&lt;p&gt;So now that I've thoroughly introduced you, to my reasoning, and the topic at hand;
let's get into it!&lt;/p&gt;
&lt;div class="section" id="installing-jenkins-on-the-pi"&gt;
&lt;h2&gt;Installing Jenkins on the Pi&lt;/h2&gt;
&lt;p&gt;I already have GitLab set up on an old x86 laptop running Ubuntu Server 20.04, so
for this article, I'm going to focus on setting up Jenkins on a Raspberry Pi, and
getting the basics of the workflow between Jenkins and GitLab running.&lt;/p&gt;
&lt;ol class="arabic"&gt;
&lt;li&gt;&lt;p class="first"&gt;Start with a fresh Pi (latest build of the RaspberryPiOS). I had a Pi sitting
around with an older build of Raspbian, but that's several years old, and I
really just wanted to start fresh.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Update the Raspberry Pi. Well, in the spirit of starting fresh, might as well
update the system!&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Install Java with:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$&lt;/span&gt;&amp;gt; sudo apt-get install openjdk-11-jre
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Verify Java Version with:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$&lt;/span&gt;&amp;gt; java --version
&lt;span class="go"&gt;openjdk 11.0.9.1 2020-11-04&lt;/span&gt;
&lt;span class="go"&gt;OpenJDK Runtime Environment (build 11.0.9.1+1-post-Raspbian-1deb10u2)&lt;/span&gt;
&lt;span class="go"&gt;OpenJDK Server VM (build 11.0.9.1+1-post-Raspbian-1deb10u2, mixed mode)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;At this point, I took some time to get the Python system up to a state that
would be a bit more useful for me. So I installed &lt;cite&gt;pip3&lt;/cite&gt;, and a number of
Python packages. I suppose this could really be done at any point during this
whole process, but I felt like this was the most sensible time.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Download and add the Jenkins Key with:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$&lt;/span&gt;&amp;gt; wget -q -O - https://pkg.jenkins.io/debian/jenkins.io.key &lt;span class="p"&gt;|&lt;/span&gt; sudo apt-key add -
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Open a new file:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$&lt;/span&gt;&amp;gt; sudo nano /etc/apt/sources.list.d/jenkins.list
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Then add the following line and save the file to add the Jenkins repository as
a source:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;deb https://pkg.jenkins.io/debian binary/
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Next, another good &lt;cite&gt;sudo apt-get update&lt;/cite&gt; is in order, followed by
&lt;cite&gt;sudo apt-get install jenkins&lt;/cite&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Using the command listed below, you can grab the initial admin password to get
started:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$&lt;/span&gt;&amp;gt; sudo cat /var/lib/jenkins/secrets/initialAdminPassword
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Now it's time to navigate to &lt;cite&gt;&amp;lt;raspberry-pi-ip-address:8080&lt;/cite&gt; and use that fancy
password to log in for the first time and start the setup wizard; or should I say
butler?&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;After the &amp;quot;butler&amp;quot; has completed, it's time to get started with setting up some CI
jobs.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="preparing-a-simple-pytest-job-with-jenkins"&gt;
&lt;h2&gt;Preparing a Simple &lt;cite&gt;pytest&lt;/cite&gt; Job with Jenkins&lt;/h2&gt;
&lt;p&gt;Now, I'll caution that I this portion doesn't cover any of the GitLab/Jenkins
interfacing, maybe I'll get to writing that in another article... As part of the
material I'm skipping, I'm going to breeze right over the GitLab connection and
repository information. I'm going to focus, instead, on the build operations.&lt;/p&gt;
&lt;ol class="arabic"&gt;
&lt;li&gt;&lt;p class="first"&gt;With the new Jenkins server up and running, create a &amp;quot;New Item,&amp;quot; give it a
descriptive, memorable name, and set it as a &amp;quot;Freestyle Project&amp;quot;&lt;/p&gt;
&lt;img alt="Create a new project in Jenkins for CI." src="https://engineerjoe440.github.io/stanley-solutions-blog/images/jenkins-new-config.png" style="width: 800px;" /&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;After configuring the various other settings relevant to the project (repository,
build-triggers, etc.) find the &lt;em&gt;&amp;quot;Build&amp;quot;&lt;/em&gt; section and from the &lt;em&gt;&amp;quot;Add build step&amp;quot;&lt;/em&gt;
select &lt;em&gt;&amp;quot;Execute shell&amp;quot;&lt;/em&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;In the new &amp;quot;Command&amp;quot; field of the &amp;quot;Execute shell&amp;quot; section, insert the commands
necessary to navigate to the appropriate subdirectory and run &lt;cite&gt;pytest&lt;/cite&gt;. In my case,
my pytest &amp;quot;test folder&amp;quot; is located in the root directory, so I don't really need
to change the working directory; I just go and run &lt;cite&gt;pytest&lt;/cite&gt;. I do run a few other
generic commands just to make sure that I've got a fair report of the build
environment in case I need to go back and debug some things. So, here's a sample
of what my configuration might look like.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="go"&gt;echo &amp;quot;Current Directory&amp;quot;&lt;/span&gt;
&lt;span class="go"&gt;pwd&lt;/span&gt;
&lt;span class="go"&gt;echo &amp;quot;List Folder Structure&amp;quot;&lt;/span&gt;
&lt;span class="go"&gt;ls -a ./&amp;lt;name-of-my-python-package-folder&amp;gt;&lt;/span&gt;
&lt;span class="go"&gt;echo &amp;quot;Run pytest&amp;quot;&lt;/span&gt;
&lt;span class="go"&gt;pytest -v&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class="section" id="summary"&gt;
&lt;h2&gt;Summary&lt;/h2&gt;
&lt;p&gt;Well, that's a pretty rough intro into what I've been doing in Jenkins and GitLab.
Kinda rough, but I hope I'll be looking to add more in the near future.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Python"></category><category term="Python"></category><category term="Jenkins"></category><category term="Gitlab"></category><category term="Raspberry Pi"></category><category term="Dev Ops"></category><category term="GIT"></category><category term="CI/CD"></category></entry><entry><title>Synchronizing Home Audio with the Raspberry Pi and VBAN</title><link href="https://engineerjoe440.github.io/stanley-solutions-blog/networked-audio-using-vban-and-rpi.html" rel="alternate"></link><published>2020-12-19T19:44:00-08:00</published><updated>2020-12-19T19:44:00-08:00</updated><author><name>Joe Stanley</name></author><id>tag:engineerjoe440.github.io,2020-12-19:/stanley-solutions-blog/networked-audio-using-vban-and-rpi.html</id><summary type="html">&lt;p class="first last"&gt;Ever wish your music was synchronized across your home, but you didn't have to sell your soul to Google to make it happen? Well, I did it with a Raspberry Pi and a nifty little open-source project!&lt;/p&gt;
</summary><content type="html">&lt;p&gt;I'm something of an audiophile.&lt;/p&gt;
&lt;p&gt;Not completely, mind you, just partly.&lt;/p&gt;
&lt;p&gt;Why partly? Well, I love audio! Anymore, I don't really watch television, or movies; but I listen
to audiobooks, podcasts, music, and more all the time! I like to listen everywhere. Home, work,
while driving. EVERYWHERE. And I like to have my audio follow me around all the time. In other
words, I like having the same music in my study as what's in my living room, kitchen, bathroom,
bedroom... EVERYWHERE.&lt;/p&gt;
&lt;p&gt;I'd say that I enjoy quality HiFi audio, but I'm not the pickiest out there. My kitchen, for
example has some pretty crude audio since I bought a pretty cheap stereo reciever and just
sorta threw it together. Still, I enjoy it. It gives me audio when I'm cooking, cleaning, or just
hanging out; and for me, that's the most important part.&lt;/p&gt;
&lt;p&gt;When I bought my home, I decided that I was going to install an &amp;quot;Audio Bus&amp;quot; to allow bi-directional
audio transportation. I've since started on the project, but I've run out of speaker cable, and
considering the crazy holiday spending, I've put on the brakes for the moment on my &amp;quot;personal&amp;quot;
spending. That means that I've only been able to hard-wire a connection between the kitchen and
my study. But I &lt;em&gt;really&lt;/em&gt; want more.&lt;/p&gt;
&lt;div class="section" id="my-solution"&gt;
&lt;h2&gt;My Solution&lt;/h2&gt;
&lt;p&gt;Enter &lt;a class="reference external" href="https://vb-audio.com/Voicemeeter/vban.htm"&gt;VB Audio Network&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;VBAN is a UDP-based network audio streaming protocol that was developed by the same individual
who created the &lt;a class="reference external" href="https://vb-audio.com/Voicemeeter/banana.htm"&gt;Banana&lt;/a&gt; audio mixer which I've come to love for my desktop audio mixing desires.
It's essentially a networked audio system, allowing streaming audio transmission and reception,
and it's officially supported on Windows, Android, and iOS; and community-supported on Linux!&lt;/p&gt;
&lt;p&gt;That's right, it's available on Linux, and it's fully open-source as &lt;a class="reference external" href="https://github.com/quiniouben/vban"&gt;vban&lt;/a&gt; where it's
accessible as a command-line-based reciever or transmitter.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="my-process"&gt;
&lt;h2&gt;My Process&lt;/h2&gt;
&lt;p&gt;So... Late last night, after a long day of work, I decided I wasn't done programming, so I
started in on this project. I took an old Raspberry Pi that I'd already mounted in my
vintage Zenith cabinet stereo (that's a story for another day, and I'll have to tell you about
it!) and I began preparing it. Somehow, I'd ruined the SD card, so I chucked the original SD and
flashed a new one with the latest build of RaspberryOS. After I had the card flashed, I dropped
an empty file titled 'ssh' in the &lt;cite&gt;/boot&lt;/cite&gt; directory so that it would enable SSH on initial boot.&lt;/p&gt;
&lt;p&gt;Now, with SSH set up, and my new SD card plugged into the Pi, I powered it up and connected
remotely; updating the system with &lt;cite&gt;sudo apt-get update&lt;/cite&gt; and &lt;cite&gt;sudo apt-get upgrade -y&lt;/cite&gt; I had a
fresh install ready for my experimentation!&lt;/p&gt;
&lt;p&gt;Now, for the benefit of new tinkerers interested in VBAN setup on a Pi (and a way to jog my own
terrible memory sometime in the future), I'll try to illustrate the remaining steps as best I can
remember. I had to play with some trial and error, so I'm reordering some steps to make it more
clear and straight-forward, but I'll comment on some of the &amp;quot;hardships&amp;quot; I had after we get through
all of the steps. My process was centered around the installation instructions on the &lt;a class="reference external" href="https://github.com/quiniouben/vban"&gt;vban&lt;/a&gt;
project README, but I did deviate a little to get it working.&lt;/p&gt;
&lt;ol class="arabic"&gt;
&lt;li&gt;&lt;p class="first"&gt;After preparing my &amp;quot;fresh install,&amp;quot; I went ahead and installed the Raspberry Pi and Alsa
headers so that they'd show up for the installation.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$&lt;/span&gt;&amp;gt; sudo apt-get install raspberrypi-kernel-headers
&lt;span class="gp"&gt;$&lt;/span&gt;&amp;gt; sudo apt-get install libasound-dev
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;With my new headers installed, I was ready to clone the git repo and build it. I guess that at
this point, I &lt;em&gt;should&lt;/em&gt; mention that I'd previously installed git, but I suppose you might have
been able to infer that on your own. Anyway, I cloned the repo to my home folder:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$&lt;/span&gt;&amp;gt; git clone https://github.com/quiniouben/vban.git
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Now, I moved myself into that new directory with: &lt;cite&gt;cd vban&lt;/cite&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Before I could build the &lt;cite&gt;vban&lt;/cite&gt; system by following the instructions on the GitHub repo, I
needed to install the &lt;cite&gt;autoconf&lt;/cite&gt; tools so that the autoconfiguration scripts would function.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$&lt;/span&gt;&amp;gt; sudo apt-get install autotools-dev
&lt;span class="gp"&gt;$&lt;/span&gt;&amp;gt; sudo apt-get install autoconf
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;I then went ahead and followed the installation instructions from the &lt;cite&gt;vban&lt;/cite&gt; project README,
substituting a few extra arguments to satisfy the system requirements (Alsa only, no Pulse/Jack).&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$&lt;/span&gt;&amp;gt; ./autogen.sh
&lt;span class="gp"&gt;$&lt;/span&gt;&amp;gt; ./configure --enable-alsa --disable-pulseaudio --disable-jack      &lt;span class="c1"&gt;# Only using Alsa&lt;/span&gt;
&lt;span class="gp"&gt;$&lt;/span&gt;&amp;gt; make
&lt;span class="gp"&gt;$&lt;/span&gt;&amp;gt; make install
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;After I got all of that working, I was able to set up my Windows desktop running Banana Mixer
to stream to my Raspberry Pi using VBAN. I configured VBAN on my desktop to stream as such:&lt;/p&gt;
&lt;img alt="Windows VBAN server configuration." src="https://engineerjoe440.github.io/stanley-solutions-blog/images/vban_desktop.png" style="width: 800px;" /&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Then, I could simply issue the following command in my Raspberry Pi to start listening!&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$&lt;/span&gt;&amp;gt; vban_receptor -i &amp;lt;my-desktop-ip&amp;gt; -p &lt;span class="m"&gt;6980&lt;/span&gt; -s StereoPi -d front -q &lt;span class="m"&gt;0&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This meant that I'd listen for a stream of name &amp;quot;StereoPi&amp;quot; from my desktop with it's specific
IP address on port 6980. I'd then stream that audio to the &amp;quot;front&amp;quot; output in my Alsa config,
and (since this is a hard-wired Ethernet connection) I set the highest quality to reduce delay.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Viola! I've now begun sharing audio between my desktop and the Raspberry Pi!&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="another-dilemma"&gt;
&lt;h2&gt;Another Dilemma&lt;/h2&gt;
&lt;p&gt;Ah, but we weren't done yet! See, that command is blocking, meaning that if I close my SSH
connection, say good bye to audio! Drat!&lt;/p&gt;
&lt;p&gt;I decided that to fix this, I'd write a little systemd service, and keep it disabled, so that
I could start and stop it easily enough (so if I want to use other audio services, they won't
clash too terribly).&lt;/p&gt;
&lt;p&gt;So I wrote this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# vbanstereorx.service&lt;/span&gt;
&lt;span class="c1"&gt;# VBAN Receptor Stereo Service&lt;/span&gt;

&lt;span class="k"&gt;[Unit]&lt;/span&gt;
&lt;span class="na"&gt;Description&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;VBAN Stereo Receptor&lt;/span&gt;

&lt;span class="k"&gt;[Service]&lt;/span&gt;
&lt;span class="na"&gt;Type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;simple&lt;/span&gt;
&lt;span class="na"&gt;ExecStart&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;/usr/local/bin/vban_receptor  -i &amp;lt;my-desktop-ip&amp;gt; -p 6980 -s StereoPi -d front -q 0&lt;/span&gt;

&lt;span class="k"&gt;[Install]&lt;/span&gt;
&lt;span class="na"&gt;WantedBy&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;multi-user.target&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Then simply &amp;quot;installed&amp;quot; it with the following command:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$&lt;/span&gt;&amp;gt; cp vbanstereorx.service /etc/systemd/system/vbanstereorx.service
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now, I can just start or stop the reciever by issuing &lt;cite&gt;sudo systemctl start vbanstereorx&lt;/cite&gt; or
&lt;cite&gt;sudo systemctl stop vbanstereeorx&lt;/cite&gt;, respectively!&lt;/p&gt;
&lt;div class="section" id="the-other-challenges"&gt;
&lt;h3&gt;The Other Challenges&lt;/h3&gt;
&lt;p&gt;I'm afraid it all wasn't easy-peasy, and setup smooth; there were still a few hiccups.&lt;/p&gt;
&lt;p&gt;Right now, the biggest thing is that I believe Alsa is on its way out for the Raspberry
Pi, so I have a feeling that I'm gonna need to reform this at some point, but perhaps
that's just for the Pi4 for the time being? I'm not really sure... Anyone who might know,
&lt;a class="reference external" href="mailto:engineerjoe440&amp;#64;yahoo.com"&gt;hit me up&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The other issue that I ran into during installation was the use of autoconfig scripts and
RPi/Alsa headers. Since they weren't &lt;em&gt;explicitly&lt;/em&gt; called out as installation requisites,
I bumped into them, and had to take to Googling my way out of a corner. Wasn't bad, just
slowed me down.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="what-s-next"&gt;
&lt;h2&gt;What's next?&lt;/h2&gt;
&lt;p&gt;I'll have to save that for another post; another day. Just keep your eyes peeled!&lt;/p&gt;
&lt;/div&gt;
</content><category term="Raspberry Pi"></category><category term="Raspberry Pi"></category><category term="VBAN"></category><category term="Audio"></category><category term="Networking"></category><category term="Music"></category><category term="Home Automation"></category></entry><entry><title>pycev - A Python CEV Reader</title><link href="https://engineerjoe440.github.io/stanley-solutions-blog/pycev-a-python-cev-reader.html" rel="alternate"></link><published>2020-12-12T10:59:00-08:00</published><updated>2020-12-12T10:59:00-08:00</updated><author><name>Joe Stanley</name></author><id>tag:engineerjoe440.github.io,2020-12-12:/stanley-solutions-blog/pycev-a-python-cev-reader.html</id><summary type="html">&lt;p class="first last"&gt;Another new project? Well, why not? This time, we'll be tackling reading CEV files from SEL in Python.&lt;/p&gt;
</summary><content type="html">&lt;img alt="Introducing: pycev!" src="https://raw.githubusercontent.com/engineerjoe440/pycev/main/logo/pycev.png" style="width: 600px;" /&gt;
&lt;p&gt;Wait...&lt;/p&gt;
&lt;p&gt;Another new project?&lt;/p&gt;
&lt;p&gt;Yes. That's right. I'm starting another new project. But hey! There's a lot of framework
that needs to be introduced before I can start doing all the cool high-level stuff that we
all want to see and use. I mean, by now you should understand that I'm all about getting
the framework right. If you're still not sure, go read my rant about getting the framework
right... &lt;a class="reference external" href="https://blog.stanleysolutionsnw.com/write-framework-once.html"&gt;This is my rant on getting framework right.&lt;/a&gt;&lt;/p&gt;
&lt;div class="section" id="goal"&gt;
&lt;h2&gt;Goal:&lt;/h2&gt;
&lt;p&gt;So what's the plan here, anyway?&lt;/p&gt;
&lt;p&gt;Well, this project, &lt;cite&gt;pycev&lt;/cite&gt; (I've almost considered that it should be pronounced &amp;quot;pie-safe&amp;quot;, but
that's not how it looks, so we'll let that stew a while longer) will be a package for reading and
interpreting SEL Compressed EVent records. They're a proprietary (but open) format in which SEL
protective relays collect event information and &amp;quot;compress&amp;quot; it into a format that's easily read
by machines (computers).&lt;/p&gt;
&lt;p&gt;There's already a handful of projects out in the wild for reading COMTRADE records; which, if
you're unfamiliar are &amp;quot;&lt;em&gt;Common Format for Transient Data Exchange&lt;/em&gt;&amp;quot; files, and are supported by
many SEL relays in addition to a much broader number of other vendor devices. Trouble is, not
everyone uses COMTRADE, and comparatively, CEV files are a little simpler, and (in my opinion)
more straight-forward and robust. Perhaps the best Python project for reading COMTRADE files
is &lt;a class="reference external" href="https://github.com/dparrini/python-comtrade"&gt;Python Comtrade&lt;/a&gt;. That project shows great maturity and value. It also sees regular updates
and bugfixes as needed.&lt;/p&gt;
&lt;p&gt;Since it's such a well respected and mature project, I'd like to take it as inspiration for
&lt;cite&gt;pycev&lt;/cite&gt; and use it to help me realize the best API for the package so that the two libraries
could (potentially) be used interchangeably for various projects.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="what-s-first"&gt;
&lt;h2&gt;What's First?&lt;/h2&gt;
&lt;p&gt;Well, I guess starting the package development is first!&lt;/p&gt;
&lt;p&gt;I've already carved out a repository, and I've got something of a skeleton package put together.
I think the first step will be getting enough working that I can upload it to PyPI to reserve
the namespace. Then full development will need to come. There's a good handful of things that
need to be tackled:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Upload Project to PyPI&lt;/li&gt;
&lt;li&gt;Develop Core Functionality and Match API to that of &amp;quot;Python-Comtrade&amp;quot;&lt;/li&gt;
&lt;li&gt;Develop Automated Test Suite with Local Server and Various Existing CEV Files&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So that's the sort of roadmap I see before me. Now, the time-frame is still way up in the air;
so who knows whe this all will &lt;em&gt;actually&lt;/em&gt; happen. But here's hoping!&lt;/p&gt;
&lt;p&gt;If you're interested in checking in on the project, and would like to jump in and contribute,
have a little look at the &lt;a class="reference external" href="https://github.com/engineerjoe440/pycev"&gt;repository&lt;/a&gt;, and feel free to open an &lt;a class="reference external" href="https://github.com/engineerjoe440/pycev/issues"&gt;issue&lt;/a&gt; to start a conversation!&lt;/p&gt;
&lt;/div&gt;
</content><category term="Python"></category><category term="Python"></category><category term="SEL"></category><category term="CEV"></category><category term="Event"></category><category term="Record"></category><category term="Files"></category><category term="Power System"></category><category term="Analysis"></category></entry><entry><title>Sustainability in the News...</title><link href="https://engineerjoe440.github.io/stanley-solutions-blog/sustainability-in-the-news-december-2020.html" rel="alternate"></link><published>2020-12-02T19:45:00-08:00</published><updated>2020-12-02T19:45:00-08:00</updated><author><name>Joe Stanley</name></author><id>tag:engineerjoe440.github.io,2020-12-02:/stanley-solutions-blog/sustainability-in-the-news-december-2020.html</id><summary type="html">&lt;p class="first last"&gt;Recycled concrete and herbicide detecting transistors? Bring on the new sustainability-focused tech!&lt;/p&gt;
</summary><content type="html">&lt;p&gt;I want to get in the habit of writing up some brief articles more regularly to talk about
some of the more interesting articles and news that I've heard recently in the realm of
sustainability. Now, I'll grant, that I typically do my own sort of exploration(s) into
different sustainability projects and research, but I want to keep these articles focused
on what I hear is happening outside of my little pocket on Earth.&lt;/p&gt;
&lt;p&gt;Anyway... Here's what I've heard about new sustainability topics!&lt;/p&gt;
&lt;div class="section" id="recycled-concrete"&gt;
&lt;h2&gt;Recycled Concrete&lt;/h2&gt;
&lt;p&gt;Long has old concrete been a challenge for construction and demolition workers. Long has
the question arisen as: &amp;quot;So, now that we've torn it down; what do we do with it?&amp;quot; Well,
it turns out there might just be a solution! I was introduced to this brief article which
came from a scientific paper describing some research findings. You can look at the
&lt;a class="reference external" href="https://www.sciencedaily.com/releases/2020/11/201130150358.htm"&gt;recycled concrete article&lt;/a&gt; and see for yourself. For me, this is most exciting since it
means that &lt;em&gt;enormous&lt;/em&gt; amounts of waste concrete can be kept out of the landfill! Not to
mention that fewer resources may need to be used to maintain high-wear concrete surfaces
such as sidewalks for longer periods of time.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="transistors-detecting-herbicides"&gt;
&lt;h2&gt;Transistors Detecting Herbicides&lt;/h2&gt;
&lt;p&gt;Okay, now this one is really interesting; not that concrete &lt;em&gt;isn't&lt;/em&gt; interesting, it's just
that this one seems to fit into my area of expertise a little more (you know, electricity).&lt;/p&gt;
&lt;p&gt;This article on &lt;a class="reference external" href="https://www.sciencedaily.com/releases/2020/12/201201124142.htm"&gt;herbicide sensing transistors&lt;/a&gt; describes a scientific article that details
a new technology that's still being researched that would allow specific transistors to be
immersed in water or wastewater to detect certain levels of herbicides. Why is this
important? Well, research is continuing to show that significant levels of herbicides can
be dangerous to marine life including everything from flora to fauna. Both plants and
animals can suffer from high levels of herbicides. With this emerging tech, we could see
improved water and wastewater management such that industrial facilities and municipalities
may be able to monitor their output, and make more informed decisions to adapt their systems.&lt;/p&gt;
&lt;p&gt;Well, that's it for this go-around, but hopefully I can keep talking about some new
and emerging tech!&lt;/p&gt;
&lt;/div&gt;
</content><category term="Sustainability"></category><category term="Concrete"></category><category term="Transistor"></category><category term="Recycle"></category><category term="Herbicide"></category><category term="Sustainability"></category></entry><entry><title>Smart Christmas Trains for a Smart Home?</title><link href="https://engineerjoe440.github.io/stanley-solutions-blog/esp32-controlling-lionel-trains.html" rel="alternate"></link><published>2020-11-22T19:32:00-08:00</published><updated>2020-11-22T19:32:00-08:00</updated><author><name>Joe Stanley</name></author><id>tag:engineerjoe440.github.io,2020-11-22:/stanley-solutions-blog/esp32-controlling-lionel-trains.html</id><summary type="html">&lt;p class="first last"&gt;Finally, with my own home, I think I can return to my goal of having a Lionel train surround my Christmas tree, but perhaps I need to consider how I'm going to automate it...&lt;/p&gt;
</summary><content type="html">&lt;p&gt;For any railfans, a train surrounding a Christmas tree is something of a given. But I recently
came up with a conundrum...&lt;/p&gt;
&lt;p&gt;See, my house is becoming more and more of a &amp;quot;smart home,&amp;quot; and I'd like the Christmas holiday
to be much of the same. Now, that's pretty easy when it comes to the lights. Throw a smart-plug
running &lt;a class="reference external" href="https://tasmota.github.io/docs/"&gt;Tasmota&lt;/a&gt; firmware (a free and open source alternative to the proprietary solutions) at
those lights, and let the magic commence. But for toy trains around the tree? That's a bit of a
different story.&lt;/p&gt;
&lt;div class="section" id="the-problem"&gt;
&lt;h2&gt;The problem:&lt;/h2&gt;
&lt;p&gt;So, why couldn't I just throw another smart plug at my toy trains?&lt;/p&gt;
&lt;p&gt;Well, I guess I &lt;em&gt;could&lt;/em&gt;, but I don't really think that's the greatest idea. Reason being that
turning the trains on and off in a binary fashion (all or nothing) might not be great on them,
and wouldn't be the most pleasant sound either. I guess I could look at some of the solutions
that Lionel markets like their &lt;a class="reference external" href="http://www.lionel.com/brands/legacy/"&gt;Legacy&lt;/a&gt; or TMCC options, but that would mean a lot of new
purchases, research, and maybe some other annoyances that I'm just not too excited to deal with.
So, needless to say, that option's off the list too. Perhaps one of Lionel's new bluetooth
options? I guess, but that's kind of boring, don't you think? And to boot, if I were to follow
that route, I'd certainly need to buy a new locomotive, and I'd likely need to hack the remote.
Another option that I'm just not thrilled about.&lt;/p&gt;
&lt;p&gt;Hmm... well, what's left? My pickyness hasn't left me with many options, but I think there's
still &lt;em&gt;got to be something&lt;/em&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="think-think-think"&gt;
&lt;h2&gt;Think. Think. Think.&lt;/h2&gt;
&lt;p&gt;I spent some time thinking about my alternatives today, and well, let me just walk you through
that.&lt;/p&gt;
&lt;p&gt;I started out thinking about the toy train transformer itself. That's all it really is, a
transformer; well, &lt;em&gt;variac&lt;/em&gt; specifically. A variac is just a variable transformer, essentially
a graphine brush that moves across the windings on the secondary side of a transformer. This
varying motion provides the variable &amp;quot;tap&amp;quot; on the transformer, and allows it to acheive a
voltage that can be varied and controlled to change the speed of the connected trains.&lt;/p&gt;
&lt;p&gt;It's pretty simple really, Lionel and others pioneered this practice for the model and toy scene
nearly a century ago. Trouble is, the transformers (in my case, a Lionel ZW transformer) aren't
exactly built for modification, and like I mentioned earlier, I don't exactly idolize the thought
of tearing apart my toy train controls just to make them &amp;quot;smarter.&amp;quot;&lt;/p&gt;
&lt;img alt="Here's what a variac looks like..." src="https://images-na.ssl-images-amazon.com/images/I/91SL6j6kkNL._AC_SX425_.jpg" style="width: 350px;" /&gt;
&lt;p&gt;I spent some time looking around for a cheap (I'd like to stay under $100 since I need to buy gifts,
too!) variac that is digitally controlled. No dice.&lt;/p&gt;
&lt;p&gt;I guess I could buy a big variac and hook up a motor and...&lt;/p&gt;
&lt;p&gt;No.&lt;/p&gt;
&lt;p&gt;Not gonna fly.&lt;/p&gt;
&lt;p&gt;Hmm... well, what else?&lt;/p&gt;
&lt;p&gt;Another option is a rheostat. For those of us who either forgot or skipped electrical machines in
college; a rheostat is basically a variable resistor. Similar to a variac, rheostats are typically
made from some form of wound wire that has a varying resistance as the user employs a sweeper to
move from one end to the other. That's really the big difference, and the reason it's not just
called a variable resistor, or even a potentiometer. Rheostats are basically &amp;quot;variable resistors
on steroids,&amp;quot; built for high-energy systems.&lt;/p&gt;
&lt;img alt="And this is a rheostat..." src="https://cdn.images.fecom-media.com/A49116.jpg" style="width: 350px;" /&gt;
&lt;p&gt;So... yours truly started poking around online looking (once again) for a cheap electrical
device beefy enough to run toy trains, but not so big that it would break the bank. I bummed around
through Amazon with no luck, but after a quick search on eBay, I found something pretty enticing...&lt;/p&gt;
&lt;p&gt;Guess which toy train company just happened to make rheostats way back in the day?&lt;/p&gt;
&lt;p&gt;That's right! Lionel rheostats!&lt;/p&gt;
&lt;img alt="A Lionel rheostat!" src="https://image.invaluable.com/housePhotos/SeymourAuctions/95/563895/H4246-L72135272.jpg" style="width: 450px;" /&gt;
&lt;/div&gt;
&lt;div class="section" id="a-solution"&gt;
&lt;h2&gt;A solution?&lt;/h2&gt;
&lt;p&gt;So, is that it? Just like that? Problem solved?&lt;/p&gt;
&lt;p&gt;Well, yes; but also, no.&lt;/p&gt;
&lt;p&gt;Lionel rheostats seem to be running about $10 and about as much in shipping on eBay at the time of
writing, so that's really good news. Not to mention the fact that they were built &lt;em&gt;specifically
for toy trains&lt;/em&gt; (score!).&lt;/p&gt;
&lt;p&gt;But what about the fact that it's mechanical, not digital?&lt;/p&gt;
&lt;p&gt;I knew you'd ask that...&lt;/p&gt;
&lt;p&gt;Well, here, the big difference is the form factor. These rheostats are significantly easier to
interface with. Since they're linear, a single piece of all-thread-rod and a little stepper motor
could quite easily do just what I need. I could connect a little stepper motor to an ESP32/ESP8266
and hook that up to a Lionel rheostat via all-thread and a moving nut with a sweeper attached.&lt;/p&gt;
&lt;p&gt;Easy-peasy! Well, sort-of.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="what-s-next"&gt;
&lt;h2&gt;What's next?&lt;/h2&gt;
&lt;p&gt;Well, there's still quite a bit left on this one, and a good chance I won't actually do anything
about it this Christmas. Still, it's an exciting idea, and I'm definitely going to pursue it!&lt;/p&gt;
&lt;p&gt;That's all for now, but stay tuned!&lt;/p&gt;
&lt;p&gt;Who knows, maybe I'll even throw a whistle control on there!!!&lt;/p&gt;
&lt;/div&gt;
</content><category term="ESP32"></category><category term="ESP32"></category><category term="IOT"></category><category term="Smart-Home"></category><category term="Automation"></category><category term="WIFI"></category><category term="Lionel"></category><category term="Vintage"></category><category term="Variac"></category></entry><entry><title>Reading Data with selprotopy</title><link href="https://engineerjoe440.github.io/stanley-solutions-blog/reading-data-with-selprotopy.html" rel="alternate"></link><published>2020-11-22T19:02:00-08:00</published><updated>2020-11-22T19:02:00-08:00</updated><author><name>Joe Stanley</name></author><id>tag:engineerjoe440.github.io,2020-11-22:/stanley-solutions-blog/reading-data-with-selprotopy.html</id><summary type="html">&lt;p class="first last"&gt;Finally reading some data from SEL relays using Python! Now to get the controls working...&lt;/p&gt;
</summary><content type="html">&lt;p&gt;Still deep in the process of getting a fully functional SEL protocol binding suite in Python, but,
hey! At least I can write a little update on what's been going on!&lt;/p&gt;
&lt;p&gt;(if you haven't read my article on what &lt;cite&gt;selprotopy&lt;/cite&gt; is, take a look &lt;a class="reference external" href="https://blog.stanleysolutionsnw.com/sel-protocol-coming-to-python.html"&gt;here&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;In the past month of so, I've been able to really &amp;quot;whack out&amp;quot; some reasonable functionality. In
fact, I've been able to poll an SEL-351 for both digital and analog data. For those of you who
are a little familiar with SEL protocol, that means that I've been able to create a parser for
the relay definition block, and the various fast-meter blocks in addition to the DNA definition.
To boot, I've even tested (albeit breifly) on an SEL-751 and saw pretty promissing results.&lt;/p&gt;
&lt;p&gt;That's all pretty good, but the eventual goal (well, &lt;em&gt;my&lt;/em&gt; eventual goal) is to be able to poll
regularly and send commands/controls as needed. I'd also like to be able to read CEV reports
(more on that in the future) and perhaps the relay's SER (Sequential Event Recorder). So, is any
of the control functionality working yet? Not really...&lt;/p&gt;
&lt;p&gt;I've gotten to the point where the commands &lt;em&gt;should&lt;/em&gt; be configured and sent correctly to the
relay, but no dice.&lt;/p&gt;
&lt;p&gt;Somewhere along the lines, I've clearly &amp;quot;bugged&amp;quot; something up. So now, it's really just a matter
of doing some additional debugging. Hmm... will need to get started on that. Trouble is, I've got
lots of other fun projects to work on too!!!&lt;/p&gt;
&lt;div class="section" id="c-mon-joe-wrap-this-thing-up"&gt;
&lt;h2&gt;C'mon, Joe; wrap this thing up...&lt;/h2&gt;
&lt;p&gt;Okay, so I'm rambling; at this point, I'm pretty excited to say that I've got some polling working
with &lt;cite&gt;selprotopy&lt;/cite&gt;, but there's clearly some more to work on. I'm hoping that I can get commands
working here pretty soon, and then I've got a handful of options as the next step.&lt;/p&gt;
&lt;div class="section" id="i-could"&gt;
&lt;h3&gt;I could:&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;create a system to read the SER&lt;/li&gt;
&lt;li&gt;get the CEV reading figured out&lt;/li&gt;
&lt;li&gt;start testing on a variety of SEL relays (but this would require testing a FOSS project at SEL,
so I'm still not sure about this one)&lt;/li&gt;
&lt;li&gt;get an automated test suite built on my local GitLab instance&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Clearly some more work coming, so stay tuned!&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</content><category term="Python"></category><category term="Protocols"></category><category term="SEL"></category><category term="Python"></category><category term="Communications"></category><category term="Metering"></category></entry><entry><title>Introducing selprotopy</title><link href="https://engineerjoe440.github.io/stanley-solutions-blog/sel-protocol-coming-to-python.html" rel="alternate"></link><published>2020-09-20T11:07:00-07:00</published><updated>2020-09-30T15:45:00-07:00</updated><author><name>Joe Stanley</name></author><id>tag:engineerjoe440.github.io,2020-09-20:/stanley-solutions-blog/sel-protocol-coming-to-python.html</id><summary type="html">&lt;p class="first last"&gt;The SEL Protocol binding suite for Python is finally coming...&lt;/p&gt;
</summary><content type="html">&lt;p&gt;SEL Protocol is finally coming for Python. That's right, you've heard correctly; it's coming.&lt;/p&gt;
&lt;img alt="The new... `selprotopy`!" src="https://raw.githubusercontent.com/engineerjoe440/sel-proto-py/master/logo/selprotopy.png" style="width: 350px;" /&gt;
&lt;p&gt;But, what is SEL Protocol anyway?&lt;/p&gt;
&lt;p&gt;Well, it's a communications protocol, or standard, that was developed by &lt;a class="reference external" href="https://selinc.com/"&gt;SEL&lt;/a&gt; to support
fast data communications between protective electric relays (the devices that monitor the
power grid for faults) and communications processors. It was developed in the early '90s to
help improve communication support of devices to allow users to monitor protective relays
from a distance, and to perform control operations without being present.&lt;/p&gt;
&lt;p&gt;Anyway...&lt;/p&gt;
&lt;p&gt;I've begun writing &lt;a class="reference external" href="https://github.com/engineerjoe440/sel-proto-py"&gt;selprotopy&lt;/a&gt; which will be a protocol driver supporting SEL protocol in
Python. This means that users will be able to integrate solutions with SEL relays using
Python!&lt;/p&gt;
&lt;p&gt;Obviously, there's a lot to come, so this is not much more than an early announcement.
If you're interested in contributing, feel free to drop me a message! I'd love to interact!&lt;/p&gt;
</content><category term="Python"></category><category term="Python"></category><category term="Protocols"></category><category term="SEL"></category></entry><entry><title>Write a Good Framework - ONCE.</title><link href="https://engineerjoe440.github.io/stanley-solutions-blog/write-framework-once.html" rel="alternate"></link><published>2020-09-20T10:26:00-07:00</published><updated>2020-09-20T10:26:00-07:00</updated><author><name>Joe Stanley</name></author><id>tag:engineerjoe440.github.io,2020-09-20:/stanley-solutions-blog/write-framework-once.html</id><summary type="html">&lt;p class="first last"&gt;We all want that next great application; NOW. And we KNOW that we can just hash out this great new thing. But where does that leave us the next time we want to do the same sort of thing?&lt;/p&gt;
</summary><content type="html">&lt;p&gt;C'mon, every developer has had that epiphany moment:&lt;/p&gt;
&lt;blockquote&gt;
&amp;quot;I know, I can just write this thing now, and I'll have exactly what I need, and I'll
never need to touch it again; I'll never need to add more to it, and it will never
change.&amp;quot;&lt;/blockquote&gt;
&lt;p&gt;Yeah. Right.&lt;/p&gt;
&lt;p&gt;We wish it worked that way, but let's be honest. Projects develop, add scope, change, and
sometimes, they morph into something new entirely. Actually, that's often where great code
comes from. The best projects are the butterflies of the development world. They start as
a simple little caterpillar, but at some point along the line, they change into something
far more elegant and beautiful.&lt;/p&gt;
&lt;p&gt;That's why I'm writing this plea to developers out there in the &amp;quot;real world.&amp;quot; We know that
you could just write this little thing, but isn't it nice to get the &lt;em&gt;framework&lt;/em&gt; right the
first time so that when you need to revisit that code, it'll be so much easier. Or, better
yet, isn't it better to prepare the project for the &amp;quot;&lt;em&gt;next guy&lt;/em&gt;&amp;quot; who comes along to make
your framework into something incredible.&lt;/p&gt;
&lt;p&gt;I guess I've devolved into rambling, as usual, but my point is this: when you spend the time
to develop the framework &lt;em&gt;the right way&lt;/em&gt; the first time, you and all of your colleagues will
thank you. It will make things just &lt;strong&gt;that much easier&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;I've had a handful of experiences with this myself. I started on a couple projects at work
where I developed something that I &lt;em&gt;thought&lt;/em&gt; was a great system, and didn't really require
a superior framework. This inevitably saved time in the short-term, but it bit me later.&lt;/p&gt;
&lt;p&gt;As it turned out, I recently realized that I was re-writing the same code over, and over,
and over again every time I had to touch the code. In the end, as it seems, I didn't spend
enough time writing the framework to begin, and that hurt me.&lt;/p&gt;
&lt;div class="section" id="here-s-the-takeaway"&gt;
&lt;h2&gt;Here's the Takeaway:&lt;/h2&gt;
&lt;p&gt;Long story short, we all love just &amp;quot;pulling in&amp;quot; a library that does the &amp;quot;dirty work&amp;quot; for us.
I think it's time that we focus on getting those libraries right from the onset, so we don't
need to keep re-doing our own work, or the work of others.&lt;/p&gt;
&lt;p&gt;What do you think?&lt;/p&gt;
&lt;p&gt;I'd say drop me a note in the comments, but I haven't quite gotten that set up yet. So, for
now, just keep fighting the good fight, and &lt;em&gt;write those libraries!&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
</content><category term="Development"></category><category term="Python"></category><category term="IEC-61131"></category><category term="Development"></category></entry><entry><title>Wildfire Prevention with Sound</title><link href="https://engineerjoe440.github.io/stanley-solutions-blog/detecting-fires-with-sound.html" rel="alternate"></link><published>2020-09-10T20:39:00-07:00</published><updated>2020-09-10T20:39:00-07:00</updated><author><name>Joe Stanley</name></author><id>tag:engineerjoe440.github.io,2020-09-10:/stanley-solutions-blog/detecting-fires-with-sound.html</id><summary type="html">&lt;p class="first last"&gt;&amp;quot;Where there's smoke, there's fire...&amp;quot; Right? What about if sound were a part of it too?&lt;/p&gt;
</summary><content type="html">&lt;p&gt;I'm very pleased to say that I'm helping to support some really exciting research at
the &lt;a class="reference external" href="https://uidaho.edu"&gt;University of Idaho&lt;/a&gt; this year.&lt;/p&gt;
&lt;p&gt;A few years ago, a couple of my classmates worked on
a truly exciting project that utilized some relatively new sensory technology in conjunction
with some wireless network technology (Zigbee radios) to communicate infrasound (below the
audible range for humans) signatures back for scientists to analyze. These signatures will
inform scientists and firefighters, alike, when (and where) a wildfire has started!&lt;/p&gt;
&lt;p&gt;Now, this was all well and good, but the &lt;a class="reference external" href="http://mindworks.shoutwiki.com/wiki/Infrasound_in_wildfire"&gt;project&lt;/a&gt; lost funding. Yep. Just like that.&lt;/p&gt;
&lt;p&gt;That's why I'm so excited to be getting involved. We've already got a team of four fantastic
engineers. A mechanical engineer, two electrical engineers, and a computer scientist. With
luck the group will be able to start some fantastic research that could eventually lead to a
truly exciting product that may help wildland firefighters around the country (and around the
world) find fires &lt;em&gt;faster&lt;/em&gt; and with greater accuracy.&lt;/p&gt;
&lt;p&gt;The group is just getting started, but I'm very excited to see where things go.&lt;/p&gt;
&lt;div class="section" id="the-techy-side"&gt;
&lt;h2&gt;The Techy Side&lt;/h2&gt;
&lt;p&gt;So how is this supposed to work anyway?&lt;/p&gt;
&lt;p&gt;Well, we've all heard stories about how animals can sense an impending natural disaster, and
in fact, that's quite true with wildfire. Most wild game (and many domesticated species too)
have much more astute hearing sense. In fact, they can hear the low-frequency sounds that
we're unable to hear.&lt;/p&gt;
&lt;p&gt;The sensors we're hoping to utilize will allow our digital system to detect the low-frequency
rumble of wild fire, then with digital signal processing, we'll aim to identify audio
signatures unique to wildfire. With this, we'll be able to detect fire!&lt;/p&gt;
&lt;p&gt;Further, the goal will be to create a mesh-network of devices covering the forest floor in
areas such that devices will be able to communicate amongst themselves to precisely locate
the fire, and to report it to the authorities quickly!&lt;/p&gt;
&lt;/div&gt;
</content><category term="capstone"></category><category term="sound"></category><category term="audio"></category><category term="wildfire"></category><category term="protection"></category></entry><entry><title>IEC 61131-3 Syntax Highlighting with highlight.js</title><link href="https://engineerjoe440.github.io/stanley-solutions-blog/iec-61131-syntax-highlighting.html" rel="alternate"></link><published>2020-09-01T23:00:00-07:00</published><updated>2020-09-01T23:38:00-07:00</updated><author><name>Joe Stanley</name></author><id>tag:engineerjoe440.github.io,2020-09-01:/stanley-solutions-blog/iec-61131-syntax-highlighting.html</id><summary type="html">&lt;p class="first last"&gt;Adding context to 61131 code snippets with &lt;cite&gt;highlight.js&lt;/cite&gt;.&lt;/p&gt;
</summary><content type="html">&lt;p&gt;I've been investigating some new resources for high-level documentation, including
automated presentation builders, and along the way, a question arose.&lt;/p&gt;
&lt;p&gt;If I want to demonstrate code examples for IEC 61131-3, is there a way that I can provide
syntax highlighting so that readers will be able to understand the material more clearly?&lt;/p&gt;
&lt;p&gt;So what is syntax highlighting anyway? Well, for code snippets, syntax highlighting uses
various colors and fonts to isolate the unique keywords, operators, and other items that
are standard in that particular programming language. I'll show an example here momentarily.
This is very useful because it allows readers to quickly interpret what the code is
intentionally doing.&lt;/p&gt;
&lt;p&gt;I was fortunate enough that I was able to find a project that was already providing syntax
highlighting for IEC 61131-3 in the &lt;cite&gt;highlight.js&lt;/cite&gt; project framework (though not natively)
and thus, I could leverage existing work! Trouble is, since it's not already a native
&amp;quot;language&amp;quot; it comes with its own set of challenges. The source of this highlighter comes
from the &lt;a class="reference external" href="https://github.com/highlightjs/highlightjs-structured-text"&gt;GitHub highlightjs Project&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;My challenge was identifying an effective way of declaring the language so that I could
use it with &lt;a class="reference external" href="https://github.com/marp-team/marpit"&gt;Marpit&lt;/a&gt; which is part of the Marp project; a system built to convert
markdown files to HTML or PPTX presentations. (Be on the lookout for an upcoming article
on this topic.)&lt;/p&gt;
&lt;div class="section" id="solution"&gt;
&lt;h2&gt;Solution&lt;/h2&gt;
&lt;p&gt;After much trial and tribulation, I finally realized a solution. Since I was using
&lt;cite&gt;highlight.js&lt;/cite&gt; as a required module in the marp framework, I could simply add the language
definition and register it accordingly. Here are the steps I took to modify my installation
to make it work as I wished.&lt;/p&gt;
&lt;ol class="arabic"&gt;
&lt;li&gt;&lt;p class="first"&gt;Locate existing highlight.js installation location by finding dependent module (in my
case marp). Then open directory (since I'm using Windows, I can use
&lt;cite&gt;Explorer &amp;lt;path/to/marp/directory&amp;gt;&lt;/cite&gt;&lt;/p&gt;
&lt;img alt="Identify the install location." src="https://engineerjoe440.github.io/stanley-solutions-blog/images/61131-highlighting/cmd-view.png" /&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Navigate to the directory containing the module of interest, then navigate to the
&lt;cite&gt;node_modules/highlight.js&lt;/cite&gt; folder underneath the desired module. In my case, since
I'm using marp-cli, I navigated to
&lt;cite&gt;node_modules/&amp;#64;marp-team/marp-cli/node_modules/highlight.js/lib&lt;/cite&gt;&lt;/p&gt;
&lt;img alt="Locate the `index.js` file for modification." src="https://engineerjoe440.github.io/stanley-solutions-blog/images/61131-highlighting/explorer-view.png" /&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Open the &lt;cite&gt;index.js&lt;/cite&gt; file in a text editor and add a new line to register the &lt;cite&gt;iecst&lt;/cite&gt;
language.&lt;/p&gt;
&lt;img alt="Registering the new language." src="https://engineerjoe440.github.io/stanley-solutions-blog/images/61131-highlighting/register-language.png" /&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Finally, navigate to the languages folder and add the &lt;cite&gt;iecst.js&lt;/cite&gt; file. Here, for my
application, I had to make some modifications (which I documented fully in an &lt;a class="reference external" href="https://github.com/highlightjs/highlightjs-structured-text/issues/9#issuecomment-685266264"&gt;issue&lt;/a&gt;
and &lt;a class="reference external" href="https://github.com/highlightjs/highlightjs-structured-text/pull/10"&gt;pull request&lt;/a&gt; on the source repository).&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class="section" id="summary"&gt;
&lt;h2&gt;Summary&lt;/h2&gt;
&lt;p&gt;To make this long story longer, I'll be writing more later to document how my Marp
integration comes along. For the meantime, here's the takeaway:&lt;/p&gt;
&lt;p&gt;Syntax highlighting &lt;em&gt;does&lt;/em&gt; exist for IEC 61131-3, and it'll become easier to implement
going forward!&lt;/p&gt;
&lt;p&gt;Oh, and how about what that syntax-highlighted code? What does it look like anyway?&lt;/p&gt;
&lt;p&gt;Have a look for yourself!&lt;/p&gt;
&lt;img alt="An example of (nonsense) syntax-highlighted 61131 code." src="https://engineerjoe440.github.io/stanley-solutions-blog/images/61131-highlighting/61131example.png" /&gt;
&lt;/div&gt;
</content><category term="IEC-61131-3"></category><category term="iec-61131-3"></category><category term="documentation"></category></entry><entry><title>A Picture is Worth a Thousand Words</title><link href="https://engineerjoe440.github.io/stanley-solutions-blog/making-bitmap-images-from-bytes.html" rel="alternate"></link><published>2020-08-21T08:49:00-07:00</published><updated>2020-09-01T11:42:00-07:00</updated><author><name>Joe Stanley</name></author><id>tag:engineerjoe440.github.io,2020-08-21:/stanley-solutions-blog/making-bitmap-images-from-bytes.html</id><summary type="html">&lt;p class="first last"&gt;Making images and plotting might just be possible in real-time-controllers.&lt;/p&gt;
</summary><content type="html">&lt;p&gt;I was introduced to a very nice gentleman about a year ago who was demonstrating some
logic that created a .PNG file to demonstrate fault currents easily, and could be
attached in-line as part of an email body. What was so interesting to me is that this
all part of some logic that originated on an &lt;a class="reference external" href="https://selinc.com/products/3530/"&gt;SEL RTAC&lt;/a&gt; using some of the functionality
in one of the many IEC 61131-3 libraries that are maintained by myself and the other
developers in the Automation Controllers Group.&lt;/p&gt;
&lt;p&gt;Now, the trouble with what this gentleman shared with me, is the reliance on an external
server to process the .CEV and &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Comtrade#:~:text=COMTRADE%20(Common%20format%20for%20Transient,to%20transient%20power%20system%20disturbances."&gt;COMTRADE&lt;/a&gt; files generated by monitored protective relays.
That was all well and good, but I still wasn't quite satisfied since there was a certain
amount of reliance on some other device. I wanted something better.&lt;/p&gt;
&lt;p&gt;I suppose at this point, I should take a step back. For those who don't eat, sleep, and
breath power systems engineering and electrical power system protection, an &amp;quot;event record&amp;quot;
is something of a novel idea. So what the h-e-double-hockey-sticks is an &amp;quot;event record?&amp;quot;&lt;/p&gt;
&lt;p&gt;I'm glad you've asked.&lt;/p&gt;
&lt;p&gt;Well, a fault on a power system (like when you run into a power pole and it knocks down
one of the wires - those are bad days) causes all sorts of &amp;quot;bad behavior&amp;quot; on the electrical
system, and that bad behavior can be monitored and measured. It's what we use in the
traditional sense to detect faults in the first place and make a decision to open an
electrical breaker to shut off the power. Remember when you plugged in too many Christmas
lights and the breaker popped? It's the same idea, just at a much higher degree of accuracy.&lt;/p&gt;
&lt;p&gt;So &amp;quot;events&amp;quot; have certain behavior, and engineers are often interested in characterizing
that behavior so that they can better understand not only what happened, but how it could
be prevented going forward. Back when Dr. Ed Schweitzer first invented the SEL-21 protective
relay (a conversation for another day), he added a very nifty little feature called &amp;quot;event
recording.&amp;quot; It added the ability to record information about the event when it occurred
so that someone could go back and analyze it at a later time. These event records contain
a lot of information, and they require special software to open them, to interpret them,
etcetera. Here's an example of what an event record might look like. This was taken from
a technical paper written titled &amp;quot;Numerical model framework of power quality events&amp;quot; by
Rodney Tan and Vigna Ramachandaramurthy; the full paper's linked below, so take a look if
you're so inclined!&lt;/p&gt;
&lt;img alt="An example power system fault &amp;quot;Event Record&amp;quot;." src="https://engineerjoe440.github.io/stanley-solutions-blog/images/power-system-fault.png" /&gt;
&lt;p&gt;&lt;a class="reference external" href="https://www.researchgate.net/publication/290451701_Numerical_model_framework_of_power_quality_events"&gt;Tan, Rodney &amp;amp; Ramachandaramurthy, Vigna K.. (2010). Numerical model framework of power
quality events. 43. 30-47.&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Soooo, the idea that this gentleman and his team had crafted was to extract the
most interesting portion of the information and plug that into an image that could be made
part of an email. This way, a technician could easily look at the image and quickly make
decisions without having to load the full event record on a computer. This full analysis
could still be done later, but having the image available in the email might give an
engineer the ability to make quick decisions to help restore power to homes and families
more quickly!&lt;/p&gt;
&lt;p&gt;I've recently completed some research where I've been able to effectively create a simple
RGB image in the Bitmap format (.BMP file) so that it can be used and interpreted by most
any computer available today. And should certainly allow for direct inclusion in emails.&lt;/p&gt;
&lt;p&gt;Ultimately, this means that there's a good chance that technicians could effectively see
the report of an event without any advanced software, simply by opening their email client
on their smart phone. Talk about convenience. I've been doing some development and testing
and I found great value in this article from technical-recipes.com:&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://www.technical-recipes.com/2011/creating-bitmap-files-from-raw-pixel-data-in-c/"&gt;https://www.technical-recipes.com/2011/creating-bitmap-files-from-raw-pixel-data-in-c/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I hope that I'll be sharing more as I fully flesh out some design where I can effectively
create plots in a byte-array that can be stored as an image.&lt;/p&gt;
</content><category term="IEC-61131-3"></category><category term="iec61131-3"></category><category term="automation"></category></entry><entry><title>We're going live.</title><link href="https://engineerjoe440.github.io/stanley-solutions-blog/we're-going-live.html" rel="alternate"></link><published>2020-08-21T08:35:00-07:00</published><updated>2020-08-21T08:35:00-07:00</updated><author><name>Joe Stanley</name></author><id>tag:engineerjoe440.github.io,2020-08-21:/stanley-solutions-blog/we're-going-live.html</id><summary type="html">&lt;p class="first last"&gt;Let the automation begin... Just stand back.&lt;/p&gt;
</summary><content type="html">&lt;p&gt;I'm imagining the sound of an old-school electric motor grinding its way up to nominal
speed. Can you hear it? That low groan trying ever-so-hard to come up to a comfortable
range.&lt;/p&gt;
&lt;p&gt;I suppose I should step back and introduce myself. I'm Joe Stanley, at the time of writing,
I'm twenty-three years old, and a graduate of the University of Idaho with both a Bachelors
and Masters in Electrical Engineering. I work with Schweitzer Engineering Laboratories (SEL)
in Pullman, Washington. I spend far too much time trying to automate things that would have
been faster to do by hand; but I guess that's engineering. I'm an avid Pythonista, and I'm
always trying to &amp;quot;convert&amp;quot; others into the language. I also spend a great deal of time
developing and maintaining IEC 61131-3 libraries for SEL.&lt;/p&gt;
&lt;p&gt;I have far too many ideas and thoughts, so I think it's time to start sharing them. If it's
somewhere on the scale between sustainability and automation, I'm probably interested in it.&lt;/p&gt;
&lt;p&gt;My hope is that I might start sharing thoughts, ideas, projects, and guides here on this
blog. Now, I'm sure you can hear that motor grinding up to speed!&lt;/p&gt;
</content><category term="automation"></category><category term="automation"></category><category term="python"></category><category term="iec61131-3"></category></entry></feed>