<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Stanley Solutions Blog</title><link href="https://engineerjoe440.github.io/stanley-solutions-blog/" rel="alternate"></link><link href="https://engineerjoe440.github.io/stanley-solutions-blog/feeds/all.atom.xml" rel="self"></link><id>https://engineerjoe440.github.io/stanley-solutions-blog/</id><updated>2021-10-16T12:03:00-07:00</updated><subtitle>Engineering and creativity - all under one hat.</subtitle><entry><title>DJ Joe Playlister</title><link href="https://engineerjoe440.github.io/stanley-solutions-blog/dj-joe-playlister.html" rel="alternate"></link><published>2021-10-16T12:03:00-07:00</published><updated>2021-10-16T12:03:00-07:00</updated><author><name>Joe Stanley</name></author><id>tag:engineerjoe440.github.io,2021-10-16:/stanley-solutions-blog/dj-joe-playlister.html</id><summary type="html">&lt;p&gt;I've been going a bit crazy with the web-app craze lately. Let me show you what I've been up to...&lt;/p&gt;</summary><content type="html">&lt;p&gt;I've been working up a fever on web-apps recently. Ones that I'm developing, ones that I'm deploying, and ones that
I'm reviewing. That goes for both work and home. Gosh... I think I need a vacation. Maybe next lifetime.&lt;/p&gt;
&lt;p&gt;Recently, at home, my focus has been on several "DJ Joe Services," things that I can utilize for my mobile DJ work and
that will help me make those processes easier. Remember, I'm lazy! I want to find the easiest way to do things. Right
now, I've got two apps deployed, and I'll be working on a third here pretty soon.&lt;/p&gt;
&lt;p&gt;The first app was an availability calendar. I'll have to write about it soon, since it was a fun project tying APIs,
Python, and React.js all into one solution. However, this is about my second app. What I call a "playlister," i.e.,
something that can slurp the playlist information out of another file/service/etc., and provide it in a more consumable
manner. Right now, it's focus is on Spotify and Apple-Music, since those are the two prominent sources that are
consistent enough for me to work with.&lt;/p&gt;
&lt;p&gt;&lt;img src="https://engineerjoe440.github.io/stanley-solutions-blog/images/Screenshot_20211016_120952.png" style="width: fit-content; position: fixed; left: 0px;" alt="DJ Joe Playlister"&gt;&lt;/p&gt;
&lt;h3&gt;Inspiration&lt;/h3&gt;
&lt;p&gt;As a mobile DJ, I often am provided "playlists" in various forms: Word documents, text
files, quickly-scribbled hand-written notes, Spotify playlists, and Apple Music playlists.&lt;/p&gt;
&lt;p&gt;It quickly became apparent for me, that I spent &lt;em&gt;way&lt;/em&gt; more time working through these
Spotify playlists and Apple Music playlists to get them into a form that was actually
helpful for me. In most cases, I could not simply copy/paste the Spotify list(s) out so
that I could search for the songs of interest in my own library and then determine whether
I'd need to aqcuire additional music. Thus... I came to the conclusion, I'd want a little
assistance from my computer.&lt;/p&gt;
&lt;h3&gt;Stages of Development&lt;/h3&gt;
&lt;p&gt;I originally started with a simple Tkinter-app that used the &lt;a href="https://spotipy.readthedocs.io/en/latest/"&gt;&lt;code&gt;spotipy&lt;/code&gt;&lt;/a&gt;
package to pull playlist information into a simple plain-text file. It was helpful, but
ended up incurring a few additional challenges of its own. The largest of which being the
fact I had to securly pass the API secrets around with the script itself. This became a
real burden, so I decided to enhance the system into a full-service mini web-app that
could be utilized for exactly this purpose. The web-app could run persistently on a server
that could hang on to those secrets and allow me to access the tool from anywhere.&lt;/p&gt;
&lt;p&gt;Thus, the &lt;code&gt;djjoeplaylister&lt;/code&gt; was born.&lt;/p&gt;
&lt;h3&gt;Technical Details&lt;/h3&gt;
&lt;p&gt;This app is built on the shoulders of giants, so let me give credit to those where it's due!&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Technology Specs&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Language: Python 3&lt;/li&gt;
&lt;li&gt;Web Framework: &lt;a href="https://fastapi.tiangolo.com/"&gt;FastAPI&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Web Listener/ASGI Server: &lt;a href="https://uvicorn.org/"&gt;Uvicorn&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Reverse Proxy: &lt;a href="https://nginx.com/"&gt;Nginx&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Hosting Provider: &lt;a href="https://linode.com/"&gt;Linode virtual hosting&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Operating System: Ubuntu server&lt;/li&gt;
&lt;li&gt;App Deployment Enviromnent: Dockerized Container&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Python Packages Leveraged&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Spotify Client: &lt;a href="https://spotipy.readthedocs.io/en/latest/"&gt;&lt;code&gt;spotipy&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Apple Music Client: &lt;a href="https://docs.python-requests.org/en/latest/"&gt;&lt;code&gt;requests&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;HTML Table Generation: &lt;a href="https://pandas.pydata.org/"&gt;&lt;code&gt;pandas&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Additionally, I'd like to provide a special thanks and shout-out to this gist that
helped me get up and running with consuming the Apple Music playlist without dealing
with Apple's crummy developer program ($99 dolars a year, just to access an API? No
thank you!)
&lt;a href="https://gist.github.com/aleclol/ef9e87d0964f00975f82d5373a814447"&gt;https://gist.github.com/aleclol/ef9e87d0964f00975f82d5373a814447&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;That's it! My little DJ Playlister! Want to go see it? &lt;a href="https://playlists.djjoeidaho.com/"&gt;Go Check it Out!&lt;/a&gt; It's not
anything too terribly special, and it's got plenty of room to grow, but it's a helpful little tool, and I think it
showcases the utility of the Python programming language.&lt;/p&gt;
&lt;h5&gt;I mean... just think about it.&lt;/h5&gt;
&lt;p&gt;I started with a simple little Tkinter script for which I had to lug secrets around all the time, and it was great! But
it had some significant shortcomings. Python to the rescue though, a little refactoring, and throw in some HTML, CSS,
and some more packages and I've got a full web-application. Still full Python, and it's fully-deployed! You can't do that
with a lot of other tools. Imagine if I had started with some Excel macro, or some bash script. It would've been very
difficult to scale those apps out to something that's actually useful in the context that I need.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;Not with Python!&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Preaching session over. Chat again soon, goodbye!&lt;/p&gt;</content><category term="Python"></category><category term="Spotify"></category><category term="Apple-Music"></category><category term="Python"></category><category term="Web-Apps"></category><category term="DJ"></category><category term="Docker"></category></entry><entry><title>Why do I Self-Host?</title><link href="https://engineerjoe440.github.io/stanley-solutions-blog/why-do-i-selfhost.html" rel="alternate"></link><published>2021-09-28T21:53:00-07:00</published><updated>2021-09-28T21:53:00-07:00</updated><author><name>Joe Stanley</name></author><id>tag:engineerjoe440.github.io,2021-09-28:/stanley-solutions-blog/why-do-i-selfhost.html</id><summary type="html">&lt;p&gt;I was recently asked "why do you run your own servers, when there's perfectly good, cheap, cloud providers?" Well... Here's why!&lt;/p&gt;</summary><content type="html">&lt;p&gt;I was recently having a conversation with a few techie friends about the ridiculous and nerdy things that I'm doing at home. And, yes,
I realize I'm very nerdy. If that isn't clear already, go read some of my other articles.&lt;/p&gt;
&lt;p&gt;One of my friends was curious why, exactly, I've decided to self-host so many of my services when I could easily lob those things up on
some cloud-service like &lt;a href="https://www.linode.com/unplugged"&gt;Linode&lt;/a&gt;. It's a fair question! To my friend's point, those services are fast,
easy, and require very little maintenance (comparatively, of course). To be clear, I mean that these services manage much of the storage,
hardware constraints, and networking limitations that I'm working through regularly. There's still the regular work of updating operating
systems that needs to be managed whether the server is running locally or in the cloud.&lt;/p&gt;
&lt;p&gt;I won't discredit these features! They're quite attractive, but there's still reason for me to keep my servers plugged in.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Let me explain...&lt;/em&gt;&lt;/p&gt;
&lt;h3&gt;Reduce, Reuse, Recycle&lt;/h3&gt;
&lt;p&gt;This point is perhaps the most important to me. I believe I've mentioned before that a lot... Let me emphasize that point...&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;A LOT&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;of the hardware I'm using is old. Many of the computers are what could be considered "ancient" desktop towers. They're old computers doing
modern things. In fact, at this point I think I have more 32-bit computers than I do 64-bit ones. Before you ask, yes, it's a bit painful;
but it's worthwhile. I mean, just think about it... I'm currently running seven computers that other people were ready to just throw in
the trash. That's 7 computers that didn't need to be recycled, 7 computers whose lifetime just got extended courtesy of yours truly.&lt;/p&gt;
&lt;p&gt;Admittedly, they're power-hungry, and they're not as powerful as more modern equivalents, but they're doing great things for me, and that's
something that they wouldn't be able to do otherwise. Others would more than likely just chuck them, and I think it's far more valuable to
milk those old machines for everything I can. Perhaps it's just the naive part of my personality, but I'd like to think that these little
choices have an impact in some small way.&lt;/p&gt;
&lt;h3&gt;My Disks, My Data&lt;/h3&gt;
&lt;p&gt;As just about any self-hosting fiend would likely tell you: "my data lives on &lt;em&gt;my&lt;/em&gt; disks". Point being, since I own the disks, I'm the
proprietor of the data, too! That means I don't ever have to concern myself with whether or not I can revoke control over the data. Now,
I'll grant, this certainly makes me sound a bit more like a conspiracy theorist or an "old codger". I guess I don't have any rebuttal
against that. I'll just have to take it.&lt;/p&gt;
&lt;h4&gt;Data that's Important to Me, For My Eyes Only&lt;/h4&gt;
&lt;p&gt;To tack on to the previous point, since I own the data, I can use what I consider "private" or "privileged" data on my servers. Why?
Because I own them! I can &lt;em&gt;see&lt;/em&gt; where the disks that store the data reside. Now, I know this may not seem like the greatest argument, but
when it comes to the argument of security and sensitivity, isn't it really all about perception and comfort anyway?&lt;/p&gt;
&lt;p&gt;To put it another way, why do millions of homeowners install a home-security system? Is it because they think that the system will
immediately stop thieves in the act? Wouldn't better deadbolts and barred windows provide the same level of protection? Perhaps,
but then, maybe not. I'd expect that in more cases than not, homeowners want a balance. They want features, and they want function.
They want to &lt;em&gt;feel&lt;/em&gt; secure, and they want to enjoy their home without barred windows and dozens of deadbolts.&lt;/p&gt;
&lt;p&gt;That's why having my "private" data on my local servers is important to me. I've been graciously granted numerous data-set samples to
test some of my other Python projects against, but that data is important to the people who gave it to me. It's the sort of data that I'm
honored to have been granted access to, and I don't really think it's appropriate to share with the rest of the world. So, I host it on
servers that live in my basement. Somewhere that lives behind &lt;em&gt;my&lt;/em&gt; firewalls.&lt;/p&gt;
&lt;p&gt;I don't think that my solution is right for everyone, and I don't think it's the "be-all-end-all" solution that I wish it was, but it
works for me, and makes me happy! After all, if it helps me sleep well at night, isn't that worth something?&lt;/p&gt;
&lt;h3&gt;Diversified Service Structure&lt;/h3&gt;
&lt;p&gt;You've heard of diversified investments, haven't you?&lt;/p&gt;
&lt;p&gt;Well, that's kinda what I'm doing with my diversified infrastructure. You see, I'm not &lt;em&gt;only&lt;/em&gt; self-hosting. &lt;gasp!&gt; I'm also using cloud
services (namely Linode - thanks, Linode Team!) to help me with some services, and I'm planning to spin up some others in the (relatively)
near future. Sometimes speed is important, sometimes it's not. When speed &lt;em&gt;is&lt;/em&gt; a concern, I try to host on Linode, since they're so
&lt;strong&gt;SUPER-FAST&lt;/strong&gt; and available, it makes sense for me. But in other cases, it doesn't make sense.&lt;/p&gt;
&lt;p&gt;That's all part of the whole "multi-cloud" paradigm anyway, though. Different providers for different applications, diversified to be more
robust. In fact, I &lt;em&gt;do&lt;/em&gt; use Linode for some off-site backups. I'm still working out my backup strategy. It's not the greatest, at the
moment, but it's coming along, and some of that is thanks to Linode's services, and the peace-of-mind they offer. Mind you, the data I'm
backing up to Linode still goes through secure tunnels, and it's not the "private" data that I was mentioning earlier.&lt;/p&gt;
&lt;h3&gt;Hands-On Learning Opportunities&lt;/h3&gt;
&lt;p&gt;My last point for keeping these machines kicking around in my closets, basement, and elsewhere is because they all offer me some great
opportunities to learn! After all, if I'm going to keep these things up and running, I've got to constantly be improving, adding, reworking
and modifying to (stealing a bit from my 4-H background here) make the best better. Having these servers in my house affords me the ability
to simply plug in a USB stick, or connect a monitor if I blow up SSH so badly I can't reconnect. It means that when I botch the install, I
just start over, and when I need to copy the whole darn disk, I just pull it out and stick it in my external hard-drive bay.&lt;/p&gt;
&lt;p&gt;Believe me, I've learned a lot in the past year playing with these things and keeping them up. And there's still a lot more I want to learn.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;So that's my story, and I'm sticking to it.&lt;/p&gt;
&lt;p&gt;Like I mentioned earlier, I wouldn't recommend this to everyone; it's a solution that fits my needs, but that may be different than what
others are interested in. Still, I'm proud of the fact that I'm running so much out of my own home, and I'm excited to keep growing with
these old computers. I'm happy that I'm able to reuse machines that would otherwise litter some landfill, and keep things running for
myself and some of the university students that I support.&lt;/p&gt;</content><category term="DevOps"></category><category term="Self Hosting"></category><category term="Servers"></category><category term="Computing"></category><category term="Hosting"></category><category term="Web"></category><category term="Services"></category></entry><entry><title>Just Some Thoghts on a Song</title><link href="https://engineerjoe440.github.io/stanley-solutions-blog/just-some-thoghts-on-a-song.html" rel="alternate"></link><published>2021-09-23T13:58:00-07:00</published><updated>2021-09-23T13:58:00-07:00</updated><author><name>Joe Stanley</name></author><id>tag:engineerjoe440.github.io,2021-09-23:/stanley-solutions-blog/just-some-thoghts-on-a-song.html</id><summary type="html">&lt;p&gt;Some songs have a hidden meaning, and one song that I really enjoy has something hidden so deeply, I just love it!&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;img src="https://images.genius.com/526afafd58e01d4b67deca68f8840a80.1000x1000x1.jpg"
    width="300" alt="LANCO" align="right"&gt;&lt;/p&gt;
&lt;p&gt;I'm a fan of many music genres, but I most certainly grew up on country. I mean... Have you met me? I wear a cowboy hat,
for pete-sake! I really lots of music, but I'll always have a soft spot for a good country love song.&lt;/p&gt;
&lt;p&gt;This definitely diverges from the other content that I often write about, but I think it's relevant. You see, one of the
modern country groups who I really enjoy is &lt;a href="https://www.lancomusic.com/"&gt;"LANCO"&lt;/a&gt;; they're more on the soulful side of
country, and their bluesy style is one that I really enjoy. Specifically, I wanted to write about one of their songs
called "Born to Love You", it's a great love song, and I want to highlight one specific piece...&lt;/p&gt;
&lt;p&gt;In the second stanza, they sing of:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Born again in a church where the steeple's white
Preacher preach Book of John and my momma cried
Meanin' of life was in verse 2
Didn't make sense 'til I found you&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;At least... According to Google...&lt;/p&gt;
&lt;p&gt;Notice that in the third line of that stanza, the words "in verse 2" are separated. But if you listen to the song, I think
that they're &lt;em&gt;not&lt;/em&gt; actually separate, at all! Instead, I think the line is a little closer to "inverse-two".&lt;/p&gt;
&lt;p&gt;So what the H-E-double-hockey-sticks is an "inverse-two" and why is it in a love song?&lt;/p&gt;
&lt;p&gt;Remember back in high-school math class, how we learned about number's inverses? An &lt;em&gt;inverse&lt;/em&gt; of a number is 1-over-that
number. In other words, a number's inverse is its fraction if you simply placed it as the denominator with 1 as the
numerator. To give a more concrete example, inverse-three is: &lt;span class="math"&gt;\(\frac{1}{3}\)&lt;/span&gt;. Likewise, inverse-two is &lt;span class="math"&gt;\(\frac{1}{2}\)&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;That's right, inverse-two is "one-half"... Read that stanza again.&lt;/p&gt;
&lt;p&gt;Suddenly, it's a little more touching, isn't it? Now whether that's truly LANCO's intention, or not, I think it adds a
whole new meaning and level of sincerity to that song. &lt;a href="https://www.youtube.com/watch?v=gjkn7orWpeA"&gt;&lt;strong&gt;Go have a listen for yourself!&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
&lt;script type="text/javascript"&gt;if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) {
    var align = "center",
        indent = "0em",
        linebreak = "false";

    if (false) {
        align = (screen.width &lt; 768) ? "left" : align;
        indent = (screen.width &lt; 768) ? "0em" : indent;
        linebreak = (screen.width &lt; 768) ? 'true' : linebreak;
    }

    var mathjaxscript = document.createElement('script');
    mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#';
    mathjaxscript.type = 'text/javascript';
    mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.3/latest.js?config=TeX-AMS-MML_HTMLorMML';

    var configscript = document.createElement('script');
    configscript.type = 'text/x-mathjax-config';
    configscript[(window.opera ? "innerHTML" : "text")] =
        "MathJax.Hub.Config({" +
        "    config: ['MMLorHTML.js']," +
        "    TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'none' } }," +
        "    jax: ['input/TeX','input/MathML','output/HTML-CSS']," +
        "    extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js']," +
        "    displayAlign: '"+ align +"'," +
        "    displayIndent: '"+ indent +"'," +
        "    showMathMenu: true," +
        "    messageStyle: 'normal'," +
        "    tex2jax: { " +
        "        inlineMath: [ ['\\\\(','\\\\)'] ], " +
        "        displayMath: [ ['$$','$$'] ]," +
        "        processEscapes: true," +
        "        preview: 'TeX'," +
        "    }, " +
        "    'HTML-CSS': { " +
        "        availableFonts: ['STIX', 'TeX']," +
        "        preferredFont: 'STIX'," +
        "        styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} }," +
        "        linebreaks: { automatic: "+ linebreak +", width: '90% container' }," +
        "    }, " +
        "}); " +
        "if ('default' !== 'default') {" +
            "MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
            "MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
        "}";

    (document.body || document.getElementsByTagName('head')[0]).appendChild(configscript);
    (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript);
}
&lt;/script&gt;</content><category term="Music"></category><category term="Music"></category><category term="Songs"></category><category term="Audio"></category></entry><entry><title>A Better Way to Integrate with VoiceMeeter?</title><link href="https://engineerjoe440.github.io/stanley-solutions-blog/a-better-way-to-integrate-with-voicemeeter.html" rel="alternate"></link><published>2021-09-12T17:07:00-07:00</published><updated>2021-09-15T17:38:00-07:00</updated><author><name>Joe Stanley</name></author><id>tag:engineerjoe440.github.io,2021-09-12:/stanley-solutions-blog/a-better-way-to-integrate-with-voicemeeter.html</id><summary type="html">&lt;p&gt;Wait... What? There's an API for VoiceMeeter? And there's already a Python API for it? Sign me up!&lt;/p&gt;</summary><content type="html">&lt;p&gt;So, I finally sucked it up and bought an Intel NUC to run as my own mini audio-server. For what purpose,
you ask? Well, so that I can have an "always on" &lt;a href="https://vb-audio.com/Voicemeeter/vban.htm"&gt;VBAN&lt;/a&gt; server
where I can route audio through-out my house. From my desktop, my laptop, my mixer, my stereo.... All
over!&lt;/p&gt;
&lt;p&gt;Now, I did run into a little trouble in the process. My little NUC is mounted nicely out of the way at my
desk in my study. It looks great, and runs great... buuuuut... There's one little problem.&lt;/p&gt;
&lt;p&gt;When I connect or disconnect over a Remote Desktop (RDP) connection it gets, shall we say, a little mixed
up. In fact, the VoiceMeeter audio engine falls all over itself and gets tangled up. Now, to get around
this problem, I can restart the audio engine, or the software itself. So I started looking into how to
automate the kick-in-the-pants the software needed. Mind you, I'd done this before by using Python to find
the process ID that VoiceMeeter was associated with, and kill it, restarting a moment later. But that's
boring and slow. So I did some Googling...&lt;/p&gt;
&lt;p&gt;Turns out, VoiceMeeter has an &lt;a href="https://forum.vb-audio.com/viewtopic.php?f=8&amp;amp;t=346"&gt;API&lt;/a&gt;! FANTASTIC!&lt;/p&gt;
&lt;p&gt;Now, I realize that that's a C-API, and I'd much rather do my programming in Python. I don't really want
to fuss with installing GCC on my little NUC. SO... I started investigating how to wrap the C-API with
Python. It's something I'd never done before, but I figured it must be possible! Once more, I turned to
the internet wizards, and found a very &lt;a href="https://stackoverflow.com/a/252473/10406011"&gt;nice little article on StackOverflow&lt;/a&gt;
on how to wrap a C-level DLL with Python.&lt;/p&gt;
&lt;p&gt;I used that article and proved to myself that, YES, I can write Python code to hit the DLL. But, it
occurred to me, that maybe somebody else had already done that work.&lt;/p&gt;
&lt;p&gt;Back to Google...&lt;/p&gt;
&lt;p&gt;EUREKA! Turns out that someone (&lt;a href="https://github.com/chvolkmann"&gt;Christian Volkmann&lt;/a&gt;, to be specific) had
already written a full API against the DLL. It's all in Python, and it's glorious! Here...
&lt;a href="https://github.com/chvolkmann/voicemeeter-remote-python"&gt;Go take a look!&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;So all that left for me was whacking out a little script to run in the background, monitor for new RDP
connections, and restart the audio engine when the connection state changed. Here's what that looked
like:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# vmeetermanager - an automated tool to keep VoiceMeeter running correctly.&lt;/span&gt;
&lt;span class="c1"&gt;# (c) 2021 - Stanley Solutions | Joe Stanley&lt;/span&gt;

&lt;span class="c1"&gt;# Imports&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;voicemeeter&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;subprocess&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;time&lt;/span&gt;


&lt;span class="c1"&gt;# Define function to determine rdp connection&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;is_rdp_connected&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;args&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;netstat&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;-n&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;|&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;find&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;quot;:3389 &amp;quot;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="n"&gt;resp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;subprocess&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39; &amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;shell&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;capture_output&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;ESTABLISHED&amp;quot;&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;resp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stdout&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;decode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;utf-8&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;True&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;False&lt;/span&gt; &lt;span class="c1"&gt;# Default&lt;/span&gt;


&lt;span class="c1"&gt;# Main Body&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vm"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;__main__&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;last_state&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;False&lt;/span&gt;
    &lt;span class="c1"&gt;# Establish VoiceMeeter Connection&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;voicemeeter&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;remote&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;banana&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;vmr&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="c1"&gt;# Run Loop&lt;/span&gt;
                &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                    &lt;span class="c1"&gt;# Determine Connection State&lt;/span&gt;
                    &lt;span class="n"&gt;connected&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;is_rdp_connected&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
                    &lt;span class="n"&gt;changed_state&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;connected&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="n"&gt;last_state&lt;/span&gt;
                    &lt;span class="n"&gt;last_state&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;connected&lt;/span&gt;
                    &lt;span class="c1"&gt;# If the state has changed, restart audio engine&lt;/span&gt;
                    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;changed_state&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                        &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;RDP Connection State Changed to: CONNECTED=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;connected&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                        &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;0.25&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                        &lt;span class="n"&gt;vmr&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;restart&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
                    &lt;span class="c1"&gt;# Don&amp;#39;t overburden the systems&lt;/span&gt;
                    &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="ne"&gt;Exception&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;VoiceMeeter Hasn&amp;#39;t Started Yet...&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;What Else Will Come?&lt;/h3&gt;
&lt;p&gt;Goodness, there's so many other things that I can do with this now. Imagine having a full web-based front
end that I could use to control it! That would be pretty awesome, wouldn't it? I'll really have to do
some more exploring with this!&lt;/p&gt;</content><category term="Python"></category><category term="Audio"></category><category term="Voicemeeter"></category><category term="Api"></category><category term="Sdk"></category><category term="Mixer"></category><category term="Python"></category></entry><entry><title>Tech Podcasts Galore!</title><link href="https://engineerjoe440.github.io/stanley-solutions-blog/tech-podcasts-galore.html" rel="alternate"></link><published>2021-09-12T15:34:00-07:00</published><updated>2021-09-12T15:34:00-07:00</updated><author><name>Joe Stanley</name></author><id>tag:engineerjoe440.github.io,2021-09-12:/stanley-solutions-blog/tech-podcasts-galore.html</id><summary type="html">&lt;p&gt;Everyone's got their new favorite podcast these days. So here, let me list all of my favorites!&lt;/p&gt;</summary><content type="html">&lt;p&gt;I've been asked a lot lately what tech podcasts I listen to, so I thought I'd briefly summarize them all
right here!&lt;/p&gt;
&lt;p&gt;Where should I even begin, though? Perhaps I'll start with the security side of computers...&lt;/p&gt;
&lt;h4&gt;&lt;em&gt;"Darknet Diaries"&lt;/em&gt;&lt;/h4&gt;
&lt;p&gt;&lt;img src="https://upload.wikimedia.org/wikipedia/en/6/6a/Darknet_Diaries_podcast_artwork.jpg"
    width="150" alt="Darknet Diaries" align="right"&gt;&lt;/p&gt;
&lt;p&gt;One of my favorites was recommended to me by a colleague. &lt;a href="https://darknetdiaries.com/"&gt;&lt;em&gt;Darknet Diaries&lt;/em&gt;&lt;/a&gt;
is an excellent podcast covering everything in the darker side of the internet. No, don't worry... You
don't need to download a TOR browser to listen. This podcast covers everything from hackers to penetration
testers; everything in the cybersecurity space.&lt;/p&gt;
&lt;p&gt;Jack Rhysider, the host of &lt;em&gt;Darknet Diaries&lt;/em&gt; covers a wide variety of stories in the tech and security
world, and yet, somehow he manages to make each story captivating for all audiences. I really do mean &lt;strong&gt;all&lt;/strong&gt;
audiences, too. I've even had my mother and other non-techy folks listen to episodes and find some value.&lt;/p&gt;
&lt;h4&gt;&lt;em&gt;"Security Now"&lt;/em&gt;&lt;/h4&gt;
&lt;p&gt;For those interested in the deep-tech-intricacies of cybersecurity, Steve Gibson and
&lt;a href="https://twit.tv/shows/security-now"&gt;&lt;em&gt;Security Now&lt;/em&gt;&lt;/a&gt; digs deep into the meat-and-potatoes; or should I say,
they bytes-and-bits of the stuff. Covering everything from &lt;em&gt;Boot-Hole&lt;/em&gt; and &lt;em&gt;Print-Nightmare&lt;/em&gt; to the latest
in &lt;a href="https://www.wireguard.com/"&gt;Wireguard&lt;/a&gt; and new security practices for IoT devices. &lt;em&gt;Security Now&lt;/em&gt; is a
great podcast for the tech-minded and security-interested.&lt;/p&gt;
&lt;p&gt;Now... Perhaps I should switch gears to the more programming-focused side of the table. After all, I've got
a number of podcasts that I listen to in this arena too!&lt;/p&gt;
&lt;h4&gt;&lt;em&gt;"Python Bytes"&lt;/em&gt;&lt;/h4&gt;
&lt;p&gt;&lt;img src="https://pythonbytes.fm/static/img/logo.png?cache_id=391cb49247369a67c4be78b27f2b3cd5"
    width="150" alt="Python Bytes" align="left"&gt;&lt;/p&gt;
&lt;p&gt;By far, my favorite of the programming-pods, &lt;a href="https://pythonbytes.fm/"&gt;&lt;em&gt;Python Bytes&lt;/em&gt;&lt;/a&gt; covers the latest news
in the Python programming language and the areas of the tech world that Python supports. Everything from web
servers to data-science, from embedded Python to the data-center!&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Python Bytes&lt;/em&gt; is a little on the shorter side; at least when compared with the other podcasts I've listed so
far. Michael Kennedy and Brian Okken cover all the latest-and-greatest Python modules and techniques with at
least one guest host every week.&lt;/p&gt;
&lt;h4&gt;&lt;em&gt;"Talk Python to Me"&lt;/em&gt;&lt;/h4&gt;
&lt;p&gt;Another podcast from Michael Kennedy (one of the hosts of the aforementioned &lt;em&gt;Python Bytes&lt;/em&gt;) is
&lt;a href="https://talkpython.fm"&gt;&lt;em&gt;Talk Python to Me&lt;/em&gt;&lt;/a&gt;. It's a little longer than its sister podcast, and goes into
greater detail in the technology or topic of interest. Michael brings on a variety of fantastic guests, all
of which help discuss the latest news.&lt;/p&gt;
&lt;h4&gt;&lt;em&gt;"Test and Code"&lt;/em&gt;&lt;/h4&gt;
&lt;p&gt;Brian Okken's other podcast, much like &lt;em&gt;Talk Python to Me&lt;/em&gt; is a companion podcast to &lt;em&gt;Python Bytes&lt;/em&gt;. Brian,
the author of &lt;em&gt;"Python Testing with pytest: Simple, Rapid, Effective, and Scalable"&lt;/em&gt; covers the intricacies
of testing code effectively. &lt;a href="https://testandcode.com/"&gt;&lt;em&gt;Test and Code&lt;/em&gt;&lt;/a&gt; is a great podcast, and is a little
on the shorter side, so it makes for quick listening!&lt;/p&gt;
&lt;h4&gt;&lt;em&gt;"Coder Radio"&lt;/em&gt;&lt;/h4&gt;
&lt;p&gt;&lt;a href="https://coder.show/"&gt;&lt;em&gt;Coder Radio&lt;/em&gt;&lt;/a&gt; is a discussion-based show talking all about "the art and business of
programming". It's often very opinionated, but let's be honest... Have you ever met a programmer who isn't?
A Jupiter Broadcasting family podcast, &lt;em&gt;Coder Radio&lt;/em&gt; talks everything from Python to Objective-C, Rust to
Ruby, GO to JS.&lt;/p&gt;
&lt;p&gt;Now, getting into the rest of the tech-stack, we simply must talk about Linux! And here, I've got quite the
assortment of Linux podcasts... Let's get started.&lt;/p&gt;
&lt;h4&gt;&lt;em&gt;"Linux Unplugged"&lt;/em&gt;&lt;/h4&gt;
&lt;p&gt;&lt;img src="https://assets.fireside.fm/file/fireside-images/podcasts/images/f/f31a453c-fa15-491f-8618-3f71f1d565e5/cover_small.jpg?v=3"
    width="150" alt="Linux Unplugged" align="right"&gt;&lt;/p&gt;
&lt;p&gt;By far, my favorite Linux pod, &lt;a href="https://linuxunplugged.com/"&gt;&lt;em&gt;Linux Unplugged&lt;/em&gt;&lt;/a&gt; covers everything in the
community of Linux; from new technologies to community happenings. Chris Fisher and Wes Payne bring the best
of the community together and make a fantastic weekly show as part of the Jupiter Broadcasting family. Always
keeping high-energy, enthusiastic goals, and a hopeful spirit; Chris and Wes open up with the community every
Tuesday.&lt;/p&gt;
&lt;h4&gt;&lt;em&gt;"Self-Hosted"&lt;/em&gt;&lt;/h4&gt;
&lt;p&gt;Admittedly, it's not &lt;em&gt;directly&lt;/em&gt; Linux focused, but it &lt;em&gt;is&lt;/em&gt; "Linux adjacent". &lt;a href="https://selfhosted.show/"&gt;&lt;em&gt;Self-Hosted&lt;/em&gt;&lt;/a&gt;
is another Jupiter Broadcasting show, but it caters towards (namely) the self-hosting side of the open-source
community. Everything from Nextcloud to Plex, Wireguard to Home Assistant. This is another one of my favorite
podcasts, and thus its placement in my lineup.&lt;/p&gt;
&lt;h4&gt;&lt;em&gt;"Linux Action News"&lt;/em&gt;&lt;/h4&gt;
&lt;p&gt;&lt;a href="https://linuxactionnews.com/"&gt;LAN&lt;/a&gt;, A.K.A. Linux Action News, is a short-and-sweet weekly podcast covering
all the latest news in the Linux world. Whether you're a die-hard Linux fan-boy, or a part-time tech
enthusiast, LAN is a great place to get the latest news in the Linux landscape. Being part of the Jupiter
Broadcasting family, it sees the same level of wonderful production care.&lt;/p&gt;
&lt;h2&gt;More?&lt;/h2&gt;
&lt;p&gt;Hmm... this isn't an all encompassing list, but there just isn't time.... I'll have to write more after a while.&lt;/p&gt;</content><category term="Audio"></category><category term="Tech"></category><category term="Podcasts"></category><category term="Media"></category></entry><entry><title>Hearing Fires While Seeing Smoke</title><link href="https://engineerjoe440.github.io/stanley-solutions-blog/hearing-fires-while-seeing-smoke.html" rel="alternate"></link><published>2021-07-12T20:18:00-07:00</published><updated>2021-07-12T21:05:00-07:00</updated><author><name>Joe Stanley</name></author><id>tag:engineerjoe440.github.io,2021-07-12:/stanley-solutions-blog/hearing-fires-while-seeing-smoke.html</id><summary type="html">&lt;p class="first last"&gt;While most of North Idaho is seeing (and smelling) plenty of smoke, I'm looking back over a successful Capstone project and more to come...&lt;/p&gt;
</summary><content type="html">&lt;p&gt;If you've talked to me at all in the past nine months or so, you probably already know that I had the great privilege of sponsoring an Engineering
Capstone project at the University of Idaho. Now, admittedly, it's something of a selfish endeavor as I have far too many &amp;quot;fun things&amp;quot; that I'd like
to explore, and not enough time or energy to do them all. Thankfully, some good faculty members are just as excited about some of these intriguing
projects as I am.&lt;/p&gt;
&lt;p&gt;What's more, though, as I sit here in North Idaho, surrounded by worsening smoke from many terrible wildfires, I'm reflecting on the project I was
so lucky to sponsor, and how excited I am for its future, and what future students will bring to it.&lt;/p&gt;
&lt;div class="section" id="the-project"&gt;
&lt;h2&gt;The Project&lt;/h2&gt;
&lt;img src="https://engineerjoe440.github.io/stanley-solutions-blog/images/team-firewatch.jpg" width="300" alt="Meet Team Firewatch!" align="right"&gt;&lt;p&gt;So what was it? Well, the project in a nutshell was to lay the groundwork for a design of a device which will detect wildfire using infrasonic sound;
that's the sound that's lower than what we can hear - think that death rumble from that old beater car you drove in high-school. No? Just me? Oh...&lt;/p&gt;
&lt;p&gt;The infrasonic sound would be detected by an ultra-economical (yeah, cheap) condenser microphone and amplified before being measured by a small
microcontroller responsible for wrapping that data up into a message sent over-the-air back to some central base. But what's to make it more interesting,
this wireless message is to be sent over a mesh network of these devices. Think hundreds... no, thousands of these little devices scattered around the
forest, all taking readings at specific intervals and relaying that information back to us so we can &lt;em&gt;hear&lt;/em&gt; if there's a wildfire starting anywhere.&lt;/p&gt;
&lt;p&gt;If this all sounds familiar, it's probably because I've already &lt;a class="reference external" href="./wildfire-prevention-with-sound"&gt;told you all about it&lt;/a&gt;. This project is one that
was started a few years back at the &lt;a class="reference external" href="https://uidaho.edu/"&gt;University of Idaho&lt;/a&gt; and was discontinued due to a lack of funding and support. Luckily
the sponsoring professor was still just as interested as I was, so we were able to pick it back up and continue down the road to developing some really
neat tech.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="this-year-s-team"&gt;
&lt;h2&gt;This Year's Team&lt;/h2&gt;
&lt;p&gt;So, this year, we had a team of some really outstanding students from a variety of backgrounds. Meridian, a mechanical engineer; Carlos, a computer
scientist; and two electrical engineers, Cory and Drew. We had the luxury of giving this fantastic team the flexibility of choosing their own path
in terms of the areas they were really interested in researching, which made for a lot of fun.&lt;/p&gt;
&lt;p&gt;I was really impressed by these students and their willingness to work so hard on this project. They produced some really fantastic work, and I get
the pleasure of keeping it! At least... until next year, when we get some more students to work on it.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="the-product"&gt;
&lt;h2&gt;The Product&lt;/h2&gt;
&lt;p&gt;The team was able to design a really wonderful and unique enclosure to encapsulate their microcontroller, sensor, antenna, and amplifier circuit. They
were also able to use some clear acrylic tubing to really show off how sharp this thing looks!&lt;/p&gt;
&lt;img src="http://images.shoutwiki.com/mindworks/thumb/5/5b/2021_infrasonic_wildfire_detector_finished_enclosure.png/800px-2021_infrasonic_wildfire_detector_finished_enclosure.png" width="500" alt="The Sensor..." align="left" style="padding:10px;"&gt;&lt;p&gt;Now, I'm not going to go too-deep into the technical specs of this thing, partly because I don't want to type it all out, and partly because the team
has already done such a fantastic job documenting it both in their &lt;a class="reference external" href="http://mindworks.shoutwiki.com/wiki/Infrasonic_Wildfire_Detector"&gt;Wiki page&lt;/a&gt;
and in their &lt;a class="reference external" href="https://gitlab.stanleysolutionsnw.com/infrasound-detector/portfolio-2020-2021"&gt;GitLab repo&lt;/a&gt; (which is one of the services I host!).&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="what-s-next"&gt;
&lt;h2&gt;What's Next&lt;/h2&gt;
&lt;p&gt;The project is nowhere near complete (even as cool as that enclosure looks). So I'm already lined up to sponsor a continued Capstone program again this
year (so long as the University will let me!), and I'm very excited to do so. There's certainly a few key things that we still need to work out:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Power - An obvious concern for any IoT device, and certainly one responsible for such a challenging environment.&lt;/li&gt;
&lt;li&gt;Sensor Validation - This years team did a great job bootstrapping their way up, but with luck, next year's team will be able to refine that work into
something that can prove the validity of the sensor.&lt;/li&gt;
&lt;li&gt;Wireless Mesh Networking - This was something that was really exciting since this year's team was able to find an open-source library to help with
this challenge, but there's more to be done; especially if the network is going to be anything larger than a few nodes.&lt;/li&gt;
&lt;li&gt;Enclosure Testing - Anything exposed to the elements needs to be hardened, and this enclosure still needs a little refinement there.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;All that said, I'm really excited to see where this project continues to grow, and what this next year's group of students will be able to accomplish!&lt;/p&gt;
&lt;/div&gt;
</content><category term="Capstone"></category><category term="Wildfire"></category><category term="IoT"></category><category term="MCU"></category><category term="Mesh"></category><category term="Radio"></category><category term="Smart-Sensor"></category><category term="Capstone"></category><category term="University"></category></entry><entry><title>Demonstrating Electricity</title><link href="https://engineerjoe440.github.io/stanley-solutions-blog/demonstrating-electricity.html" rel="alternate"></link><published>2021-06-25T19:03:00-07:00</published><updated>2021-06-25T19:03:00-07:00</updated><author><name>Joe Stanley</name></author><id>tag:engineerjoe440.github.io,2021-06-25:/stanley-solutions-blog/demonstrating-electricity.html</id><summary type="html">&lt;p class="first last"&gt;I recently had the pleasure of chaperoning a 4-H conference at the University of Idaho, but I also was able to teach!&lt;/p&gt;
</summary><content type="html">&lt;p&gt;If you've known me for any period of time, you probably already know that I grew up participating in my local 4-H program. I was a Cloverbud member
before I could be a regular member, meaning I spent about twelve years in the program. Ten of those years were spent raising hogs, and a few were
also spent participating in various leadership roles.&lt;/p&gt;
&lt;p&gt;I spent a year as my community-club's secretary, two years as president; and I even served as vice-president and even president of my county's teen
leadership club. It was a great experience, and I learned so much about myself during all of those adventures. In my last two years as a member, I
was able to attend the Idaho state &amp;quot;Teen Conference&amp;quot; as it was called at the time. It was (and is) a statewide event held on the University of Idaho's
campus to give high-school students the opportunity to explore a college campus, learn new leadership skills, and connect with peers from around the
state.&lt;/p&gt;
&lt;p&gt;In the past few years, I've had the extreme pleasure of supporting the conference (now called the
&lt;a class="reference external" href="https://www.uidaho.edu/extension/4h/events/stac"&gt;State Teen Association Convention&lt;/a&gt; - or STAC for short) as a college staff member, but this year I
was able to participate as a chaperone, and what's more, I was able to co-lead a workshop during the conference. What did I lead? Oh! A workshop covering
electricity and the electrical power grid; of course!&lt;/p&gt;
&lt;p&gt;I worked with a few colleagues from Schweitzer Engineering Laboratories to create a workshop to cover a few interesting topics about the grid. But, if
you know me, you know I much prefer hands-on exercises than any presentation. So I spent a little too much time working on creating a couple of demo
boards; seven in total.&lt;/p&gt;
&lt;div class="section" id="the-demos"&gt;
&lt;h2&gt;The Demos:&lt;/h2&gt;
&lt;p&gt;I made two sets of three boards, and a single stand-alone board. They were all to basically show:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Basic circuit: generation/source, transmission, and load&lt;/li&gt;
&lt;li&gt;Overloading circuit: multiple incandescent lights and a USB charger&lt;/li&gt;
&lt;li&gt;&amp;quot;Breaker&amp;quot; demonstration&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I made three of the basic circuit, ultimately to make a point about what an electrical fault might appear as, and how repairing it might be possible. It
was basically constructed with a AA battery pack, a few spring terminals, and a single incandescent T-10 socket/bulb. With this model, we're able to
explain the basics of an energy source, energy transmission, and an energy sink (load). What made this fun, was that we could go around once the students
had their little power system running and create a &amp;quot;fault&amp;quot; by cutting the wire between the spring terminals. Then we could instruct the students to fix
their system and leave them to their own devices (and a few odd assorted materials).&lt;/p&gt;
&lt;img alt="Basic circuit demonstration board (one of three identical models)." src="https://engineerjoe440.github.io/stanley-solutions-blog/images/demo-boards-and-amo-power/203019151_490948755513699_8766751111523803463_n.jpg" style="width: 600px;" /&gt;
&lt;p&gt;I also made three of the overloading circuit. This one was, by far, my favorite. You see, these boards are set up with 5 separately controlled T-10
sockets, each with their own ON-OFF latching pushbutton. There's also the matter of a USB phone charger connected at the &amp;quot;far end&amp;quot;. The whole thing is
powered by a single 9V battery, connected to the rest of the circuit by a single 1-ohm power resistor. This all means that as each of the incandescent
lights are turned on (being as they're all connected in parallel) the voltage across the power resistor will continue to drop. The USB charger circuit
is rated for some 6-24VDC (approximately). Meaning that when the voltage input drops below the rated minimum (6V) the supply will cease to function.
That means that the system will quite easily overload to the point of failure. This was a great example for the students, because it allowed them to
truly play with the system until they can get a sense about how the system can be &lt;em&gt;&amp;quot;loaded down&amp;quot;&lt;/em&gt;. The point here was just to share with students just
how the power system can theoretically be overloaded, and how that's not good for any of the consumers. Pretty cool to see in action!&lt;/p&gt;
&lt;img alt="Overloading circuit demonstration board (one of three identical models)." src="https://engineerjoe440.github.io/stanley-solutions-blog/images/demo-boards-and-amo-power/203656236_2868616930066285_3189504440222786790_n.jpg" style="width: 600px;" /&gt;
&lt;p&gt;Finally, I built a single board (on a whim, I might add) to demonstrate how a breaker acts (effectively) as a latching switch. I used a simple ice-cube
relay to act in this capacity, and to be controlled by a few simple push-buttons. One button (red, of course, to match the electrical industry standard)
was used to &lt;em&gt;close&lt;/em&gt; the breaker. One button (green -just as the red- matching the industry standard) to &lt;em&gt;&amp;quot;open&amp;quot;&lt;/em&gt; the circuit, and finally a simple button
offset from the others, and labeled to indicate a fault. It's quite simple, really; both the fault and open switches effectively create a simple dead-short
so as to reduce the voltage across the relay coil to the point of loosing the magnetic field, and &lt;em&gt;falling&lt;/em&gt; open. However, from the student's perspective,
it all looks and feels real. It seems that the &amp;quot;breaker&amp;quot; is responding to commands to open or close, and that it responds to a fault by opening to protect
itself and the system. Lastly, I should note, there is a single blue LED in this circuit, too, just to indicate whether the circuit is energized or not.&lt;/p&gt;
&lt;img alt="Breaker circuit demo board." src="https://engineerjoe440.github.io/stanley-solutions-blog/images/demo-boards-and-amo-power/203681209_804202393601180_447891412997591781_n.jpg" style="width: 600px;" /&gt;
&lt;/div&gt;
&lt;div class="section" id="the-results"&gt;
&lt;h2&gt;The Results:&lt;/h2&gt;
&lt;p&gt;The demo boards were a pretty good success. The 4-H delegates really seemed to enjoy them, and got engaged right away with them, seemingly having great
fun playing with them. I'm very excited to say that they'll be even more useful in the hands of the SEL K-12 outreach program. My colleague will be taking
them to play even more, and hopefully continue using them for a variety of great, hands-on exercises.&lt;/p&gt;
&lt;p&gt;I've been thinking more and more about some other activities that I might be able to &amp;quot;construct&amp;quot; in hardware to simplify the educational experience and
make them more accessible for others moving forward. One that I'm really looking towards is a simple power-system protection system. This where students
can actually make decisions to open breakers, shed load, and increase generation, all to respond to various electrical phenomena, and all actions being
accounted for by an automated system capable of making real changes to the system to show what happens after each scenario.&lt;/p&gt;
&lt;p&gt;A little vague description, I know... But that's because I hope to actually &lt;em&gt;build&lt;/em&gt; this thing, and show it off in the relatively (relatively) near
future!&lt;/p&gt;
&lt;/div&gt;
</content><category term="Teaching"></category><category term="Demo"></category><category term="Teaching"></category><category term="Electricity"></category><category term="Basic-Circuits"></category><category term="Youth"></category><category term="4-H"></category><category term="4H"></category></entry><entry><title>Powering My Own Relaxation</title><link href="https://engineerjoe440.github.io/stanley-solutions-blog/powering-my-own-relaxation.html" rel="alternate"></link><published>2021-06-19T11:40:00-07:00</published><updated>2021-06-19T11:40:00-07:00</updated><author><name>Joe Stanley</name></author><id>tag:engineerjoe440.github.io,2021-06-19:/stanley-solutions-blog/powering-my-own-relaxation.html</id><summary type="html">&lt;p class="first last"&gt;I spend enough time in my arm-chair with my laptop that I thought it about time to power all my digital toys in the same spot!&lt;/p&gt;
</summary><content type="html">&lt;p&gt;You know, I never thought I'd spend so much time in my arm-chair. But here we are.&lt;/p&gt;
&lt;p&gt;It's become pretty comfortable, recently, with all the new audio networking I've been working on (namely my audio network using VBAN - you can read
more about that &lt;a class="reference external" href="https://blog.stanleysolutionsnw.com/spam-the-vban-for-non-stop-audio.html"&gt;here&lt;/a&gt;). Still, I'm not about to just sit back and listen
without doing &lt;em&gt;something&lt;/em&gt;. I mean, c'mon! I'm an insatiable tinkerer, after all. So, I spend a lot of time working away on my laptop (really starting
to love &lt;a class="reference external" href="https://kde.org/plasma-desktop/"&gt;KDE Plasma!&lt;/a&gt;) and poking around at random bits and bytes.&lt;/p&gt;
&lt;p&gt;So I need a charger, but I get bored dragging around that plain ole' wall-wart! So I thought I could do one better. I've seen plenty of those neat
looking amo-can stereos, online, but that's not quite my style. If you know me, you know I prefer cabinet stereos. No, instead I thought I could put
all of my power supply components in the can; and throw in a few of my own touches along the way. So, I decided I'd get to work.&lt;/p&gt;
&lt;p&gt;A little too much drooling and visitation of our favorite, least-favorite A-to-Z online marketplace, I had an assortment of nerdy-looking switch
assemblies, voltage meters, and a beefy little multi-output DC power supply.&lt;/p&gt;
&lt;img alt="The Controls of my &amp;quot;Unique&amp;quot; Power Can" src="https://engineerjoe440.github.io/stanley-solutions-blog/images/demo-boards-and-amo-power/203727287_161197975998707_4701277717982762523_n.jpg" style="width: 600px;" /&gt;
&lt;p&gt;Now with all these neat little switches, I've got to do &lt;strong&gt;*something*&lt;/strong&gt; with them, right?&lt;/p&gt;
&lt;p&gt;You bet!&lt;/p&gt;
&lt;p&gt;How about adding a little Linux computer, to the mix? Sure! I gave yet another old machine new life by taking an old
&lt;a class="reference external" href="https://www.embeddedarm.com/"&gt;Technologic computer&lt;/a&gt; and lobbing it into the case; mounted with Ethernet, serial terminal, and dual USB ports exposed
for easy access. My own sort of computer tower, you might say.&lt;/p&gt;
&lt;img alt="Mounted a Linux computer in there too!" src="https://engineerjoe440.github.io/stanley-solutions-blog/images/demo-boards-and-amo-power/203630587_497812148003314_6021780960392169872_n.jpg" style="width: 600px;" /&gt;
&lt;p&gt;But this thing's ultimately a power supply, right? So it's got to have &lt;em&gt;power&lt;/em&gt;! And that, it does! Inside, I've mounted a little multi-output power supply
with 3 discrete taps; 24V, 12V, and 5V. I don't quite know what I'm going to do with 24V, yet, but the 5V and 12V are already serving my purposes to power
the little computer, a variety of lights, and perhaps a few more odds and ends as time progresses.&lt;/p&gt;
&lt;img alt="The power!" src="https://engineerjoe440.github.io/stanley-solutions-blog/images/demo-boards-and-amo-power/203150896_2002088606597054_7741904286201403555_n.jpg" style="width: 600px;" /&gt;
&lt;p&gt;What's more, however, is that I've also inserted several USB power hubs, and mounted a computer charger inside the can so that I can power my laptop, too!
In fact, as I sit her writing, I'm using the power supply right now!&lt;/p&gt;
&lt;p&gt;Now, I'll grant that like so many of my little tinkering projects, this one is nowhere near being complete, but I will say that &lt;em&gt;one&lt;/em&gt; of the switches
does function to control the two voltage meters mounted inside (one analog, the other digital).&lt;/p&gt;
&lt;img alt="The final (but not finished) product!" src="https://engineerjoe440.github.io/stanley-solutions-blog/images/demo-boards-and-amo-power/202866327_175178427900304_1831963921642931273_n.jpg" style="width: 600px;" /&gt;
&lt;div class="section" id="specs"&gt;
&lt;h2&gt;Specs:&lt;/h2&gt;
&lt;p&gt;So let's talk about what all's in this thing!&lt;/p&gt;
&lt;div class="section" id="power-supplies"&gt;
&lt;h3&gt;Power Supplies:&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;2x 5V, 2.1A USB Chargers&lt;/li&gt;
&lt;li&gt;2x 5V, 2.4A USB Fast Chargers&lt;/li&gt;
&lt;li&gt;1x 19V, ~2A Computer Charger&lt;/li&gt;
&lt;li&gt;2x 120VAC Outlets (one internal, the other external)&lt;/li&gt;
&lt;li&gt;1x 24V DC Rail&lt;/li&gt;
&lt;li&gt;1x 12V DC Rail (powers the USB chargers, and a few other bits-and-bobs)&lt;/li&gt;
&lt;li&gt;1x 5V DC Rail (powers the Technologic Linux computer)&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="switches"&gt;
&lt;h3&gt;Switches:&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;3x Safety Toggle Switches&lt;/li&gt;
&lt;li&gt;5x Illuminated Rocker Switches&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="meters"&gt;
&lt;h3&gt;Meters:&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;1x Backlit AC Panel Meter, 0-150VAC&lt;/li&gt;
&lt;li&gt;1x Blue LED Digital Meter, 0-200VAC&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="computing-specs"&gt;
&lt;h3&gt;Computing Specs:&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;1x Technologic 7800 ARM Computer; Runs Pre-built Debian 5.0, &amp;quot;Lenny&amp;quot; (yeah, it's old, okay?!)&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="final-thoughts"&gt;
&lt;h2&gt;Final Thoughts&lt;/h2&gt;
&lt;p&gt;Another quick note about the project, I finally got to use my brand-new drill press for it! Woo-hoo!!! That was a lot of fun!&lt;/p&gt;
&lt;p&gt;Hopefully, when I get the little computer tied into some more important things, I'll have more to say on the matter, but first, I've
got to get it booting Debian... Then see if I can possibly get it to run newer images... Like, I dunno, something &lt;em&gt;NEW&lt;/em&gt;?!?!&lt;/p&gt;
&lt;/div&gt;
</content><category term="Home-Projects"></category><category term="Ammo-Can"></category><category term="Power-Supply"></category><category term="Arm-Chair"></category><category term="Linux"></category><category term="Charger"></category></entry><entry><title>Spam the VBAN for Non-Stop Audio</title><link href="https://engineerjoe440.github.io/stanley-solutions-blog/spam-the-vban-for-non-stop-audio.html" rel="alternate"></link><published>2021-02-15T20:22:00-08:00</published><updated>2021-02-15T20:43:00-08:00</updated><author><name>Joe Stanley</name></author><id>tag:engineerjoe440.github.io,2021-02-15:/stanley-solutions-blog/spam-the-vban-for-non-stop-audio.html</id><summary type="html">&lt;p class="first last"&gt;When things get sticky, leave it to Python to keep the wheels greased!&lt;/p&gt;
</summary><content type="html">&lt;p&gt;In a &lt;a class="reference external" href="https://blog.stanleysolutionsnw.com/networked-audio-using-vban-and-rpi.html"&gt;recent article&lt;/a&gt; I wrote about how I'd started to integrate more of my house's
audio system with a networked audio protocol known as &amp;quot;VBAN&amp;quot;. I'd gotten some great
use out of the system, but I'd started running into some problems more recently...&lt;/p&gt;
&lt;p&gt;You see, for some reason, if I were streaming some audio to my Raspberry Pi, and the
stream dropped into a lull (i.e. between songs, say) I'd often see some pretty nasty
buffer errors from Alsa. Now, I could've dug into it much deeper and tried to get to
the root of the problem in &lt;cite&gt;C&lt;/cite&gt;, but I didn't really feel like it. Instead, I thought
I'd just throw some Python at it! So after spending an intermittent afternoon
reminding myself how the &lt;cite&gt;subprocess&lt;/cite&gt; module works, and debugging my own madness, I
got a working script that I use as a &lt;em&gt;systemd&lt;/em&gt; service.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# VBAN Receiver in Python&lt;/span&gt;

&lt;span class="c1"&gt;# Imports&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;subprocess&lt;/span&gt;

&lt;span class="c1"&gt;# Executor Function&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;execute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cmd&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;popen&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;subprocess&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Popen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cmd&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;stdout&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;subprocess&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;PIPE&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                             &lt;span class="n"&gt;stderr&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;subprocess&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;STDOUT&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;universal_newlines&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;stdout_line&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;iter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;popen&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stdout&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;readline&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="n"&gt;stdout_line&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;popen&lt;/span&gt;
    &lt;span class="n"&gt;popen&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stdout&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;return_code&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;popen&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;wait&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;return_code&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="n"&gt;subprocess&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CalledProcessError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;return_code&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;cmd&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# Define Attributes&lt;/span&gt;
&lt;span class="n"&gt;MASTER_PC_IP&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;lt;your-ip-here&amp;gt;&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;LOG_FILE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;/var/vban_log.log&amp;#39;&lt;/span&gt;

&lt;span class="c1"&gt;# Define Command and Args&lt;/span&gt;
&lt;span class="n"&gt;EXECUTABLE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;/usr/local/bin/vban_receptor&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;ARGS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;-i&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;MASTER_PC_IP&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;-p&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;6980&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;-s&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;StereoPi&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;-d&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;front&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;-q&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;0&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="n"&gt;CALL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;EXECUTABLE&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;CALL&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;extend&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ARGS&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# Call the System&lt;/span&gt;
&lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;LOG_FILE&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;a&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;logFile&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;output&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;proc_handle&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;execute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;CALL&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;output&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;end&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;logFile&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;output&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="c1"&gt;# Catch Error&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Error: alsa_write:&amp;quot;&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;output&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Failure... Python intervening!&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="n"&gt;proc_handle&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;kill&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
                &lt;span class="n"&gt;proc_handle&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;wait&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
                &lt;span class="k"&gt;break&lt;/span&gt; &lt;span class="c1"&gt;# Continue While Loop - Call Again&lt;/span&gt;
&lt;span class="c1"&gt;# END&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;With that magic little Python script, I basically kick VBAN in the butt every time
that Alsa decides to be unfriendly (which happens quite regularly) by killing the
process, and then starting it right back up. With the magic of computers, this
happens very fast, and as I'd briefly mentioned earlier, it only seems to really
play into the &amp;quot;mix&amp;quot; in-between songs anyway. So after building the script, giving
it a nice little test drive, and scrutinizing my Raspberry Pi; I thought it was
time to build it back into my simple little service.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# /etc/systemd/system/vbanstereorx.service&lt;/span&gt;
&lt;span class="c1"&gt;# vbanstereorx.service&lt;/span&gt;
&lt;span class="c1"&gt;# VBAN Receptor Stereo Service&lt;/span&gt;

&lt;span class="k"&gt;[Unit]&lt;/span&gt;
&lt;span class="na"&gt;Description&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;VBAN Stereo Receptor&lt;/span&gt;

&lt;span class="k"&gt;[Service]&lt;/span&gt;
&lt;span class="na"&gt;Type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;simple&lt;/span&gt;
&lt;span class="na"&gt;ExecStart&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;/usr/bin/python3 /home/vbanner.py&lt;/span&gt;
&lt;span class="na"&gt;Restart&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;always&lt;/span&gt;

&lt;span class="k"&gt;[Install]&lt;/span&gt;
&lt;span class="na"&gt;WantedBy&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;multi-user.target&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I'm sure I'll be back to crack the hood back open on this one at some point, but
for now, I'm happy to stream my music back to my cabinet stereo with the power of
Linux.&lt;/p&gt;
</content><category term="Raspberry Pi"></category><category term="VBAN"></category><category term="Audio Network"></category><category term="Raspberry Pi"></category><category term="Python"></category><category term="Linux"></category></entry><entry><title>Servers in the Basement...</title><link href="https://engineerjoe440.github.io/stanley-solutions-blog/jenkins-servers-in-the-basement.html" rel="alternate"></link><published>2021-02-14T19:23:00-08:00</published><updated>2021-02-14T20:40:00-08:00</updated><author><name>Joe Stanley</name></author><id>tag:engineerjoe440.github.io,2021-02-14:/stanley-solutions-blog/jenkins-servers-in-the-basement.html</id><summary type="html">&lt;p class="first last"&gt;Some people keep their creepy Christmas decorations in their basement. Others keep their continuous integration servers down there too...&lt;/p&gt;
</summary><content type="html">&lt;img alt="SEL Rugged Computers mounted and ready for work!" src="https://engineerjoe440.github.io/stanley-solutions-blog/images/jenkinsbasement/IMG_0851.jpg" style="width: 600px;" /&gt;
&lt;p&gt;Whelp, I've gone and done it. I've mounted and installed one of my SEL computers
and set it up for running Jenkins!&lt;/p&gt;
&lt;p&gt;This isn't going to be a very in-depth article, but I wanted to say that it's
done. The server is mounted with a brand new switch and surge protector (no UPS
for the moment, but perhaps to come in the &lt;em&gt;relatively&lt;/em&gt; near future). They're
networked back upstairs to my little IT closet, and Jenkins is waiting idly for
me to push new code.&lt;/p&gt;
&lt;p&gt;I spent Saturday mounting the server, re-routing all the networking, and setting
up my modem to provide access to the servers by way of a reverse proxy. Perhaps
I'll document what that is and how it works, but that might be another article.&lt;/p&gt;
&lt;p&gt;Today I got to work standing up a few &lt;cite&gt;pytest&lt;/cite&gt; projects for both &lt;a class="reference external" href="https://github.com/engineerjoe440/selprotopy"&gt;selprotopy&lt;/a&gt;
and &lt;a class="reference external" href="https://github.com/engineerjoe440/pycev"&gt;pycev&lt;/a&gt;, what's exciting about this though, is the fact that they're set up
now so that they can access the private resources they need for testing, but
they can be kicked off by my commits and pushes to their repositories on GitHub.&lt;/p&gt;
&lt;p&gt;So... now I can really start cranking on that code, and Jenkins can do some of
my dirty work to start running the tests for me!&lt;/p&gt;
&lt;img alt="Gotta love that SEL blue!" src="https://engineerjoe440.github.io/stanley-solutions-blog/images/jenkinsbasement/IMG_0852.jpg" style="width: 600px;" /&gt;
&lt;p&gt;I want to restate that I'm very excited to be using some old SEL hardware and
giving it a second lease on life. These computers are rugged, industrial
machines; and I'm getting to put them to work making these projects solid. Not
to mention that these projects are actually tailored to supporting SEL tech.&lt;/p&gt;
&lt;p&gt;Yep. It's nerdy.&lt;/p&gt;
&lt;p&gt;Yep. I'm still excited.&lt;/p&gt;
&lt;p&gt;Yep. You guessed it; I'll surely be giving more updates moving forward!&lt;/p&gt;
</content><category term="DevOps"></category><category term="SEL"></category><category term="CI/CD"></category><category term="Jenkins"></category><category term="Dev-Ops"></category></entry><entry><title>CI/CD On Industrial Grade Hardware</title><link href="https://engineerjoe440.github.io/stanley-solutions-blog/jenkins-on-sel-industrial-hardware.html" rel="alternate"></link><published>2021-02-07T16:19:00-08:00</published><updated>2021-02-07T16:19:00-08:00</updated><author><name>Joe Stanley</name></author><id>tag:engineerjoe440.github.io,2021-02-07:/stanley-solutions-blog/jenkins-on-sel-industrial-hardware.html</id><summary type="html">&lt;p class="first last"&gt;Run DevOps CI/CD pipelines on industrial equipment with no moving parts? Ok! Sign me up!!!&lt;/p&gt;
</summary><content type="html">&lt;p&gt;Yes... I already have too many computers. But with that said, what's a few more?&lt;/p&gt;
&lt;p&gt;I know it was only about a month-and-a-half ago that I was writing about Jenkins
running on a Raspberry Pi, but I outgrew that pretty quickly. In reality, I
really just started with it, and basically gave up; but hey! I learned a lot in
that time. So now, I'm upgrading!&lt;/p&gt;
&lt;div class="section" id="the-new-hardware"&gt;
&lt;h2&gt;The new hardware&lt;/h2&gt;
&lt;p&gt;I am something of a hardware graveyard. Old machines come to me to live out the
end of their lives and, eventually, give up the ghost. I managed to get my hands
on some second-hand industrial computers, to do some bidding for me. Namely, I
picked up some old SEL (Schweitzer Engineering Laboratories) SEL-1102 rugged
computers. They're based on an old Intel x686 processor, and don't have anything
special in the memory arena... but they're super solid machines.&lt;/p&gt;
&lt;img alt="SEL Rugged Computers to Run my DevOps Pipeline" src="https://engineerjoe440.github.io/stanley-solutions-blog/images/SEL1102/IMG_0849.jpg" style="width: 600px;" /&gt;
&lt;p&gt;My comment about being a &amp;quot;computer graveyard&amp;quot; might still apply to these
computers too, but well, they've got a lot more life left in them. You see,
these are ruggedized computers designed for installation into some of the most
extreme environments around the world. Rated for harsh operating conditions,
built with no moving parts (that's right, a computer without fans), and a whole
slew of serial ports (16 DB9 ports alone). SEL maintains a 10 worldwide warranty
too; but I'll grant that this warranty is void because these devices were sold
to me secondhand. I bring up this point, however because it really exemplifies
the commitment to quality that SEL brings to the table.&lt;/p&gt;
&lt;p&gt;Now, for those of you who know me well, you'll also know that I &lt;em&gt;work&lt;/em&gt; for SEL.
So yeah, I do have some bias there; but I've also gotten to see (first-hand) the
quality that we at SEL put into our products, so I'm very proud to have a few of
these machines running at home, and I'm very excited to put them into production.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="the-new-work"&gt;
&lt;h2&gt;The new work&lt;/h2&gt;
&lt;p&gt;With these new servers, I'm excited to set them up running Debian (because, yeah,
they will do that - and very well, I might add) to support a Jenkins server. I
plan to use that, and expose it as my primary integration system. With Jenkins
running on these new machines, I'm going to set up a Pi Cluster to offload the
actual pipeline work.&lt;/p&gt;
&lt;p&gt;But why?&lt;/p&gt;
&lt;p&gt;Well, I want the main Jenkins server to be just that... the main server. I want
other machines to do all the &amp;quot;dirty work&amp;quot; for me.&lt;/p&gt;
&lt;p&gt;So, before you get too carried away with your thoughts; yes, that does mean more
computers. I've already put in an order for a Raspberry Pi cluster, which I'm
very excited about; but that's another article for the near future.&lt;/p&gt;
&lt;p&gt;Part of this excitement also stems from my need to integrate with some SEL relays
serially for testing with my SELProtoPy project. With all of those serial ports
on these computers, I'll be able to tie in to those relays quite nicely to allow
some really solid automated testing. Better yet, with all of that integration,
I'll be able to do some really nice pipelined builds for testing SELProtoPy and
PyCEV.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="what-s-next"&gt;
&lt;h2&gt;What's next?&lt;/h2&gt;
&lt;p&gt;Well, next on my plate is to get these machines up and running on my network so
that I can access them remotely and start integrating with GitHub actions to
fire off the builds and testing.&lt;/p&gt;
&lt;p&gt;I'm very excited to be putting some SEL equipment to work in my own personal
development practices, so I'm sure I'll have some more updates as I go along!&lt;/p&gt;
&lt;img alt="Putting some SEL Hardware to Work" src="https://engineerjoe440.github.io/stanley-solutions-blog/images/SEL1102/IMG_0850.jpg" style="width: 600px;" /&gt;
&lt;/div&gt;
</content><category term="DevOps"></category><category term="SEL"></category><category term="Industrial"></category><category term="Rugged Computer"></category><category term="Ci/Cd"></category><category term="Development"></category><category term="Server"></category></entry><entry><title>GitLab, Jenkins, Python, and the Raspberry Pi!</title><link href="https://engineerjoe440.github.io/stanley-solutions-blog/gitlab-jenkins-and-the-rpi.html" rel="alternate"></link><published>2020-12-21T19:07:00-08:00</published><updated>2021-01-04T21:07:00-08:00</updated><author><name>Joe Stanley</name></author><id>tag:engineerjoe440.github.io,2020-12-21:/stanley-solutions-blog/gitlab-jenkins-and-the-rpi.html</id><summary type="html">&lt;p class="first"&gt;I'm finally getting around to setting up some CI/CD systems for my self-hosted GitLab server... About Time!&lt;/p&gt;
&lt;p class="last"&gt;CI/CD, Dev Ops, Pipelines, Workflows, Automated Deployment&lt;/p&gt;
</summary><content type="html">&lt;p&gt;Think that's enough buzz words to catch the Google SEO engine's eye?&lt;/p&gt;
&lt;p&gt;Probably not, I know, but I'm not going to spend anymore time on it at the moment. See,
I've got bigger items to tackle! Namely, getting Jenkins set up on a Raspberry Pi, as
the name of this article so implies.&lt;/p&gt;
&lt;p&gt;Good news for you; I've cut out the &amp;quot;dirty-work&amp;quot; through the magic of &amp;quot;blog-posting.&amp;quot;&lt;/p&gt;
&lt;p&gt;As part of the work I've been tackling for some of the other open source projects I'm
developing, I need to develop a local (on-premises) continuous integration solution to
effectively slam my code with testing and verification. After all, what's great code
without equally great tests? I need to have the system on-premises for a couple reasons;
the largest of which being the fact that I need access to custom hardware.&lt;/p&gt;
&lt;blockquote&gt;
So, why a Pi? A Pi 3-B no less?!&lt;/blockquote&gt;
&lt;p&gt;Well, that's quite simple; actually. It's the only spare computer I have at the moment.&lt;/p&gt;
&lt;p&gt;So now that I've thoroughly introduced you, to my reasoning, and the topic at hand;
let's get into it!&lt;/p&gt;
&lt;div class="section" id="installing-jenkins-on-the-pi"&gt;
&lt;h2&gt;Installing Jenkins on the Pi&lt;/h2&gt;
&lt;p&gt;I already have GitLab set up on an old x86 laptop running Ubuntu Server 20.04, so
for this article, I'm going to focus on setting up Jenkins on a Raspberry Pi, and
getting the basics of the workflow between Jenkins and GitLab running.&lt;/p&gt;
&lt;ol class="arabic"&gt;
&lt;li&gt;&lt;p class="first"&gt;Start with a fresh Pi (latest build of the RaspberryPiOS). I had a Pi sitting
around with an older build of Raspbian, but that's several years old, and I
really just wanted to start fresh.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Update the Raspberry Pi. Well, in the spirit of starting fresh, might as well
update the system!&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Install Java with:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$&lt;/span&gt;&amp;gt; sudo apt-get install openjdk-11-jre
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Verify Java Version with:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$&lt;/span&gt;&amp;gt; java --version
&lt;span class="go"&gt;openjdk 11.0.9.1 2020-11-04&lt;/span&gt;
&lt;span class="go"&gt;OpenJDK Runtime Environment (build 11.0.9.1+1-post-Raspbian-1deb10u2)&lt;/span&gt;
&lt;span class="go"&gt;OpenJDK Server VM (build 11.0.9.1+1-post-Raspbian-1deb10u2, mixed mode)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;At this point, I took some time to get the Python system up to a state that
would be a bit more useful for me. So I installed &lt;cite&gt;pip3&lt;/cite&gt;, and a number of
Python packages. I suppose this could really be done at any point during this
whole process, but I felt like this was the most sensible time.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Download and add the Jenkins Key with:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$&lt;/span&gt;&amp;gt; wget -q -O - https://pkg.jenkins.io/debian/jenkins.io.key &lt;span class="p"&gt;|&lt;/span&gt; sudo apt-key add -
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Open a new file:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$&lt;/span&gt;&amp;gt; sudo nano /etc/apt/sources.list.d/jenkins.list
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Then add the following line and save the file to add the Jenkins repository as
a source:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;deb https://pkg.jenkins.io/debian binary/
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Next, another good &lt;cite&gt;sudo apt-get update&lt;/cite&gt; is in order, followed by
&lt;cite&gt;sudo apt-get install jenkins&lt;/cite&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Using the command listed below, you can grab the initial admin password to get
started:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$&lt;/span&gt;&amp;gt; sudo cat /var/lib/jenkins/secrets/initialAdminPassword
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Now it's time to navigate to &lt;cite&gt;&amp;lt;raspberry-pi-ip-address:8080&lt;/cite&gt; and use that fancy
password to log in for the first time and start the setup wizard; or should I say
butler?&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;After the &amp;quot;butler&amp;quot; has completed, it's time to get started with setting up some CI
jobs.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="preparing-a-simple-pytest-job-with-jenkins"&gt;
&lt;h2&gt;Preparing a Simple &lt;cite&gt;pytest&lt;/cite&gt; Job with Jenkins&lt;/h2&gt;
&lt;p&gt;Now, I'll caution that I this portion doesn't cover any of the GitLab/Jenkins
interfacing, maybe I'll get to writing that in another article... As part of the
material I'm skipping, I'm going to breeze right over the GitLab connection and
repository information. I'm going to focus, instead, on the build operations.&lt;/p&gt;
&lt;ol class="arabic"&gt;
&lt;li&gt;&lt;p class="first"&gt;With the new Jenkins server up and running, create a &amp;quot;New Item,&amp;quot; give it a
descriptive, memorable name, and set it as a &amp;quot;Freestyle Project&amp;quot;&lt;/p&gt;
&lt;img alt="Create a new project in Jenkins for CI." src="https://engineerjoe440.github.io/stanley-solutions-blog/images/jenkins-new-config.png" style="width: 800px;" /&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;After configuring the various other settings relevant to the project (repository,
build-triggers, etc.) find the &lt;em&gt;&amp;quot;Build&amp;quot;&lt;/em&gt; section and from the &lt;em&gt;&amp;quot;Add build step&amp;quot;&lt;/em&gt;
select &lt;em&gt;&amp;quot;Execute shell&amp;quot;&lt;/em&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;In the new &amp;quot;Command&amp;quot; field of the &amp;quot;Execute shell&amp;quot; section, insert the commands
necessary to navigate to the appropriate subdirectory and run &lt;cite&gt;pytest&lt;/cite&gt;. In my case,
my pytest &amp;quot;test folder&amp;quot; is located in the root directory, so I don't really need
to change the working directory; I just go and run &lt;cite&gt;pytest&lt;/cite&gt;. I do run a few other
generic commands just to make sure that I've got a fair report of the build
environment in case I need to go back and debug some things. So, here's a sample
of what my configuration might look like.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="go"&gt;echo &amp;quot;Current Directory&amp;quot;&lt;/span&gt;
&lt;span class="go"&gt;pwd&lt;/span&gt;
&lt;span class="go"&gt;echo &amp;quot;List Folder Structure&amp;quot;&lt;/span&gt;
&lt;span class="go"&gt;ls -a ./&amp;lt;name-of-my-python-package-folder&amp;gt;&lt;/span&gt;
&lt;span class="go"&gt;echo &amp;quot;Run pytest&amp;quot;&lt;/span&gt;
&lt;span class="go"&gt;pytest -v&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class="section" id="summary"&gt;
&lt;h2&gt;Summary&lt;/h2&gt;
&lt;p&gt;Well, that's a pretty rough intro into what I've been doing in Jenkins and GitLab.
Kinda rough, but I hope I'll be looking to add more in the near future.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Python"></category><category term="Python"></category><category term="Jenkins"></category><category term="Gitlab"></category><category term="Raspberry Pi"></category><category term="Dev Ops"></category><category term="GIT"></category><category term="CI/CD"></category></entry><entry><title>Synchronizing Home Audio with the Raspberry Pi and VBAN</title><link href="https://engineerjoe440.github.io/stanley-solutions-blog/networked-audio-using-vban-and-rpi.html" rel="alternate"></link><published>2020-12-19T19:44:00-08:00</published><updated>2020-12-19T19:44:00-08:00</updated><author><name>Joe Stanley</name></author><id>tag:engineerjoe440.github.io,2020-12-19:/stanley-solutions-blog/networked-audio-using-vban-and-rpi.html</id><summary type="html">&lt;p class="first last"&gt;Ever wish your music was synchronized across your home, but you didn't have to sell your soul to Google to make it happen? Well, I did it with a Raspberry Pi and a nifty little open-source project!&lt;/p&gt;
</summary><content type="html">&lt;p&gt;I'm something of an audiophile.&lt;/p&gt;
&lt;p&gt;Not completely, mind you, just partly.&lt;/p&gt;
&lt;p&gt;Why partly? Well, I love audio! Anymore, I don't really watch television, or movies; but I listen
to audiobooks, podcasts, music, and more all the time! I like to listen everywhere. Home, work,
while driving. EVERYWHERE. And I like to have my audio follow me around all the time. In other
words, I like having the same music in my study as what's in my living room, kitchen, bathroom,
bedroom... EVERYWHERE.&lt;/p&gt;
&lt;p&gt;I'd say that I enjoy quality HiFi audio, but I'm not the pickiest out there. My kitchen, for
example has some pretty crude audio since I bought a pretty cheap stereo reciever and just
sorta threw it together. Still, I enjoy it. It gives me audio when I'm cooking, cleaning, or just
hanging out; and for me, that's the most important part.&lt;/p&gt;
&lt;p&gt;When I bought my home, I decided that I was going to install an &amp;quot;Audio Bus&amp;quot; to allow bi-directional
audio transportation. I've since started on the project, but I've run out of speaker cable, and
considering the crazy holiday spending, I've put on the brakes for the moment on my &amp;quot;personal&amp;quot;
spending. That means that I've only been able to hard-wire a connection between the kitchen and
my study. But I &lt;em&gt;really&lt;/em&gt; want more.&lt;/p&gt;
&lt;div class="section" id="my-solution"&gt;
&lt;h2&gt;My Solution&lt;/h2&gt;
&lt;p&gt;Enter &lt;a class="reference external" href="https://vb-audio.com/Voicemeeter/vban.htm"&gt;VB Audio Network&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;VBAN is a UDP-based network audio streaming protocol that was developed by the same individual
who created the &lt;a class="reference external" href="https://vb-audio.com/Voicemeeter/banana.htm"&gt;Banana&lt;/a&gt; audio mixer which I've come to love for my desktop audio mixing desires.
It's essentially a networked audio system, allowing streaming audio transmission and reception,
and it's officially supported on Windows, Android, and iOS; and community-supported on Linux!&lt;/p&gt;
&lt;p&gt;That's right, it's available on Linux, and it's fully open-source as &lt;a class="reference external" href="https://github.com/quiniouben/vban"&gt;vban&lt;/a&gt; where it's
accessible as a command-line-based reciever or transmitter.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="my-process"&gt;
&lt;h2&gt;My Process&lt;/h2&gt;
&lt;p&gt;So... Late last night, after a long day of work, I decided I wasn't done programming, so I
started in on this project. I took an old Raspberry Pi that I'd already mounted in my
vintage Zenith cabinet stereo (that's a story for another day, and I'll have to tell you about
it!) and I began preparing it. Somehow, I'd ruined the SD card, so I chucked the original SD and
flashed a new one with the latest build of RaspberryOS. After I had the card flashed, I dropped
an empty file titled 'ssh' in the &lt;cite&gt;/boot&lt;/cite&gt; directory so that it would enable SSH on initial boot.&lt;/p&gt;
&lt;p&gt;Now, with SSH set up, and my new SD card plugged into the Pi, I powered it up and connected
remotely; updating the system with &lt;cite&gt;sudo apt-get update&lt;/cite&gt; and &lt;cite&gt;sudo apt-get upgrade -y&lt;/cite&gt; I had a
fresh install ready for my experimentation!&lt;/p&gt;
&lt;p&gt;Now, for the benefit of new tinkerers interested in VBAN setup on a Pi (and a way to jog my own
terrible memory sometime in the future), I'll try to illustrate the remaining steps as best I can
remember. I had to play with some trial and error, so I'm reordering some steps to make it more
clear and straight-forward, but I'll comment on some of the &amp;quot;hardships&amp;quot; I had after we get through
all of the steps. My process was centered around the installation instructions on the &lt;a class="reference external" href="https://github.com/quiniouben/vban"&gt;vban&lt;/a&gt;
project README, but I did deviate a little to get it working.&lt;/p&gt;
&lt;ol class="arabic"&gt;
&lt;li&gt;&lt;p class="first"&gt;After preparing my &amp;quot;fresh install,&amp;quot; I went ahead and installed the Raspberry Pi and Alsa
headers so that they'd show up for the installation.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$&lt;/span&gt;&amp;gt; sudo apt-get install raspberrypi-kernel-headers
&lt;span class="gp"&gt;$&lt;/span&gt;&amp;gt; sudo apt-get install libasound-dev
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;With my new headers installed, I was ready to clone the git repo and build it. I guess that at
this point, I &lt;em&gt;should&lt;/em&gt; mention that I'd previously installed git, but I suppose you might have
been able to infer that on your own. Anyway, I cloned the repo to my home folder:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$&lt;/span&gt;&amp;gt; git clone https://github.com/quiniouben/vban.git
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Now, I moved myself into that new directory with: &lt;cite&gt;cd vban&lt;/cite&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Before I could build the &lt;cite&gt;vban&lt;/cite&gt; system by following the instructions on the GitHub repo, I
needed to install the &lt;cite&gt;autoconf&lt;/cite&gt; tools so that the autoconfiguration scripts would function.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$&lt;/span&gt;&amp;gt; sudo apt-get install autotools-dev
&lt;span class="gp"&gt;$&lt;/span&gt;&amp;gt; sudo apt-get install autoconf
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;I then went ahead and followed the installation instructions from the &lt;cite&gt;vban&lt;/cite&gt; project README,
substituting a few extra arguments to satisfy the system requirements (Alsa only, no Pulse/Jack).&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$&lt;/span&gt;&amp;gt; ./autogen.sh
&lt;span class="gp"&gt;$&lt;/span&gt;&amp;gt; ./configure --enable-alsa --disable-pulseaudio --disable-jack      &lt;span class="c1"&gt;# Only using Alsa&lt;/span&gt;
&lt;span class="gp"&gt;$&lt;/span&gt;&amp;gt; make
&lt;span class="gp"&gt;$&lt;/span&gt;&amp;gt; make install
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;After I got all of that working, I was able to set up my Windows desktop running Banana Mixer
to stream to my Raspberry Pi using VBAN. I configured VBAN on my desktop to stream as such:&lt;/p&gt;
&lt;img alt="Windows VBAN server configuration." src="https://engineerjoe440.github.io/stanley-solutions-blog/images/vban_desktop.png" style="width: 800px;" /&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Then, I could simply issue the following command in my Raspberry Pi to start listening!&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$&lt;/span&gt;&amp;gt; vban_receptor -i &amp;lt;my-desktop-ip&amp;gt; -p &lt;span class="m"&gt;6980&lt;/span&gt; -s StereoPi -d front -q &lt;span class="m"&gt;0&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This meant that I'd listen for a stream of name &amp;quot;StereoPi&amp;quot; from my desktop with it's specific
IP address on port 6980. I'd then stream that audio to the &amp;quot;front&amp;quot; output in my Alsa config,
and (since this is a hard-wired Ethernet connection) I set the highest quality to reduce delay.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Viola! I've now begun sharing audio between my desktop and the Raspberry Pi!&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="another-dilemma"&gt;
&lt;h2&gt;Another Dilemma&lt;/h2&gt;
&lt;p&gt;Ah, but we weren't done yet! See, that command is blocking, meaning that if I close my SSH
connection, say good bye to audio! Drat!&lt;/p&gt;
&lt;p&gt;I decided that to fix this, I'd write a little systemd service, and keep it disabled, so that
I could start and stop it easily enough (so if I want to use other audio services, they won't
clash too terribly).&lt;/p&gt;
&lt;p&gt;So I wrote this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# vbanstereorx.service&lt;/span&gt;
&lt;span class="c1"&gt;# VBAN Receptor Stereo Service&lt;/span&gt;

&lt;span class="k"&gt;[Unit]&lt;/span&gt;
&lt;span class="na"&gt;Description&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;VBAN Stereo Receptor&lt;/span&gt;

&lt;span class="k"&gt;[Service]&lt;/span&gt;
&lt;span class="na"&gt;Type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;simple&lt;/span&gt;
&lt;span class="na"&gt;ExecStart&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;/usr/local/bin/vban_receptor  -i &amp;lt;my-desktop-ip&amp;gt; -p 6980 -s StereoPi -d front -q 0&lt;/span&gt;

&lt;span class="k"&gt;[Install]&lt;/span&gt;
&lt;span class="na"&gt;WantedBy&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;multi-user.target&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Then simply &amp;quot;installed&amp;quot; it with the following command:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$&lt;/span&gt;&amp;gt; cp vbanstereorx.service /etc/systemd/system/vbanstereorx.service
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now, I can just start or stop the reciever by issuing &lt;cite&gt;sudo systemctl start vbanstereorx&lt;/cite&gt; or
&lt;cite&gt;sudo systemctl stop vbanstereeorx&lt;/cite&gt;, respectively!&lt;/p&gt;
&lt;div class="section" id="the-other-challenges"&gt;
&lt;h3&gt;The Other Challenges&lt;/h3&gt;
&lt;p&gt;I'm afraid it all wasn't easy-peasy, and setup smooth; there were still a few hiccups.&lt;/p&gt;
&lt;p&gt;Right now, the biggest thing is that I believe Alsa is on its way out for the Raspberry
Pi, so I have a feeling that I'm gonna need to reform this at some point, but perhaps
that's just for the Pi4 for the time being? I'm not really sure... Anyone who might know,
&lt;a class="reference external" href="mailto:engineerjoe440&amp;#64;yahoo.com"&gt;hit me up&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The other issue that I ran into during installation was the use of autoconfig scripts and
RPi/Alsa headers. Since they weren't &lt;em&gt;explicitly&lt;/em&gt; called out as installation requisites,
I bumped into them, and had to take to Googling my way out of a corner. Wasn't bad, just
slowed me down.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="what-s-next"&gt;
&lt;h2&gt;What's next?&lt;/h2&gt;
&lt;p&gt;I'll have to save that for another post; another day. Just keep your eyes peeled!&lt;/p&gt;
&lt;/div&gt;
</content><category term="Raspberry Pi"></category><category term="Raspberry Pi"></category><category term="VBAN"></category><category term="Audio"></category><category term="Networking"></category><category term="Music"></category><category term="Home Automation"></category></entry><entry><title>pycev - A Python CEV Reader</title><link href="https://engineerjoe440.github.io/stanley-solutions-blog/pycev-a-python-cev-reader.html" rel="alternate"></link><published>2020-12-12T10:59:00-08:00</published><updated>2020-12-12T10:59:00-08:00</updated><author><name>Joe Stanley</name></author><id>tag:engineerjoe440.github.io,2020-12-12:/stanley-solutions-blog/pycev-a-python-cev-reader.html</id><summary type="html">&lt;p class="first last"&gt;Another new project? Well, why not? This time, we'll be tackling reading CEV files from SEL in Python.&lt;/p&gt;
</summary><content type="html">&lt;img alt="Introducing: pycev!" src="https://raw.githubusercontent.com/engineerjoe440/pycev/main/logo/pycev.png" style="width: 600px;" /&gt;
&lt;p&gt;Wait...&lt;/p&gt;
&lt;p&gt;Another new project?&lt;/p&gt;
&lt;p&gt;Yes. That's right. I'm starting another new project. But hey! There's a lot of framework
that needs to be introduced before I can start doing all the cool high-level stuff that we
all want to see and use. I mean, by now you should understand that I'm all about getting
the framework right. If you're still not sure, go read my rant about getting the framework
right... &lt;a class="reference external" href="https://blog.stanleysolutionsnw.com/write-framework-once.html"&gt;This is my rant on getting framework right.&lt;/a&gt;&lt;/p&gt;
&lt;div class="section" id="goal"&gt;
&lt;h2&gt;Goal:&lt;/h2&gt;
&lt;p&gt;So what's the plan here, anyway?&lt;/p&gt;
&lt;p&gt;Well, this project, &lt;cite&gt;pycev&lt;/cite&gt; (I've almost considered that it should be pronounced &amp;quot;pie-safe&amp;quot;, but
that's not how it looks, so we'll let that stew a while longer) will be a package for reading and
interpreting SEL Compressed EVent records. They're a proprietary (but open) format in which SEL
protective relays collect event information and &amp;quot;compress&amp;quot; it into a format that's easily read
by machines (computers).&lt;/p&gt;
&lt;p&gt;There's already a handful of projects out in the wild for reading COMTRADE records; which, if
you're unfamiliar are &amp;quot;&lt;em&gt;Common Format for Transient Data Exchange&lt;/em&gt;&amp;quot; files, and are supported by
many SEL relays in addition to a much broader number of other vendor devices. Trouble is, not
everyone uses COMTRADE, and comparatively, CEV files are a little simpler, and (in my opinion)
more straight-forward and robust. Perhaps the best Python project for reading COMTRADE files
is &lt;a class="reference external" href="https://github.com/dparrini/python-comtrade"&gt;Python Comtrade&lt;/a&gt;. That project shows great maturity and value. It also sees regular updates
and bugfixes as needed.&lt;/p&gt;
&lt;p&gt;Since it's such a well respected and mature project, I'd like to take it as inspiration for
&lt;cite&gt;pycev&lt;/cite&gt; and use it to help me realize the best API for the package so that the two libraries
could (potentially) be used interchangeably for various projects.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="what-s-first"&gt;
&lt;h2&gt;What's First?&lt;/h2&gt;
&lt;p&gt;Well, I guess starting the package development is first!&lt;/p&gt;
&lt;p&gt;I've already carved out a repository, and I've got something of a skeleton package put together.
I think the first step will be getting enough working that I can upload it to PyPI to reserve
the namespace. Then full development will need to come. There's a good handful of things that
need to be tackled:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Upload Project to PyPI&lt;/li&gt;
&lt;li&gt;Develop Core Functionality and Match API to that of &amp;quot;Python-Comtrade&amp;quot;&lt;/li&gt;
&lt;li&gt;Develop Automated Test Suite with Local Server and Various Existing CEV Files&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So that's the sort of roadmap I see before me. Now, the time-frame is still way up in the air;
so who knows whe this all will &lt;em&gt;actually&lt;/em&gt; happen. But here's hoping!&lt;/p&gt;
&lt;p&gt;If you're interested in checking in on the project, and would like to jump in and contribute,
have a little look at the &lt;a class="reference external" href="https://github.com/engineerjoe440/pycev"&gt;repository&lt;/a&gt;, and feel free to open an &lt;a class="reference external" href="https://github.com/engineerjoe440/pycev/issues"&gt;issue&lt;/a&gt; to start a conversation!&lt;/p&gt;
&lt;/div&gt;
</content><category term="Python"></category><category term="Python"></category><category term="SEL"></category><category term="CEV"></category><category term="Event"></category><category term="Record"></category><category term="Files"></category><category term="Power System"></category><category term="Analysis"></category></entry><entry><title>Sustainability in the News...</title><link href="https://engineerjoe440.github.io/stanley-solutions-blog/sustainability-in-the-news-december-2020.html" rel="alternate"></link><published>2020-12-02T19:45:00-08:00</published><updated>2020-12-02T19:45:00-08:00</updated><author><name>Joe Stanley</name></author><id>tag:engineerjoe440.github.io,2020-12-02:/stanley-solutions-blog/sustainability-in-the-news-december-2020.html</id><summary type="html">&lt;p class="first last"&gt;Recycled concrete and herbicide detecting transistors? Bring on the new sustainability-focused tech!&lt;/p&gt;
</summary><content type="html">&lt;p&gt;I want to get in the habit of writing up some brief articles more regularly to talk about
some of the more interesting articles and news that I've heard recently in the realm of
sustainability. Now, I'll grant, that I typically do my own sort of exploration(s) into
different sustainability projects and research, but I want to keep these articles focused
on what I hear is happening outside of my little pocket on Earth.&lt;/p&gt;
&lt;p&gt;Anyway... Here's what I've heard about new sustainability topics!&lt;/p&gt;
&lt;div class="section" id="recycled-concrete"&gt;
&lt;h2&gt;Recycled Concrete&lt;/h2&gt;
&lt;p&gt;Long has old concrete been a challenge for construction and demolition workers. Long has
the question arisen as: &amp;quot;So, now that we've torn it down; what do we do with it?&amp;quot; Well,
it turns out there might just be a solution! I was introduced to this brief article which
came from a scientific paper describing some research findings. You can look at the
&lt;a class="reference external" href="https://www.sciencedaily.com/releases/2020/11/201130150358.htm"&gt;recycled concrete article&lt;/a&gt; and see for yourself. For me, this is most exciting since it
means that &lt;em&gt;enormous&lt;/em&gt; amounts of waste concrete can be kept out of the landfill! Not to
mention that fewer resources may need to be used to maintain high-wear concrete surfaces
such as sidewalks for longer periods of time.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="transistors-detecting-herbicides"&gt;
&lt;h2&gt;Transistors Detecting Herbicides&lt;/h2&gt;
&lt;p&gt;Okay, now this one is really interesting; not that concrete &lt;em&gt;isn't&lt;/em&gt; interesting, it's just
that this one seems to fit into my area of expertise a little more (you know, electricity).&lt;/p&gt;
&lt;p&gt;This article on &lt;a class="reference external" href="https://www.sciencedaily.com/releases/2020/12/201201124142.htm"&gt;herbicide sensing transistors&lt;/a&gt; describes a scientific article that details
a new technology that's still being researched that would allow specific transistors to be
immersed in water or wastewater to detect certain levels of herbicides. Why is this
important? Well, research is continuing to show that significant levels of herbicides can
be dangerous to marine life including everything from flora to fauna. Both plants and
animals can suffer from high levels of herbicides. With this emerging tech, we could see
improved water and wastewater management such that industrial facilities and municipalities
may be able to monitor their output, and make more informed decisions to adapt their systems.&lt;/p&gt;
&lt;p&gt;Well, that's it for this go-around, but hopefully I can keep talking about some new
and emerging tech!&lt;/p&gt;
&lt;/div&gt;
</content><category term="Sustainability"></category><category term="Concrete"></category><category term="Transistor"></category><category term="Recycle"></category><category term="Herbicide"></category><category term="Sustainability"></category></entry><entry><title>Smart Christmas Trains for a Smart Home?</title><link href="https://engineerjoe440.github.io/stanley-solutions-blog/esp32-controlling-lionel-trains.html" rel="alternate"></link><published>2020-11-22T19:32:00-08:00</published><updated>2020-11-22T19:32:00-08:00</updated><author><name>Joe Stanley</name></author><id>tag:engineerjoe440.github.io,2020-11-22:/stanley-solutions-blog/esp32-controlling-lionel-trains.html</id><summary type="html">&lt;p class="first last"&gt;Finally, with my own home, I think I can return to my goal of having a Lionel train surround my Christmas tree, but perhaps I need to consider how I'm going to automate it...&lt;/p&gt;
</summary><content type="html">&lt;p&gt;For any railfans, a train surrounding a Christmas tree is something of a given. But I recently
came up with a conundrum...&lt;/p&gt;
&lt;p&gt;See, my house is becoming more and more of a &amp;quot;smart home,&amp;quot; and I'd like the Christmas holiday
to be much of the same. Now, that's pretty easy when it comes to the lights. Throw a smart-plug
running &lt;a class="reference external" href="https://tasmota.github.io/docs/"&gt;Tasmota&lt;/a&gt; firmware (a free and open source alternative to the proprietary solutions) at
those lights, and let the magic commence. But for toy trains around the tree? That's a bit of a
different story.&lt;/p&gt;
&lt;div class="section" id="the-problem"&gt;
&lt;h2&gt;The problem:&lt;/h2&gt;
&lt;p&gt;So, why couldn't I just throw another smart plug at my toy trains?&lt;/p&gt;
&lt;p&gt;Well, I guess I &lt;em&gt;could&lt;/em&gt;, but I don't really think that's the greatest idea. Reason being that
turning the trains on and off in a binary fashion (all or nothing) might not be great on them,
and wouldn't be the most pleasant sound either. I guess I could look at some of the solutions
that Lionel markets like their &lt;a class="reference external" href="http://www.lionel.com/brands/legacy/"&gt;Legacy&lt;/a&gt; or TMCC options, but that would mean a lot of new
purchases, research, and maybe some other annoyances that I'm just not too excited to deal with.
So, needless to say, that option's off the list too. Perhaps one of Lionel's new bluetooth
options? I guess, but that's kind of boring, don't you think? And to boot, if I were to follow
that route, I'd certainly need to buy a new locomotive, and I'd likely need to hack the remote.
Another option that I'm just not thrilled about.&lt;/p&gt;
&lt;p&gt;Hmm... well, what's left? My pickyness hasn't left me with many options, but I think there's
still &lt;em&gt;got to be something&lt;/em&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="think-think-think"&gt;
&lt;h2&gt;Think. Think. Think.&lt;/h2&gt;
&lt;p&gt;I spent some time thinking about my alternatives today, and well, let me just walk you through
that.&lt;/p&gt;
&lt;p&gt;I started out thinking about the toy train transformer itself. That's all it really is, a
transformer; well, &lt;em&gt;variac&lt;/em&gt; specifically. A variac is just a variable transformer, essentially
a graphine brush that moves across the windings on the secondary side of a transformer. This
varying motion provides the variable &amp;quot;tap&amp;quot; on the transformer, and allows it to acheive a
voltage that can be varied and controlled to change the speed of the connected trains.&lt;/p&gt;
&lt;p&gt;It's pretty simple really, Lionel and others pioneered this practice for the model and toy scene
nearly a century ago. Trouble is, the transformers (in my case, a Lionel ZW transformer) aren't
exactly built for modification, and like I mentioned earlier, I don't exactly idolize the thought
of tearing apart my toy train controls just to make them &amp;quot;smarter.&amp;quot;&lt;/p&gt;
&lt;img alt="Here's what a variac looks like..." src="https://images-na.ssl-images-amazon.com/images/I/91SL6j6kkNL._AC_SX425_.jpg" style="width: 350px;" /&gt;
&lt;p&gt;I spent some time looking around for a cheap (I'd like to stay under $100 since I need to buy gifts,
too!) variac that is digitally controlled. No dice.&lt;/p&gt;
&lt;p&gt;I guess I could buy a big variac and hook up a motor and...&lt;/p&gt;
&lt;p&gt;No.&lt;/p&gt;
&lt;p&gt;Not gonna fly.&lt;/p&gt;
&lt;p&gt;Hmm... well, what else?&lt;/p&gt;
&lt;p&gt;Another option is a rheostat. For those of us who either forgot or skipped electrical machines in
college; a rheostat is basically a variable resistor. Similar to a variac, rheostats are typically
made from some form of wound wire that has a varying resistance as the user employs a sweeper to
move from one end to the other. That's really the big difference, and the reason it's not just
called a variable resistor, or even a potentiometer. Rheostats are basically &amp;quot;variable resistors
on steroids,&amp;quot; built for high-energy systems.&lt;/p&gt;
&lt;img alt="And this is a rheostat..." src="https://cdn.images.fecom-media.com/A49116.jpg" style="width: 350px;" /&gt;
&lt;p&gt;So... yours truly started poking around online looking (once again) for a cheap electrical
device beefy enough to run toy trains, but not so big that it would break the bank. I bummed around
through Amazon with no luck, but after a quick search on eBay, I found something pretty enticing...&lt;/p&gt;
&lt;p&gt;Guess which toy train company just happened to make rheostats way back in the day?&lt;/p&gt;
&lt;p&gt;That's right! Lionel rheostats!&lt;/p&gt;
&lt;img alt="A Lionel rheostat!" src="https://image.invaluable.com/housePhotos/SeymourAuctions/95/563895/H4246-L72135272.jpg" style="width: 450px;" /&gt;
&lt;/div&gt;
&lt;div class="section" id="a-solution"&gt;
&lt;h2&gt;A solution?&lt;/h2&gt;
&lt;p&gt;So, is that it? Just like that? Problem solved?&lt;/p&gt;
&lt;p&gt;Well, yes; but also, no.&lt;/p&gt;
&lt;p&gt;Lionel rheostats seem to be running about $10 and about as much in shipping on eBay at the time of
writing, so that's really good news. Not to mention the fact that they were built &lt;em&gt;specifically
for toy trains&lt;/em&gt; (score!).&lt;/p&gt;
&lt;p&gt;But what about the fact that it's mechanical, not digital?&lt;/p&gt;
&lt;p&gt;I knew you'd ask that...&lt;/p&gt;
&lt;p&gt;Well, here, the big difference is the form factor. These rheostats are significantly easier to
interface with. Since they're linear, a single piece of all-thread-rod and a little stepper motor
could quite easily do just what I need. I could connect a little stepper motor to an ESP32/ESP8266
and hook that up to a Lionel rheostat via all-thread and a moving nut with a sweeper attached.&lt;/p&gt;
&lt;p&gt;Easy-peasy! Well, sort-of.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="what-s-next"&gt;
&lt;h2&gt;What's next?&lt;/h2&gt;
&lt;p&gt;Well, there's still quite a bit left on this one, and a good chance I won't actually do anything
about it this Christmas. Still, it's an exciting idea, and I'm definitely going to pursue it!&lt;/p&gt;
&lt;p&gt;That's all for now, but stay tuned!&lt;/p&gt;
&lt;p&gt;Who knows, maybe I'll even throw a whistle control on there!!!&lt;/p&gt;
&lt;/div&gt;
</content><category term="ESP32"></category><category term="ESP32"></category><category term="IOT"></category><category term="Smart-Home"></category><category term="Automation"></category><category term="WIFI"></category><category term="Lionel"></category><category term="Vintage"></category><category term="Variac"></category></entry><entry><title>Reading Data with selprotopy</title><link href="https://engineerjoe440.github.io/stanley-solutions-blog/reading-data-with-selprotopy.html" rel="alternate"></link><published>2020-11-22T19:02:00-08:00</published><updated>2020-11-22T19:02:00-08:00</updated><author><name>Joe Stanley</name></author><id>tag:engineerjoe440.github.io,2020-11-22:/stanley-solutions-blog/reading-data-with-selprotopy.html</id><summary type="html">&lt;p class="first last"&gt;Finally reading some data from SEL relays using Python! Now to get the controls working...&lt;/p&gt;
</summary><content type="html">&lt;p&gt;Still deep in the process of getting a fully functional SEL protocol binding suite in Python, but,
hey! At least I can write a little update on what's been going on!&lt;/p&gt;
&lt;p&gt;(if you haven't read my article on what &lt;cite&gt;selprotopy&lt;/cite&gt; is, take a look &lt;a class="reference external" href="https://blog.stanleysolutionsnw.com/sel-protocol-coming-to-python.html"&gt;here&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;In the past month of so, I've been able to really &amp;quot;whack out&amp;quot; some reasonable functionality. In
fact, I've been able to poll an SEL-351 for both digital and analog data. For those of you who
are a little familiar with SEL protocol, that means that I've been able to create a parser for
the relay definition block, and the various fast-meter blocks in addition to the DNA definition.
To boot, I've even tested (albeit breifly) on an SEL-751 and saw pretty promissing results.&lt;/p&gt;
&lt;p&gt;That's all pretty good, but the eventual goal (well, &lt;em&gt;my&lt;/em&gt; eventual goal) is to be able to poll
regularly and send commands/controls as needed. I'd also like to be able to read CEV reports
(more on that in the future) and perhaps the relay's SER (Sequential Event Recorder). So, is any
of the control functionality working yet? Not really...&lt;/p&gt;
&lt;p&gt;I've gotten to the point where the commands &lt;em&gt;should&lt;/em&gt; be configured and sent correctly to the
relay, but no dice.&lt;/p&gt;
&lt;p&gt;Somewhere along the lines, I've clearly &amp;quot;bugged&amp;quot; something up. So now, it's really just a matter
of doing some additional debugging. Hmm... will need to get started on that. Trouble is, I've got
lots of other fun projects to work on too!!!&lt;/p&gt;
&lt;div class="section" id="c-mon-joe-wrap-this-thing-up"&gt;
&lt;h2&gt;C'mon, Joe; wrap this thing up...&lt;/h2&gt;
&lt;p&gt;Okay, so I'm rambling; at this point, I'm pretty excited to say that I've got some polling working
with &lt;cite&gt;selprotopy&lt;/cite&gt;, but there's clearly some more to work on. I'm hoping that I can get commands
working here pretty soon, and then I've got a handful of options as the next step.&lt;/p&gt;
&lt;div class="section" id="i-could"&gt;
&lt;h3&gt;I could:&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;create a system to read the SER&lt;/li&gt;
&lt;li&gt;get the CEV reading figured out&lt;/li&gt;
&lt;li&gt;start testing on a variety of SEL relays (but this would require testing a FOSS project at SEL,
so I'm still not sure about this one)&lt;/li&gt;
&lt;li&gt;get an automated test suite built on my local GitLab instance&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Clearly some more work coming, so stay tuned!&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</content><category term="Python"></category><category term="Protocols"></category><category term="SEL"></category><category term="Python"></category><category term="Communications"></category><category term="Metering"></category></entry><entry><title>Introducing selprotopy</title><link href="https://engineerjoe440.github.io/stanley-solutions-blog/sel-protocol-coming-to-python.html" rel="alternate"></link><published>2020-09-20T11:07:00-07:00</published><updated>2021-02-14T16:00:00-08:00</updated><author><name>Joe Stanley</name></author><id>tag:engineerjoe440.github.io,2020-09-20:/stanley-solutions-blog/sel-protocol-coming-to-python.html</id><summary type="html">&lt;p class="first last"&gt;The SEL Protocol binding suite for Python is finally coming...&lt;/p&gt;
</summary><content type="html">&lt;p&gt;SEL Protocol is finally coming for Python. That's right, you've heard correctly; it's coming.&lt;/p&gt;
&lt;img alt="The new... `selprotopy`!" src="https://raw.githubusercontent.com/engineerjoe440/sel-proto-py/master/logo/selprotopy.png" style="width: 350px;" /&gt;
&lt;p&gt;But, what is SEL Protocol anyway?&lt;/p&gt;
&lt;p&gt;Well, it's a communications protocol, or standard, that was developed by &lt;a class="reference external" href="https://selinc.com/"&gt;SEL&lt;/a&gt; to support
fast data communications between protective electric relays (the devices that monitor the
power grid for faults) and communications processors. It was developed in the early '90s to
help improve communication support of devices to allow users to monitor protective relays
from a distance, and to perform control operations without being present.&lt;/p&gt;
&lt;p&gt;Anyway...&lt;/p&gt;
&lt;p&gt;I've begun writing &lt;a class="reference external" href="https://github.com/engineerjoe440/selprotopy"&gt;selprotopy&lt;/a&gt; which will be a protocol driver supporting SEL protocol in
Python. This means that users will be able to integrate solutions with SEL relays using
Python!&lt;/p&gt;
&lt;p&gt;Obviously, there's a lot to come, so this is not much more than an early announcement.
If you're interested in contributing, feel free to drop me a message! I'd love to interact!&lt;/p&gt;
</content><category term="Python"></category><category term="Python"></category><category term="Protocols"></category><category term="SEL"></category></entry><entry><title>Write a Good Framework - ONCE.</title><link href="https://engineerjoe440.github.io/stanley-solutions-blog/write-framework-once.html" rel="alternate"></link><published>2020-09-20T10:26:00-07:00</published><updated>2020-09-20T10:26:00-07:00</updated><author><name>Joe Stanley</name></author><id>tag:engineerjoe440.github.io,2020-09-20:/stanley-solutions-blog/write-framework-once.html</id><summary type="html">&lt;p class="first last"&gt;We all want that next great application; NOW. And we KNOW that we can just hash out this great new thing. But where does that leave us the next time we want to do the same sort of thing?&lt;/p&gt;
</summary><content type="html">&lt;p&gt;C'mon, every developer has had that epiphany moment:&lt;/p&gt;
&lt;blockquote&gt;
&amp;quot;I know, I can just write this thing now, and I'll have exactly what I need, and I'll
never need to touch it again; I'll never need to add more to it, and it will never
change.&amp;quot;&lt;/blockquote&gt;
&lt;p&gt;Yeah. Right.&lt;/p&gt;
&lt;p&gt;We wish it worked that way, but let's be honest. Projects develop, add scope, change, and
sometimes, they morph into something new entirely. Actually, that's often where great code
comes from. The best projects are the butterflies of the development world. They start as
a simple little caterpillar, but at some point along the line, they change into something
far more elegant and beautiful.&lt;/p&gt;
&lt;p&gt;That's why I'm writing this plea to developers out there in the &amp;quot;real world.&amp;quot; We know that
you could just write this little thing, but isn't it nice to get the &lt;em&gt;framework&lt;/em&gt; right the
first time so that when you need to revisit that code, it'll be so much easier. Or, better
yet, isn't it better to prepare the project for the &amp;quot;&lt;em&gt;next guy&lt;/em&gt;&amp;quot; who comes along to make
your framework into something incredible.&lt;/p&gt;
&lt;p&gt;I guess I've devolved into rambling, as usual, but my point is this: when you spend the time
to develop the framework &lt;em&gt;the right way&lt;/em&gt; the first time, you and all of your colleagues will
thank you. It will make things just &lt;strong&gt;that much easier&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;I've had a handful of experiences with this myself. I started on a couple projects at work
where I developed something that I &lt;em&gt;thought&lt;/em&gt; was a great system, and didn't really require
a superior framework. This inevitably saved time in the short-term, but it bit me later.&lt;/p&gt;
&lt;p&gt;As it turned out, I recently realized that I was re-writing the same code over, and over,
and over again every time I had to touch the code. In the end, as it seems, I didn't spend
enough time writing the framework to begin, and that hurt me.&lt;/p&gt;
&lt;div class="section" id="here-s-the-takeaway"&gt;
&lt;h2&gt;Here's the Takeaway:&lt;/h2&gt;
&lt;p&gt;Long story short, we all love just &amp;quot;pulling in&amp;quot; a library that does the &amp;quot;dirty work&amp;quot; for us.
I think it's time that we focus on getting those libraries right from the onset, so we don't
need to keep re-doing our own work, or the work of others.&lt;/p&gt;
&lt;p&gt;What do you think?&lt;/p&gt;
&lt;p&gt;I'd say drop me a note in the comments, but I haven't quite gotten that set up yet. So, for
now, just keep fighting the good fight, and &lt;em&gt;write those libraries!&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
</content><category term="Development"></category><category term="Python"></category><category term="IEC-61131"></category><category term="Development"></category></entry><entry><title>Wildfire Prevention with Sound</title><link href="https://engineerjoe440.github.io/stanley-solutions-blog/detecting-fires-with-sound.html" rel="alternate"></link><published>2020-09-10T20:39:00-07:00</published><updated>2020-09-10T20:39:00-07:00</updated><author><name>Joe Stanley</name></author><id>tag:engineerjoe440.github.io,2020-09-10:/stanley-solutions-blog/detecting-fires-with-sound.html</id><summary type="html">&lt;p class="first last"&gt;&amp;quot;Where there's smoke, there's fire...&amp;quot; Right? What about if sound were a part of it too?&lt;/p&gt;
</summary><content type="html">&lt;p&gt;I'm very pleased to say that I'm helping to support some really exciting research at
the &lt;a class="reference external" href="https://uidaho.edu"&gt;University of Idaho&lt;/a&gt; this year.&lt;/p&gt;
&lt;p&gt;A few years ago, a couple of my classmates worked on
a truly exciting project that utilized some relatively new sensory technology in conjunction
with some wireless network technology (Zigbee radios) to communicate infrasound (below the
audible range for humans) signatures back for scientists to analyze. These signatures will
inform scientists and firefighters, alike, when (and where) a wildfire has started!&lt;/p&gt;
&lt;p&gt;Now, this was all well and good, but the &lt;a class="reference external" href="http://mindworks.shoutwiki.com/wiki/Infrasound_in_wildfire"&gt;project&lt;/a&gt; lost funding. Yep. Just like that.&lt;/p&gt;
&lt;p&gt;That's why I'm so excited to be getting involved. We've already got a team of four fantastic
engineers. A mechanical engineer, two electrical engineers, and a computer scientist. With
luck the group will be able to start some fantastic research that could eventually lead to a
truly exciting product that may help wildland firefighters around the country (and around the
world) find fires &lt;em&gt;faster&lt;/em&gt; and with greater accuracy.&lt;/p&gt;
&lt;p&gt;The group is just getting started, but I'm very excited to see where things go.&lt;/p&gt;
&lt;div class="section" id="the-techy-side"&gt;
&lt;h2&gt;The Techy Side&lt;/h2&gt;
&lt;p&gt;So how is this supposed to work anyway?&lt;/p&gt;
&lt;p&gt;Well, we've all heard stories about how animals can sense an impending natural disaster, and
in fact, that's quite true with wildfire. Most wild game (and many domesticated species too)
have much more astute hearing sense. In fact, they can hear the low-frequency sounds that
we're unable to hear.&lt;/p&gt;
&lt;p&gt;The sensors we're hoping to utilize will allow our digital system to detect the low-frequency
rumble of wild fire, then with digital signal processing, we'll aim to identify audio
signatures unique to wildfire. With this, we'll be able to detect fire!&lt;/p&gt;
&lt;p&gt;Further, the goal will be to create a mesh-network of devices covering the forest floor in
areas such that devices will be able to communicate amongst themselves to precisely locate
the fire, and to report it to the authorities quickly!&lt;/p&gt;
&lt;/div&gt;
</content><category term="capstone"></category><category term="sound"></category><category term="audio"></category><category term="wildfire"></category><category term="protection"></category></entry><entry><title>IEC 61131-3 Syntax Highlighting with highlight.js</title><link href="https://engineerjoe440.github.io/stanley-solutions-blog/iec-61131-syntax-highlighting.html" rel="alternate"></link><published>2020-09-01T23:00:00-07:00</published><updated>2020-09-01T23:38:00-07:00</updated><author><name>Joe Stanley</name></author><id>tag:engineerjoe440.github.io,2020-09-01:/stanley-solutions-blog/iec-61131-syntax-highlighting.html</id><summary type="html">&lt;p class="first last"&gt;Adding context to 61131 code snippets with &lt;cite&gt;highlight.js&lt;/cite&gt;.&lt;/p&gt;
</summary><content type="html">&lt;p&gt;I've been investigating some new resources for high-level documentation, including
automated presentation builders, and along the way, a question arose.&lt;/p&gt;
&lt;p&gt;If I want to demonstrate code examples for IEC 61131-3, is there a way that I can provide
syntax highlighting so that readers will be able to understand the material more clearly?&lt;/p&gt;
&lt;p&gt;So what is syntax highlighting anyway? Well, for code snippets, syntax highlighting uses
various colors and fonts to isolate the unique keywords, operators, and other items that
are standard in that particular programming language. I'll show an example here momentarily.
This is very useful because it allows readers to quickly interpret what the code is
intentionally doing.&lt;/p&gt;
&lt;p&gt;I was fortunate enough that I was able to find a project that was already providing syntax
highlighting for IEC 61131-3 in the &lt;cite&gt;highlight.js&lt;/cite&gt; project framework (though not natively)
and thus, I could leverage existing work! Trouble is, since it's not already a native
&amp;quot;language&amp;quot; it comes with its own set of challenges. The source of this highlighter comes
from the &lt;a class="reference external" href="https://github.com/highlightjs/highlightjs-structured-text"&gt;GitHub highlightjs Project&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;My challenge was identifying an effective way of declaring the language so that I could
use it with &lt;a class="reference external" href="https://github.com/marp-team/marpit"&gt;Marpit&lt;/a&gt; which is part of the Marp project; a system built to convert
markdown files to HTML or PPTX presentations. (Be on the lookout for an upcoming article
on this topic.)&lt;/p&gt;
&lt;div class="section" id="solution"&gt;
&lt;h2&gt;Solution&lt;/h2&gt;
&lt;p&gt;After much trial and tribulation, I finally realized a solution. Since I was using
&lt;cite&gt;highlight.js&lt;/cite&gt; as a required module in the marp framework, I could simply add the language
definition and register it accordingly. Here are the steps I took to modify my installation
to make it work as I wished.&lt;/p&gt;
&lt;ol class="arabic"&gt;
&lt;li&gt;&lt;p class="first"&gt;Locate existing highlight.js installation location by finding dependent module (in my
case marp). Then open directory (since I'm using Windows, I can use
&lt;cite&gt;Explorer &amp;lt;path/to/marp/directory&amp;gt;&lt;/cite&gt;&lt;/p&gt;
&lt;img alt="Identify the install location." src="https://engineerjoe440.github.io/stanley-solutions-blog/images/61131-highlighting/cmd-view.png" /&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Navigate to the directory containing the module of interest, then navigate to the
&lt;cite&gt;node_modules/highlight.js&lt;/cite&gt; folder underneath the desired module. In my case, since
I'm using marp-cli, I navigated to
&lt;cite&gt;node_modules/&amp;#64;marp-team/marp-cli/node_modules/highlight.js/lib&lt;/cite&gt;&lt;/p&gt;
&lt;img alt="Locate the `index.js` file for modification." src="https://engineerjoe440.github.io/stanley-solutions-blog/images/61131-highlighting/explorer-view.png" /&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Open the &lt;cite&gt;index.js&lt;/cite&gt; file in a text editor and add a new line to register the &lt;cite&gt;iecst&lt;/cite&gt;
language.&lt;/p&gt;
&lt;img alt="Registering the new language." src="https://engineerjoe440.github.io/stanley-solutions-blog/images/61131-highlighting/register-language.png" /&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Finally, navigate to the languages folder and add the &lt;cite&gt;iecst.js&lt;/cite&gt; file. Here, for my
application, I had to make some modifications (which I documented fully in an &lt;a class="reference external" href="https://github.com/highlightjs/highlightjs-structured-text/issues/9#issuecomment-685266264"&gt;issue&lt;/a&gt;
and &lt;a class="reference external" href="https://github.com/highlightjs/highlightjs-structured-text/pull/10"&gt;pull request&lt;/a&gt; on the source repository).&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class="section" id="summary"&gt;
&lt;h2&gt;Summary&lt;/h2&gt;
&lt;p&gt;To make this long story longer, I'll be writing more later to document how my Marp
integration comes along. For the meantime, here's the takeaway:&lt;/p&gt;
&lt;p&gt;Syntax highlighting &lt;em&gt;does&lt;/em&gt; exist for IEC 61131-3, and it'll become easier to implement
going forward!&lt;/p&gt;
&lt;p&gt;Oh, and how about what that syntax-highlighted code? What does it look like anyway?&lt;/p&gt;
&lt;p&gt;Have a look for yourself!&lt;/p&gt;
&lt;img alt="An example of (nonsense) syntax-highlighted 61131 code." src="https://engineerjoe440.github.io/stanley-solutions-blog/images/61131-highlighting/61131example.png" /&gt;
&lt;/div&gt;
</content><category term="IEC-61131-3"></category><category term="iec-61131-3"></category><category term="documentation"></category></entry><entry><title>A Picture is Worth a Thousand Words</title><link href="https://engineerjoe440.github.io/stanley-solutions-blog/making-bitmap-images-from-bytes.html" rel="alternate"></link><published>2020-08-21T08:49:00-07:00</published><updated>2020-09-01T11:42:00-07:00</updated><author><name>Joe Stanley</name></author><id>tag:engineerjoe440.github.io,2020-08-21:/stanley-solutions-blog/making-bitmap-images-from-bytes.html</id><summary type="html">&lt;p class="first last"&gt;Making images and plotting might just be possible in real-time-controllers.&lt;/p&gt;
</summary><content type="html">&lt;p&gt;I was introduced to a very nice gentleman about a year ago who was demonstrating some
logic that created a .PNG file to demonstrate fault currents easily, and could be
attached in-line as part of an email body. What was so interesting to me is that this
all part of some logic that originated on an &lt;a class="reference external" href="https://selinc.com/products/3530/"&gt;SEL RTAC&lt;/a&gt; using some of the functionality
in one of the many IEC 61131-3 libraries that are maintained by myself and the other
developers in the Automation Controllers Group.&lt;/p&gt;
&lt;p&gt;Now, the trouble with what this gentleman shared with me, is the reliance on an external
server to process the .CEV and &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Comtrade#:~:text=COMTRADE%20(Common%20format%20for%20Transient,to%20transient%20power%20system%20disturbances."&gt;COMTRADE&lt;/a&gt; files generated by monitored protective relays.
That was all well and good, but I still wasn't quite satisfied since there was a certain
amount of reliance on some other device. I wanted something better.&lt;/p&gt;
&lt;p&gt;I suppose at this point, I should take a step back. For those who don't eat, sleep, and
breath power systems engineering and electrical power system protection, an &amp;quot;event record&amp;quot;
is something of a novel idea. So what the h-e-double-hockey-sticks is an &amp;quot;event record?&amp;quot;&lt;/p&gt;
&lt;p&gt;I'm glad you've asked.&lt;/p&gt;
&lt;p&gt;Well, a fault on a power system (like when you run into a power pole and it knocks down
one of the wires - those are bad days) causes all sorts of &amp;quot;bad behavior&amp;quot; on the electrical
system, and that bad behavior can be monitored and measured. It's what we use in the
traditional sense to detect faults in the first place and make a decision to open an
electrical breaker to shut off the power. Remember when you plugged in too many Christmas
lights and the breaker popped? It's the same idea, just at a much higher degree of accuracy.&lt;/p&gt;
&lt;p&gt;So &amp;quot;events&amp;quot; have certain behavior, and engineers are often interested in characterizing
that behavior so that they can better understand not only what happened, but how it could
be prevented going forward. Back when Dr. Ed Schweitzer first invented the SEL-21 protective
relay (a conversation for another day), he added a very nifty little feature called &amp;quot;event
recording.&amp;quot; It added the ability to record information about the event when it occurred
so that someone could go back and analyze it at a later time. These event records contain
a lot of information, and they require special software to open them, to interpret them,
etcetera. Here's an example of what an event record might look like. This was taken from
a technical paper written titled &amp;quot;Numerical model framework of power quality events&amp;quot; by
Rodney Tan and Vigna Ramachandaramurthy; the full paper's linked below, so take a look if
you're so inclined!&lt;/p&gt;
&lt;img alt="An example power system fault &amp;quot;Event Record&amp;quot;." src="https://engineerjoe440.github.io/stanley-solutions-blog/images/power-system-fault.png" /&gt;
&lt;p&gt;&lt;a class="reference external" href="https://www.researchgate.net/publication/290451701_Numerical_model_framework_of_power_quality_events"&gt;Tan, Rodney &amp;amp; Ramachandaramurthy, Vigna K.. (2010). Numerical model framework of power
quality events. 43. 30-47.&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Soooo, the idea that this gentleman and his team had crafted was to extract the
most interesting portion of the information and plug that into an image that could be made
part of an email. This way, a technician could easily look at the image and quickly make
decisions without having to load the full event record on a computer. This full analysis
could still be done later, but having the image available in the email might give an
engineer the ability to make quick decisions to help restore power to homes and families
more quickly!&lt;/p&gt;
&lt;p&gt;I've recently completed some research where I've been able to effectively create a simple
RGB image in the Bitmap format (.BMP file) so that it can be used and interpreted by most
any computer available today. And should certainly allow for direct inclusion in emails.&lt;/p&gt;
&lt;p&gt;Ultimately, this means that there's a good chance that technicians could effectively see
the report of an event without any advanced software, simply by opening their email client
on their smart phone. Talk about convenience. I've been doing some development and testing
and I found great value in this article from technical-recipes.com:&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://www.technical-recipes.com/2011/creating-bitmap-files-from-raw-pixel-data-in-c/"&gt;https://www.technical-recipes.com/2011/creating-bitmap-files-from-raw-pixel-data-in-c/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I hope that I'll be sharing more as I fully flesh out some design where I can effectively
create plots in a byte-array that can be stored as an image.&lt;/p&gt;
</content><category term="IEC-61131-3"></category><category term="iec61131-3"></category><category term="automation"></category></entry><entry><title>We're going live.</title><link href="https://engineerjoe440.github.io/stanley-solutions-blog/we're-going-live.html" rel="alternate"></link><published>2020-08-21T08:35:00-07:00</published><updated>2020-08-21T08:35:00-07:00</updated><author><name>Joe Stanley</name></author><id>tag:engineerjoe440.github.io,2020-08-21:/stanley-solutions-blog/we're-going-live.html</id><summary type="html">&lt;p class="first last"&gt;Let the automation begin... Just stand back.&lt;/p&gt;
</summary><content type="html">&lt;p&gt;I'm imagining the sound of an old-school electric motor grinding its way up to nominal
speed. Can you hear it? That low groan trying ever-so-hard to come up to a comfortable
range.&lt;/p&gt;
&lt;p&gt;I suppose I should step back and introduce myself. I'm Joe Stanley, at the time of writing,
I'm twenty-three years old, and a graduate of the University of Idaho with both a Bachelors
and Masters in Electrical Engineering. I work with Schweitzer Engineering Laboratories (SEL)
in Pullman, Washington. I spend far too much time trying to automate things that would have
been faster to do by hand; but I guess that's engineering. I'm an avid Pythonista, and I'm
always trying to &amp;quot;convert&amp;quot; others into the language. I also spend a great deal of time
developing and maintaining IEC 61131-3 libraries for SEL.&lt;/p&gt;
&lt;p&gt;I have far too many ideas and thoughts, so I think it's time to start sharing them. If it's
somewhere on the scale between sustainability and automation, I'm probably interested in it.&lt;/p&gt;
&lt;p&gt;My hope is that I might start sharing thoughts, ideas, projects, and guides here on this
blog. Now, I'm sure you can hear that motor grinding up to speed!&lt;/p&gt;
</content><category term="automation"></category><category term="automation"></category><category term="python"></category><category term="iec61131-3"></category></entry></feed>