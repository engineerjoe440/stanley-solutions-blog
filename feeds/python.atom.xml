<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Stanley Solutions Blog - Python</title><link href="https://engineerjoe440.github.io/stanley-solutions-blog/" rel="alternate"></link><link href="https://engineerjoe440.github.io/stanley-solutions-blog/feeds/python.atom.xml" rel="self"></link><id>https://engineerjoe440.github.io/stanley-solutions-blog/</id><updated>2021-11-25T14:01:00-08:00</updated><subtitle>Engineering and creativity - all under one hat.</subtitle><entry><title>Automating Python Releases with GitHub Actions</title><link href="https://engineerjoe440.github.io/stanley-solutions-blog/automating-python-releases-with-github-actions.html" rel="alternate"></link><published>2021-11-25T14:01:00-08:00</published><updated>2021-11-25T14:01:00-08:00</updated><author><name>Joe Stanley</name></author><id>tag:engineerjoe440.github.io,2021-11-25:/stanley-solutions-blog/automating-python-releases-with-github-actions.html</id><summary type="html">&lt;p&gt;I'm pretty lazy... We've covered that already, but wouldn't it be exceptionally nice if I could make GitHub automate Python package releases for me? Lets do that...&lt;/p&gt;</summary><content type="html">&lt;p&gt;Oh yes. I'm lazy.&lt;/p&gt;
&lt;p&gt;Haven't we established that, yet? Well, we're going to hit that nail home with this topic...&lt;/p&gt;
&lt;p&gt;We've established previously that I manage a number of random Python packages, including &lt;em&gt;ElectricPy&lt;/em&gt;, &lt;em&gt;SELProtoPy&lt;/em&gt;, and &lt;em&gt;PyCEV&lt;/em&gt;.
I've come to the realization that I need all the help I can get with releasing updates on a regular basis. So... How shall we do
that?&lt;/p&gt;
&lt;h3&gt;Where to Start?&lt;/h3&gt;
&lt;p&gt;I decided that I needed this for &lt;em&gt;ElectricPy&lt;/em&gt; first. So let's start with figuring out what we want to do:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Identify the Current ElectricPy Version from the Source Code (bail out if the version is the same or older than what's previously been released)&lt;/li&gt;
&lt;li&gt;Create a Tag that Matches the ElectricPy Version, then Push that to GitHub&lt;/li&gt;
&lt;li&gt;Build the Python Package as a Source-Code Bundle, and as a &lt;a href="https://pythonwheels.com"&gt;Python Wheel&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Push the Packages to the Python Package Index (PyPI)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So those are the primary requirements. Now, let's work out how we're going to do it. I know that I want to use GitHub actions to
do this whole thing. So let's start there.&lt;/p&gt;
&lt;h3&gt;What are GitHub Actions, Anyway?&lt;/h3&gt;
&lt;p&gt;Well, GitHub actions are GitHub's way of providing CI/CD systems. Essentially, providing Linux-container based workflows that are
defined through YAML description files. The YAML (which stands for Yet Another Mark-up Language) files define what container base
should be used, and what the steps need to be completed.&lt;/p&gt;
&lt;h3&gt;Are there any Read-to-Go GitHub Actions?&lt;/h3&gt;
&lt;p&gt;Well, yes... But, actually no.&lt;/p&gt;
&lt;p&gt;There's quite a few pretty good actions available in the community, but getting everything &lt;em&gt;just&lt;/em&gt; right is a bit more tricky. Why, you
ask? Well, they all completed one or two of those actions I'd outlined above, but they didn't cover the whole list. So, I decided to
glue them all together with a bit of Python!&lt;/p&gt;
&lt;h3&gt;Start by Identifying the Version&lt;/h3&gt;
&lt;p&gt;We need to pick the version out of the ElectricPy package, and then we need to double-check that it's not already used, or older than
the most-up-to-date version. So I built a simple little script:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# Release Versioning Support Script&lt;/span&gt;
&lt;span class="c1"&gt;# Joe Stanley | 2021&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;requests&lt;/span&gt;

&lt;span class="n"&gt;USERNAME&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;engineerjoe440&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;REPO&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;electricpy&amp;#39;&lt;/span&gt;

&lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;electricpy&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;ep&lt;/span&gt;
&lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="ne"&gt;ImportError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;
    &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;insert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getcwd&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
    &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;electricpy&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;ep&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;requests&lt;/span&gt;

&lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;requests&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;https://api.github.com/repos/&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;USERNAME&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;/&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;REPO&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;/releases/latest&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;latest&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="p"&gt;()[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="ne"&gt;Exception&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;latest&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;0.0.0&amp;#39;&lt;/span&gt;

&lt;span class="c1"&gt;# Verify Version is Newer&lt;/span&gt;
&lt;span class="n"&gt;version&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;v&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;ep&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_version_&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;version&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="n"&gt;latest&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="ne"&gt;ValueError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Module version is not newer than previous release!&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;version&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;So, that script does a couple things for us. It polls GitHub for the latest release marked in the repo under my
username and project name. It then verifies that the version is valid and &lt;em&gt;new&lt;/em&gt;.&lt;/p&gt;
&lt;h3&gt;How About that Action Definition?&lt;/h3&gt;
&lt;p&gt;So, we've covered one of the four pieces we need to accomplish. What's left? Well, we still need to build the
Python package (but that's easy) and then create the release and push it to PyPI. Lucky for us, both of those
remaining "questions" there's ready-made GitHub actions! So what does this whole thing look like?&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Release&lt;/span&gt;
&lt;span class="n"&gt;on&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
  &lt;span class="n"&gt;push&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
   &lt;span class="n"&gt;branches&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
     &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;master&lt;/span&gt;

&lt;span class="n"&gt;jobs&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
  &lt;span class="n"&gt;release&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;runs&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;on&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;ubuntu&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;latest&lt;/span&gt;
    &lt;span class="n"&gt;steps&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
      &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;uses&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;actions&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;checkout&lt;/span&gt;&lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="n"&gt;v2&lt;/span&gt;
      &lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="n"&gt;https&lt;/span&gt;&lt;span class="o"&gt;://&lt;/span&gt;&lt;span class="n"&gt;github&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;com&lt;/span&gt;&lt;span class="sr"&gt;/marketplace/actions/s&lt;/span&gt;&lt;span class="n"&gt;etup&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;python&lt;/span&gt;
      &lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="o"&gt;^--&lt;/span&gt; &lt;span class="n"&gt;This&lt;/span&gt; &lt;span class="n"&gt;gives&lt;/span&gt; &lt;span class="n"&gt;info&lt;/span&gt; &lt;span class="n"&gt;on&lt;/span&gt; &lt;span class="n"&gt;matrix&lt;/span&gt; &lt;span class="n"&gt;testing&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
      &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Install&lt;/span&gt; &lt;span class="n"&gt;Python&lt;/span&gt;
        &lt;span class="n"&gt;uses&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;actions&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;setup&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;python&lt;/span&gt;&lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="n"&gt;v1&lt;/span&gt;
        &lt;span class="k"&gt;with&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
          &lt;span class="n"&gt;python&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;version&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;3.10&amp;quot;&lt;/span&gt;
      &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Identify&lt;/span&gt; &lt;span class="n"&gt;Version&lt;/span&gt;
        &lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;version&lt;/span&gt;
        &lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;
          &lt;span class="n"&gt;python&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="n"&gt;pip&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="n"&gt;requests&lt;/span&gt; &lt;span class="n"&gt;build&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;
          &lt;span class="n"&gt;python&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="n"&gt;pip&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="n"&gt;requirements&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;txt&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;
          &lt;span class="n"&gt;output&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;$&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;python&lt;/span&gt; &lt;span class="n"&gt;release&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;version&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;py&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
          &lt;span class="n"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;::set-output name=version::$output&amp;quot;&lt;/span&gt;
      &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Build&lt;/span&gt; &lt;span class="n"&gt;Artifacts&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;success&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt;
        &lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;build&lt;/span&gt;
        &lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;
          &lt;span class="n"&gt;python&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="n"&gt;build&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;sdist&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;wheel&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;outdir&lt;/span&gt; &lt;span class="n"&gt;dist&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;
      &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Create&lt;/span&gt; &lt;span class="n"&gt;Release&lt;/span&gt;
        &lt;span class="n"&gt;uses&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;ncipollo&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;release&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;action&lt;/span&gt;&lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="n"&gt;v1&lt;/span&gt;
        &lt;span class="k"&gt;with&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
          &lt;span class="n"&gt;tag&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;$&lt;/span&gt;&lt;span class="o"&gt;{{&lt;/span&gt; &lt;span class="n"&gt;steps&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;version&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;outputs&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;version&lt;/span&gt; &lt;span class="o"&gt;}}&lt;/span&gt;
          &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Release&lt;/span&gt; &lt;span class="n"&gt;$&lt;/span&gt;&lt;span class="o"&gt;{{&lt;/span&gt; &lt;span class="n"&gt;steps&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;version&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;outputs&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;version&lt;/span&gt; &lt;span class="o"&gt;}}&lt;/span&gt;
          &lt;span class="n"&gt;body&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;$&lt;/span&gt;&lt;span class="o"&gt;{{&lt;/span&gt; &lt;span class="n"&gt;steps&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;tag_version&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;outputs&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;changelog&lt;/span&gt; &lt;span class="o"&gt;}}&lt;/span&gt;
          &lt;span class="n"&gt;artifacts&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;dist/*&amp;quot;&lt;/span&gt;
      &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Publish&lt;/span&gt; &lt;span class="n"&gt;distribution&lt;/span&gt; &lt;span class="err"&gt;📦&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;PyPI&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;success&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt;
        &lt;span class="n"&gt;uses&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;pypa&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;gh&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;action&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;pypi&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;publish&lt;/span&gt;&lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="n"&gt;master&lt;/span&gt;
        &lt;span class="k"&gt;with&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;password&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;$&lt;/span&gt;&lt;span class="o"&gt;{{&lt;/span&gt; &lt;span class="n"&gt;secrets&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;PYPI_API_TOKEN&lt;/span&gt; &lt;span class="o"&gt;}}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;That big definition basically does a bunch of stuff for us; I'll break it out by each of the steps:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Check out the source code.&lt;/li&gt;
&lt;li&gt;Install Python 3.10 - Because we kinda need that. Notice here that &lt;code&gt;3.10&lt;/code&gt; is in double quotes as: "3.10".
That's because otherwise, the GitHub system might mistake it as 3.1... You know, because 3.10 is really just
a decimal number with an extra 0 at the end.&lt;/li&gt;
&lt;li&gt;Use the Python Script (from above) to figure out the version. But not before installing the required
packages; both for the script, and for &lt;em&gt;ElectricPy&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;Build the Artifacts - The things we want to keep. Namely the source-code distribution (&lt;code&gt;--sdist&lt;/code&gt;) and the
wheel file.&lt;/li&gt;
&lt;li&gt;Create the GitHub release. This will place the package on the GitHub repo's "Releases" page and add a new
tag to the repository so it's easy to back-track the code.&lt;/li&gt;
&lt;li&gt;Finally, push those artifacts to PyPI so they're available for download and install with &lt;code&gt;pip&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;Wrapping Up&lt;/h3&gt;
&lt;p&gt;This might not be the biggest accomplishment, but it's a huge relief because it makes automating releases
and pushing out updates MUCH easier. So, let's bring on the new features and updates!!!&lt;/p&gt;</content><category term="Python"></category><category term="Automation"></category><category term="Python"></category><category term="Github Actions"></category><category term="PyPI"></category></entry><entry><title>DJ Joe Playlister</title><link href="https://engineerjoe440.github.io/stanley-solutions-blog/dj-joe-playlister.html" rel="alternate"></link><published>2021-10-16T12:03:00-07:00</published><updated>2021-10-16T12:03:00-07:00</updated><author><name>Joe Stanley</name></author><id>tag:engineerjoe440.github.io,2021-10-16:/stanley-solutions-blog/dj-joe-playlister.html</id><summary type="html">&lt;p&gt;I've been going a bit crazy with the web-app craze lately. Let me show you what I've been up to...&lt;/p&gt;</summary><content type="html">&lt;p&gt;I've been working up a fever on web-apps recently. Ones that I'm developing, ones that I'm deploying, and ones that
I'm reviewing. That goes for both work and home. Gosh... I think I need a vacation. Maybe next lifetime.&lt;/p&gt;
&lt;p&gt;Recently, at home, my focus has been on several "DJ Joe Services," things that I can utilize for my mobile DJ work and
that will help me make those processes easier. Remember, I'm lazy! I want to find the easiest way to do things. Right
now, I've got two apps deployed, and I'll be working on a third here pretty soon.&lt;/p&gt;
&lt;p&gt;The first app was an availability calendar. I'll have to write about it soon, since it was a fun project tying APIs,
Python, and React.js all into one solution. However, this is about my second app. What I call a "playlister," i.e.,
something that can slurp the playlist information out of another file/service/etc., and provide it in a more consumable
manner. Right now, it's focus is on Spotify and Apple-Music, since those are the two prominent sources that are
consistent enough for me to work with.&lt;/p&gt;
&lt;p&gt;&lt;img src="https://engineerjoe440.github.io/stanley-solutions-blog/images/Screenshot_20211016_120952.png" style="width: 100%;" alt="DJ Joe Playlister"&gt;&lt;/p&gt;
&lt;h3&gt;Inspiration&lt;/h3&gt;
&lt;p&gt;As a mobile DJ, I often am provided "playlists" in various forms: Word documents, text
files, quickly-scribbled hand-written notes, Spotify playlists, and Apple Music playlists.&lt;/p&gt;
&lt;p&gt;It quickly became apparent for me, that I spent &lt;em&gt;way&lt;/em&gt; more time working through these
Spotify playlists and Apple Music playlists to get them into a form that was actually
helpful for me. In most cases, I could not simply copy/paste the Spotify list(s) out so
that I could search for the songs of interest in my own library and then determine whether
I'd need to aqcuire additional music. Thus... I came to the conclusion, I'd want a little
assistance from my computer.&lt;/p&gt;
&lt;h3&gt;Stages of Development&lt;/h3&gt;
&lt;p&gt;I originally started with a simple Tkinter-app that used the &lt;a href="https://spotipy.readthedocs.io/en/latest/"&gt;&lt;code&gt;spotipy&lt;/code&gt;&lt;/a&gt;
package to pull playlist information into a simple plain-text file. It was helpful, but
ended up incurring a few additional challenges of its own. The largest of which being the
fact I had to securly pass the API secrets around with the script itself. This became a
real burden, so I decided to enhance the system into a full-service mini web-app that
could be utilized for exactly this purpose. The web-app could run persistently on a server
that could hang on to those secrets and allow me to access the tool from anywhere.&lt;/p&gt;
&lt;p&gt;Thus, the &lt;code&gt;djjoeplaylister&lt;/code&gt; was born.&lt;/p&gt;
&lt;h3&gt;Technical Details&lt;/h3&gt;
&lt;p&gt;This app is built on the shoulders of giants, so let me give credit to those where it's due!&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Technology Specs&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Language: Python 3&lt;/li&gt;
&lt;li&gt;Web Framework: &lt;a href="https://fastapi.tiangolo.com/"&gt;FastAPI&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Web Listener/ASGI Server: &lt;a href="https://uvicorn.org/"&gt;Uvicorn&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Reverse Proxy: &lt;a href="https://nginx.com/"&gt;Nginx&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Hosting Provider: &lt;a href="https://linode.com/"&gt;Linode virtual hosting&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Operating System: Ubuntu server&lt;/li&gt;
&lt;li&gt;App Deployment Enviromnent: Dockerized Container&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Python Packages Leveraged&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Spotify Client: &lt;a href="https://spotipy.readthedocs.io/en/latest/"&gt;&lt;code&gt;spotipy&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Apple Music Client: &lt;a href="https://docs.python-requests.org/en/latest/"&gt;&lt;code&gt;requests&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;HTML Table Generation: &lt;a href="https://pandas.pydata.org/"&gt;&lt;code&gt;pandas&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Additionally, I'd like to provide a special thanks and shout-out to this gist that
helped me get up and running with consuming the Apple Music playlist without dealing
with Apple's crummy developer program ($99 dolars a year, just to access an API? No
thank you!)
&lt;a href="https://gist.github.com/aleclol/ef9e87d0964f00975f82d5373a814447"&gt;https://gist.github.com/aleclol/ef9e87d0964f00975f82d5373a814447&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;That's it! My little DJ Playlister! Want to go see it? &lt;a href="https://playlists.djjoeidaho.com/"&gt;Go Check it Out!&lt;/a&gt; It's not
anything too terribly special, and it's got plenty of room to grow, but it's a helpful little tool, and I think it
showcases the utility of the Python programming language.&lt;/p&gt;
&lt;h5&gt;I mean... just think about it.&lt;/h5&gt;
&lt;p&gt;I started with a simple little Tkinter script for which I had to lug secrets around all the time, and it was great! But
it had some significant shortcomings. Python to the rescue though, a little refactoring, and throw in some HTML, CSS,
and some more packages and I've got a full web-application. Still full Python, and it's fully-deployed! You can't do that
with a lot of other tools. Imagine if I had started with some Excel macro, or some bash script. It would've been very
difficult to scale those apps out to something that's actually useful in the context that I need.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;Not with Python!&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Preaching session over. Chat again soon, goodbye!&lt;/p&gt;</content><category term="Python"></category><category term="Spotify"></category><category term="Apple-Music"></category><category term="Python"></category><category term="Web-Apps"></category><category term="DJ"></category><category term="Docker"></category></entry><entry><title>A Better Way to Integrate with VoiceMeeter?</title><link href="https://engineerjoe440.github.io/stanley-solutions-blog/a-better-way-to-integrate-with-voicemeeter.html" rel="alternate"></link><published>2021-09-12T17:07:00-07:00</published><updated>2021-09-15T17:38:00-07:00</updated><author><name>Joe Stanley</name></author><id>tag:engineerjoe440.github.io,2021-09-12:/stanley-solutions-blog/a-better-way-to-integrate-with-voicemeeter.html</id><summary type="html">&lt;p&gt;Wait... What? There's an API for VoiceMeeter? And there's already a Python API for it? Sign me up!&lt;/p&gt;</summary><content type="html">&lt;p&gt;So, I finally sucked it up and bought an Intel NUC to run as my own mini audio-server. For what purpose,
you ask? Well, so that I can have an "always on" &lt;a href="https://vb-audio.com/Voicemeeter/vban.htm"&gt;VBAN&lt;/a&gt; server
where I can route audio through-out my house. From my desktop, my laptop, my mixer, my stereo.... All
over!&lt;/p&gt;
&lt;p&gt;Now, I did run into a little trouble in the process. My little NUC is mounted nicely out of the way at my
desk in my study. It looks great, and runs great... buuuuut... There's one little problem.&lt;/p&gt;
&lt;p&gt;When I connect or disconnect over a Remote Desktop (RDP) connection it gets, shall we say, a little mixed
up. In fact, the VoiceMeeter audio engine falls all over itself and gets tangled up. Now, to get around
this problem, I can restart the audio engine, or the software itself. So I started looking into how to
automate the kick-in-the-pants the software needed. Mind you, I'd done this before by using Python to find
the process ID that VoiceMeeter was associated with, and kill it, restarting a moment later. But that's
boring and slow. So I did some Googling...&lt;/p&gt;
&lt;p&gt;Turns out, VoiceMeeter has an &lt;a href="https://forum.vb-audio.com/viewtopic.php?f=8&amp;amp;t=346"&gt;API&lt;/a&gt;! FANTASTIC!&lt;/p&gt;
&lt;p&gt;Now, I realize that that's a C-API, and I'd much rather do my programming in Python. I don't really want
to fuss with installing GCC on my little NUC. SO... I started investigating how to wrap the C-API with
Python. It's something I'd never done before, but I figured it must be possible! Once more, I turned to
the internet wizards, and found a very &lt;a href="https://stackoverflow.com/a/252473/10406011"&gt;nice little article on StackOverflow&lt;/a&gt;
on how to wrap a C-level DLL with Python.&lt;/p&gt;
&lt;p&gt;I used that article and proved to myself that, YES, I can write Python code to hit the DLL. But, it
occurred to me, that maybe somebody else had already done that work.&lt;/p&gt;
&lt;p&gt;Back to Google...&lt;/p&gt;
&lt;p&gt;EUREKA! Turns out that someone (&lt;a href="https://github.com/chvolkmann"&gt;Christian Volkmann&lt;/a&gt;, to be specific) had
already written a full API against the DLL. It's all in Python, and it's glorious! Here...
&lt;a href="https://github.com/chvolkmann/voicemeeter-remote-python"&gt;Go take a look!&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;So all that left for me was whacking out a little script to run in the background, monitor for new RDP
connections, and restart the audio engine when the connection state changed. Here's what that looked
like:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# vmeetermanager - an automated tool to keep VoiceMeeter running correctly.&lt;/span&gt;
&lt;span class="c1"&gt;# (c) 2021 - Stanley Solutions | Joe Stanley&lt;/span&gt;

&lt;span class="c1"&gt;# Imports&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;voicemeeter&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;subprocess&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;time&lt;/span&gt;


&lt;span class="c1"&gt;# Define function to determine rdp connection&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;is_rdp_connected&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;args&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;netstat&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;-n&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;|&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;find&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;quot;:3389 &amp;quot;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="n"&gt;resp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;subprocess&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39; &amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;shell&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;capture_output&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;ESTABLISHED&amp;quot;&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;resp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stdout&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;decode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;utf-8&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;True&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;False&lt;/span&gt; &lt;span class="c1"&gt;# Default&lt;/span&gt;


&lt;span class="c1"&gt;# Main Body&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vm"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;__main__&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;last_state&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;False&lt;/span&gt;
    &lt;span class="c1"&gt;# Establish VoiceMeeter Connection&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;voicemeeter&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;remote&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;banana&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;vmr&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="c1"&gt;# Run Loop&lt;/span&gt;
                &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                    &lt;span class="c1"&gt;# Determine Connection State&lt;/span&gt;
                    &lt;span class="n"&gt;connected&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;is_rdp_connected&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
                    &lt;span class="n"&gt;changed_state&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;connected&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="n"&gt;last_state&lt;/span&gt;
                    &lt;span class="n"&gt;last_state&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;connected&lt;/span&gt;
                    &lt;span class="c1"&gt;# If the state has changed, restart audio engine&lt;/span&gt;
                    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;changed_state&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                        &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;RDP Connection State Changed to: CONNECTED=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;connected&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                        &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;0.25&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                        &lt;span class="n"&gt;vmr&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;restart&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
                    &lt;span class="c1"&gt;# Don&amp;#39;t overburden the systems&lt;/span&gt;
                    &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="ne"&gt;Exception&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;VoiceMeeter Hasn&amp;#39;t Started Yet...&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;What Else Will Come?&lt;/h3&gt;
&lt;p&gt;Goodness, there's so many other things that I can do with this now. Imagine having a full web-based front
end that I could use to control it! That would be pretty awesome, wouldn't it? I'll really have to do
some more exploring with this!&lt;/p&gt;</content><category term="Python"></category><category term="Audio"></category><category term="Voicemeeter"></category><category term="Api"></category><category term="Sdk"></category><category term="Mixer"></category><category term="Python"></category></entry><entry><title>GitLab, Jenkins, Python, and the Raspberry Pi!</title><link href="https://engineerjoe440.github.io/stanley-solutions-blog/gitlab-jenkins-and-the-rpi.html" rel="alternate"></link><published>2020-12-21T19:07:00-08:00</published><updated>2021-01-04T21:07:00-08:00</updated><author><name>Joe Stanley</name></author><id>tag:engineerjoe440.github.io,2020-12-21:/stanley-solutions-blog/gitlab-jenkins-and-the-rpi.html</id><summary type="html">&lt;p class="first"&gt;I'm finally getting around to setting up some CI/CD systems for my self-hosted GitLab server... About Time!&lt;/p&gt;
&lt;p class="last"&gt;CI/CD, Dev Ops, Pipelines, Workflows, Automated Deployment&lt;/p&gt;
</summary><content type="html">&lt;p&gt;Think that's enough buzz words to catch the Google SEO engine's eye?&lt;/p&gt;
&lt;p&gt;Probably not, I know, but I'm not going to spend anymore time on it at the moment. See,
I've got bigger items to tackle! Namely, getting Jenkins set up on a Raspberry Pi, as
the name of this article so implies.&lt;/p&gt;
&lt;p&gt;Good news for you; I've cut out the &amp;quot;dirty-work&amp;quot; through the magic of &amp;quot;blog-posting.&amp;quot;&lt;/p&gt;
&lt;p&gt;As part of the work I've been tackling for some of the other open source projects I'm
developing, I need to develop a local (on-premises) continuous integration solution to
effectively slam my code with testing and verification. After all, what's great code
without equally great tests? I need to have the system on-premises for a couple reasons;
the largest of which being the fact that I need access to custom hardware.&lt;/p&gt;
&lt;blockquote&gt;
So, why a Pi? A Pi 3-B no less?!&lt;/blockquote&gt;
&lt;p&gt;Well, that's quite simple; actually. It's the only spare computer I have at the moment.&lt;/p&gt;
&lt;p&gt;So now that I've thoroughly introduced you, to my reasoning, and the topic at hand;
let's get into it!&lt;/p&gt;
&lt;div class="section" id="installing-jenkins-on-the-pi"&gt;
&lt;h2&gt;Installing Jenkins on the Pi&lt;/h2&gt;
&lt;p&gt;I already have GitLab set up on an old x86 laptop running Ubuntu Server 20.04, so
for this article, I'm going to focus on setting up Jenkins on a Raspberry Pi, and
getting the basics of the workflow between Jenkins and GitLab running.&lt;/p&gt;
&lt;ol class="arabic"&gt;
&lt;li&gt;&lt;p class="first"&gt;Start with a fresh Pi (latest build of the RaspberryPiOS). I had a Pi sitting
around with an older build of Raspbian, but that's several years old, and I
really just wanted to start fresh.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Update the Raspberry Pi. Well, in the spirit of starting fresh, might as well
update the system!&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Install Java with:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$&lt;/span&gt;&amp;gt; sudo apt-get install openjdk-11-jre
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Verify Java Version with:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$&lt;/span&gt;&amp;gt; java --version
&lt;span class="go"&gt;openjdk 11.0.9.1 2020-11-04&lt;/span&gt;
&lt;span class="go"&gt;OpenJDK Runtime Environment (build 11.0.9.1+1-post-Raspbian-1deb10u2)&lt;/span&gt;
&lt;span class="go"&gt;OpenJDK Server VM (build 11.0.9.1+1-post-Raspbian-1deb10u2, mixed mode)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;At this point, I took some time to get the Python system up to a state that
would be a bit more useful for me. So I installed &lt;cite&gt;pip3&lt;/cite&gt;, and a number of
Python packages. I suppose this could really be done at any point during this
whole process, but I felt like this was the most sensible time.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Download and add the Jenkins Key with:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$&lt;/span&gt;&amp;gt; wget -q -O - https://pkg.jenkins.io/debian/jenkins.io.key &lt;span class="p"&gt;|&lt;/span&gt; sudo apt-key add -
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Open a new file:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$&lt;/span&gt;&amp;gt; sudo nano /etc/apt/sources.list.d/jenkins.list
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Then add the following line and save the file to add the Jenkins repository as
a source:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;deb https://pkg.jenkins.io/debian binary/
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Next, another good &lt;cite&gt;sudo apt-get update&lt;/cite&gt; is in order, followed by
&lt;cite&gt;sudo apt-get install jenkins&lt;/cite&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Using the command listed below, you can grab the initial admin password to get
started:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$&lt;/span&gt;&amp;gt; sudo cat /var/lib/jenkins/secrets/initialAdminPassword
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Now it's time to navigate to &lt;cite&gt;&amp;lt;raspberry-pi-ip-address:8080&lt;/cite&gt; and use that fancy
password to log in for the first time and start the setup wizard; or should I say
butler?&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;After the &amp;quot;butler&amp;quot; has completed, it's time to get started with setting up some CI
jobs.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="preparing-a-simple-pytest-job-with-jenkins"&gt;
&lt;h2&gt;Preparing a Simple &lt;cite&gt;pytest&lt;/cite&gt; Job with Jenkins&lt;/h2&gt;
&lt;p&gt;Now, I'll caution that I this portion doesn't cover any of the GitLab/Jenkins
interfacing, maybe I'll get to writing that in another article... As part of the
material I'm skipping, I'm going to breeze right over the GitLab connection and
repository information. I'm going to focus, instead, on the build operations.&lt;/p&gt;
&lt;ol class="arabic"&gt;
&lt;li&gt;&lt;p class="first"&gt;With the new Jenkins server up and running, create a &amp;quot;New Item,&amp;quot; give it a
descriptive, memorable name, and set it as a &amp;quot;Freestyle Project&amp;quot;&lt;/p&gt;
&lt;img alt="Create a new project in Jenkins for CI." src="https://engineerjoe440.github.io/stanley-solutions-blog/images/jenkins-new-config.png" style="width: 800px;" /&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;After configuring the various other settings relevant to the project (repository,
build-triggers, etc.) find the &lt;em&gt;&amp;quot;Build&amp;quot;&lt;/em&gt; section and from the &lt;em&gt;&amp;quot;Add build step&amp;quot;&lt;/em&gt;
select &lt;em&gt;&amp;quot;Execute shell&amp;quot;&lt;/em&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;In the new &amp;quot;Command&amp;quot; field of the &amp;quot;Execute shell&amp;quot; section, insert the commands
necessary to navigate to the appropriate subdirectory and run &lt;cite&gt;pytest&lt;/cite&gt;. In my case,
my pytest &amp;quot;test folder&amp;quot; is located in the root directory, so I don't really need
to change the working directory; I just go and run &lt;cite&gt;pytest&lt;/cite&gt;. I do run a few other
generic commands just to make sure that I've got a fair report of the build
environment in case I need to go back and debug some things. So, here's a sample
of what my configuration might look like.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="go"&gt;echo &amp;quot;Current Directory&amp;quot;&lt;/span&gt;
&lt;span class="go"&gt;pwd&lt;/span&gt;
&lt;span class="go"&gt;echo &amp;quot;List Folder Structure&amp;quot;&lt;/span&gt;
&lt;span class="go"&gt;ls -a ./&amp;lt;name-of-my-python-package-folder&amp;gt;&lt;/span&gt;
&lt;span class="go"&gt;echo &amp;quot;Run pytest&amp;quot;&lt;/span&gt;
&lt;span class="go"&gt;pytest -v&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class="section" id="summary"&gt;
&lt;h2&gt;Summary&lt;/h2&gt;
&lt;p&gt;Well, that's a pretty rough intro into what I've been doing in Jenkins and GitLab.
Kinda rough, but I hope I'll be looking to add more in the near future.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Python"></category><category term="Python"></category><category term="Jenkins"></category><category term="Gitlab"></category><category term="Raspberry Pi"></category><category term="Dev Ops"></category><category term="GIT"></category><category term="CI/CD"></category></entry><entry><title>pycev - A Python CEV Reader</title><link href="https://engineerjoe440.github.io/stanley-solutions-blog/pycev-a-python-cev-reader.html" rel="alternate"></link><published>2020-12-12T10:59:00-08:00</published><updated>2020-12-12T10:59:00-08:00</updated><author><name>Joe Stanley</name></author><id>tag:engineerjoe440.github.io,2020-12-12:/stanley-solutions-blog/pycev-a-python-cev-reader.html</id><summary type="html">&lt;p class="first last"&gt;Another new project? Well, why not? This time, we'll be tackling reading CEV files from SEL in Python.&lt;/p&gt;
</summary><content type="html">&lt;img alt="Introducing: pycev!" src="https://raw.githubusercontent.com/engineerjoe440/pycev/main/logo/pycev.png" style="width: 600px;" /&gt;
&lt;p&gt;Wait...&lt;/p&gt;
&lt;p&gt;Another new project?&lt;/p&gt;
&lt;p&gt;Yes. That's right. I'm starting another new project. But hey! There's a lot of framework
that needs to be introduced before I can start doing all the cool high-level stuff that we
all want to see and use. I mean, by now you should understand that I'm all about getting
the framework right. If you're still not sure, go read my rant about getting the framework
right... &lt;a class="reference external" href="https://blog.stanleysolutionsnw.com/write-framework-once.html"&gt;This is my rant on getting framework right.&lt;/a&gt;&lt;/p&gt;
&lt;div class="section" id="goal"&gt;
&lt;h2&gt;Goal:&lt;/h2&gt;
&lt;p&gt;So what's the plan here, anyway?&lt;/p&gt;
&lt;p&gt;Well, this project, &lt;cite&gt;pycev&lt;/cite&gt; (I've almost considered that it should be pronounced &amp;quot;pie-safe&amp;quot;, but
that's not how it looks, so we'll let that stew a while longer) will be a package for reading and
interpreting SEL Compressed EVent records. They're a proprietary (but open) format in which SEL
protective relays collect event information and &amp;quot;compress&amp;quot; it into a format that's easily read
by machines (computers).&lt;/p&gt;
&lt;p&gt;There's already a handful of projects out in the wild for reading COMTRADE records; which, if
you're unfamiliar are &amp;quot;&lt;em&gt;Common Format for Transient Data Exchange&lt;/em&gt;&amp;quot; files, and are supported by
many SEL relays in addition to a much broader number of other vendor devices. Trouble is, not
everyone uses COMTRADE, and comparatively, CEV files are a little simpler, and (in my opinion)
more straight-forward and robust. Perhaps the best Python project for reading COMTRADE files
is &lt;a class="reference external" href="https://github.com/dparrini/python-comtrade"&gt;Python Comtrade&lt;/a&gt;. That project shows great maturity and value. It also sees regular updates
and bugfixes as needed.&lt;/p&gt;
&lt;p&gt;Since it's such a well respected and mature project, I'd like to take it as inspiration for
&lt;cite&gt;pycev&lt;/cite&gt; and use it to help me realize the best API for the package so that the two libraries
could (potentially) be used interchangeably for various projects.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="what-s-first"&gt;
&lt;h2&gt;What's First?&lt;/h2&gt;
&lt;p&gt;Well, I guess starting the package development is first!&lt;/p&gt;
&lt;p&gt;I've already carved out a repository, and I've got something of a skeleton package put together.
I think the first step will be getting enough working that I can upload it to PyPI to reserve
the namespace. Then full development will need to come. There's a good handful of things that
need to be tackled:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Upload Project to PyPI&lt;/li&gt;
&lt;li&gt;Develop Core Functionality and Match API to that of &amp;quot;Python-Comtrade&amp;quot;&lt;/li&gt;
&lt;li&gt;Develop Automated Test Suite with Local Server and Various Existing CEV Files&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So that's the sort of roadmap I see before me. Now, the time-frame is still way up in the air;
so who knows whe this all will &lt;em&gt;actually&lt;/em&gt; happen. But here's hoping!&lt;/p&gt;
&lt;p&gt;If you're interested in checking in on the project, and would like to jump in and contribute,
have a little look at the &lt;a class="reference external" href="https://github.com/engineerjoe440/pycev"&gt;repository&lt;/a&gt;, and feel free to open an &lt;a class="reference external" href="https://github.com/engineerjoe440/pycev/issues"&gt;issue&lt;/a&gt; to start a conversation!&lt;/p&gt;
&lt;/div&gt;
</content><category term="Python"></category><category term="Python"></category><category term="SEL"></category><category term="CEV"></category><category term="Event"></category><category term="Record"></category><category term="Files"></category><category term="Power System"></category><category term="Analysis"></category></entry><entry><title>Reading Data with selprotopy</title><link href="https://engineerjoe440.github.io/stanley-solutions-blog/reading-data-with-selprotopy.html" rel="alternate"></link><published>2020-11-22T19:02:00-08:00</published><updated>2020-11-22T19:02:00-08:00</updated><author><name>Joe Stanley</name></author><id>tag:engineerjoe440.github.io,2020-11-22:/stanley-solutions-blog/reading-data-with-selprotopy.html</id><summary type="html">&lt;p class="first last"&gt;Finally reading some data from SEL relays using Python! Now to get the controls working...&lt;/p&gt;
</summary><content type="html">&lt;p&gt;Still deep in the process of getting a fully functional SEL protocol binding suite in Python, but,
hey! At least I can write a little update on what's been going on!&lt;/p&gt;
&lt;p&gt;(if you haven't read my article on what &lt;cite&gt;selprotopy&lt;/cite&gt; is, take a look &lt;a class="reference external" href="https://blog.stanleysolutionsnw.com/sel-protocol-coming-to-python.html"&gt;here&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;In the past month of so, I've been able to really &amp;quot;whack out&amp;quot; some reasonable functionality. In
fact, I've been able to poll an SEL-351 for both digital and analog data. For those of you who
are a little familiar with SEL protocol, that means that I've been able to create a parser for
the relay definition block, and the various fast-meter blocks in addition to the DNA definition.
To boot, I've even tested (albeit breifly) on an SEL-751 and saw pretty promissing results.&lt;/p&gt;
&lt;p&gt;That's all pretty good, but the eventual goal (well, &lt;em&gt;my&lt;/em&gt; eventual goal) is to be able to poll
regularly and send commands/controls as needed. I'd also like to be able to read CEV reports
(more on that in the future) and perhaps the relay's SER (Sequential Event Recorder). So, is any
of the control functionality working yet? Not really...&lt;/p&gt;
&lt;p&gt;I've gotten to the point where the commands &lt;em&gt;should&lt;/em&gt; be configured and sent correctly to the
relay, but no dice.&lt;/p&gt;
&lt;p&gt;Somewhere along the lines, I've clearly &amp;quot;bugged&amp;quot; something up. So now, it's really just a matter
of doing some additional debugging. Hmm... will need to get started on that. Trouble is, I've got
lots of other fun projects to work on too!!!&lt;/p&gt;
&lt;div class="section" id="c-mon-joe-wrap-this-thing-up"&gt;
&lt;h2&gt;C'mon, Joe; wrap this thing up...&lt;/h2&gt;
&lt;p&gt;Okay, so I'm rambling; at this point, I'm pretty excited to say that I've got some polling working
with &lt;cite&gt;selprotopy&lt;/cite&gt;, but there's clearly some more to work on. I'm hoping that I can get commands
working here pretty soon, and then I've got a handful of options as the next step.&lt;/p&gt;
&lt;div class="section" id="i-could"&gt;
&lt;h3&gt;I could:&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;create a system to read the SER&lt;/li&gt;
&lt;li&gt;get the CEV reading figured out&lt;/li&gt;
&lt;li&gt;start testing on a variety of SEL relays (but this would require testing a FOSS project at SEL,
so I'm still not sure about this one)&lt;/li&gt;
&lt;li&gt;get an automated test suite built on my local GitLab instance&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Clearly some more work coming, so stay tuned!&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</content><category term="Python"></category><category term="Protocols"></category><category term="SEL"></category><category term="Python"></category><category term="Communications"></category><category term="Metering"></category></entry><entry><title>Introducing selprotopy</title><link href="https://engineerjoe440.github.io/stanley-solutions-blog/sel-protocol-coming-to-python.html" rel="alternate"></link><published>2020-09-20T11:07:00-07:00</published><updated>2021-02-14T16:00:00-08:00</updated><author><name>Joe Stanley</name></author><id>tag:engineerjoe440.github.io,2020-09-20:/stanley-solutions-blog/sel-protocol-coming-to-python.html</id><summary type="html">&lt;p class="first last"&gt;The SEL Protocol binding suite for Python is finally coming...&lt;/p&gt;
</summary><content type="html">&lt;p&gt;SEL Protocol is finally coming for Python. That's right, you've heard correctly; it's coming.&lt;/p&gt;
&lt;img alt="The new... `selprotopy`!" src="https://raw.githubusercontent.com/engineerjoe440/sel-proto-py/master/logo/selprotopy.png" style="width: 350px;" /&gt;
&lt;p&gt;But, what is SEL Protocol anyway?&lt;/p&gt;
&lt;p&gt;Well, it's a communications protocol, or standard, that was developed by &lt;a class="reference external" href="https://selinc.com/"&gt;SEL&lt;/a&gt; to support
fast data communications between protective electric relays (the devices that monitor the
power grid for faults) and communications processors. It was developed in the early '90s to
help improve communication support of devices to allow users to monitor protective relays
from a distance, and to perform control operations without being present.&lt;/p&gt;
&lt;p&gt;Anyway...&lt;/p&gt;
&lt;p&gt;I've begun writing &lt;a class="reference external" href="https://github.com/engineerjoe440/selprotopy"&gt;selprotopy&lt;/a&gt; which will be a protocol driver supporting SEL protocol in
Python. This means that users will be able to integrate solutions with SEL relays using
Python!&lt;/p&gt;
&lt;p&gt;Obviously, there's a lot to come, so this is not much more than an early announcement.
If you're interested in contributing, feel free to drop me a message! I'd love to interact!&lt;/p&gt;
</content><category term="Python"></category><category term="Python"></category><category term="Protocols"></category><category term="SEL"></category></entry></feed>